<org.obiba.magma.views.View>
  <name>QC_F3_hearing</name>
  <from class="org.obiba.magma.views.JoinTable">
    <list>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-f3.Participants</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-f3.Hearing</reference>
      </table>
    </list>
  </from>
  <select class="org.obiba.magma.views.support.NoneClause"/>
  <where class="org.obiba.magma.views.support.AllClause"/>
  <variables class="org.obiba.magma.js.views.VariablesClause">
    <variables class="linked-hash-set">
      <variable name="technician" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;clsa-dcs-f3.Hearing:InstrumentRun.user&apos;).whenNull(
  $group(&apos;Admin.Action.stage&apos;,&apos;Hearing&apos;,&apos;Admin.Action.user&apos;).asSequence().last()).lowerCase()</attribute>
        </attributes>
      </variable>
      <variable name="contraindicated" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$group(&apos;clsa-dcs-f3.Participants:Admin.StageInstance.stage&apos;,&apos;Hearing&apos;,
&apos;Admin.StageInstance.lastState&apos;).any(&apos;Contraindicated&apos;,&apos;NotApplicable&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="comment" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
//
var stage = &apos;Hearing&apos;
var c_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.comment&apos;).asSequence()
var e_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence()
var res = null
if(c_seq.size().eq(e_seq.size()).value())
{
  var c_str = []  // string array of comments
  var e_str = []  // string array of event reasons

  for(var i = 0; i &lt; c_seq.size(); i++) {
    var c = c_seq.valueAt(i).value()
    if(null == c) continue
    c = c.replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var e = e_seq.valueAt(i).value()
    if(0 &lt; c.length) {
      c_str.push(c)
      if(null != e &amp;&amp; 0 &lt; e.length) {
        e = e.slice(14)
      } else {
        e = &apos;SeeComment&apos;
      }
      e_str.push(e)
    }
  }

  if(0 &lt; c_str.length) {
    var arr = []  // array of event reasons
    var key_orig = []  // array of lower cased comments as unique keys
    for(var i = 0; i &lt; c_str.length; i++) {
      var key = c_str[i]
      var key_lower = key.toLowerCase()
      // retain the first encountered instance of the comment
      //
      if(undefined === key_orig[key_lower])
        key_orig[key_lower] = key

      if(undefined === arr[e_str[i]])
        arr[e_str[i]] = []

      if(-1==arr[e_str[i]].indexOf(key_orig[key_lower]))
        arr[e_str[i]].push(key_orig[key_lower])
    }

    // loop over the final array of event reasons and their sets of comments
    //
    var str = &apos;{&apos;
    for(var key in arr) {
      str += &apos;&quot;&apos; + key + &apos;&quot;:[&apos;
      var t = []
      for(var i = 0; i &lt; arr[key].length; i++) {
        t.push(&apos;&quot;&apos; + arr[key][i] + &apos;&quot;&apos;)
      }
      str += t.join(&apos;,&apos;) + &apos;],&apos;
    }

    res = newValue(str.substring(0,str.length-1)+&apos;}&apos;,&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="duration" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;Hearing&apos;
var res = newValue(0,&apos;integer&apos;)
var r = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.dateTime&apos;).asSequence()
for(var k=0; k&lt;r.size();k+=2) {      
  if(r.valueAt(k+1).format(&apos;yyyyMMdd&apos;).eq(r.valueAt(k).format(&apos;yyyyMMdd&apos;)).value()) {
    res = res.plus(r.valueAt(k+1).time().minus(r.valueAt(k).time()).div(1000).whenNull(0))
  }
}
if(res.le(0).value()) {
 res = $group(&apos;Admin.StageInstance.stage&apos;,stage,&apos;Admin.StageInstance.duration&apos;).asSequence().sum().whenNull(0)
}
res.gt(0).value()?res:null</attribute>
        </attributes>
      </variable>
      <variable name="missing" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;contraindicated&apos;).not().and(
  $this(&apos;skip&apos;).isNull(),
  $this(&apos;duration&apos;).isNull(),
  $this(&apos;frequency_complete&apos;).eq(0))</attribute>
        </attributes>
      </variable>
      <variable name="skip" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;Hearing&apos;
var action = $group(&apos;clsa-dcs-f3.Participants:Admin.Action.stage&apos;,stage,&apos;Admin.Action.actionType&apos;).asSequence()
var res = $group(&apos;clsa-dcs-f3.Participants:Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence().filter(function(v,i){
  return i == action.indexOf(&apos;SKIP&apos;)
  }).last()
if(res.isNull().not().value()) {
  res = newValue(res.value().slice(14),&apos;text&apos;)  
}
res</attribute>
        </attributes>
      </variable>
      <variable name="frequency_error" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;clsa-dcs-f3.Hearing:&apos;
var err_var = [
&apos;RES_LEFT_1KT_ERR&apos;,
&apos;RES_LEFT_1K_ERR&apos;,
&apos;RES_LEFT_2K_ERR&apos;,
&apos;RES_LEFT_3K_ERR&apos;,
&apos;RES_LEFT_4K_ERR&apos;,
&apos;RES_LEFT_500_ERR&apos;,
&apos;RES_LEFT_6K_ERR&apos;,
&apos;RES_LEFT_8K_ERR&apos;,
&apos;RES_RIGHT_1KT_ERR&apos;,
&apos;RES_RIGHT_1K_ERR&apos;,
&apos;RES_RIGHT_2K_ERR&apos;,
&apos;RES_RIGHT_3K_ERR&apos;,
&apos;RES_RIGHT_4K_ERR&apos;,
&apos;RES_RIGHT_500_ERR&apos;,
&apos;RES_RIGHT_6K_ERR&apos;,
&apos;RES_RIGHT_8K_ERR&apos;
]

// ensure error code is upper cased!!!
var code = {
  NO_RESPONSE:0,
  NO_RESPONSE_1K:0,
  VERIFY_FAILED_1K:0,
  NO_THRESHOLD:0,
  NO_THRESHOLD_AGAIN:0,
  TOO_MANY_FAILURES:0,
  AA:0,
  E1:0,
  E2:0,
  E3:0,
  E4:0,
  E5:0,
  E6:0,
  E7:0,
  E8:0,
  EE:0,
  EF:0
}

for(var i=0; i&lt;err_var.length; i++) {
  var v = $(stage + err_var[i]).upperCase()
  if(v.isNull().not().value()) {
    code[v.value()]++
  }
}

var res = null
var str = []
for(var v in code) {
  if(0&lt;code[v]) {
    str.push(&apos;&quot;&apos;+v+&apos;&quot;:&apos; + code[v])
  }  
}
if(0&lt;str.length) {
  res = newValue(&apos;{&apos;+str.join(&apos;,&apos;)+&apos;}&apos;,&apos;text&apos;)
}
res</attribute>
        </attributes>
      </variable>
      <variable name="frequency_complete" valueType="decimal" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;clsa-dcs-f3.Hearing:&apos;
var sz = newSequence([
$(stage + &apos;RES_LEFT_1KT&apos;),
$(stage + &apos;RES_LEFT_1K&apos;),
$(stage + &apos;RES_LEFT_2K&apos;),
$(stage + &apos;RES_LEFT_3K&apos;),
$(stage + &apos;RES_LEFT_4K&apos;),
$(stage + &apos;RES_LEFT_500&apos;),
$(stage + &apos;RES_LEFT_6K&apos;),
$(stage + &apos;RES_LEFT_8K&apos;),
$(stage + &apos;RES_RIGHT_1KT&apos;),
$(stage + &apos;RES_RIGHT_1K&apos;),
$(stage + &apos;RES_RIGHT_2K&apos;),
$(stage + &apos;RES_RIGHT_3K&apos;),
$(stage + &apos;RES_RIGHT_4K&apos;),
$(stage + &apos;RES_RIGHT_500&apos;),
$(stage + &apos;RES_RIGHT_6K&apos;),
$(stage + &apos;RES_RIGHT_8K&apos;)
],&apos;integer&apos;)
sz.trimmer().size().div(sz.size()).multiply(100).whenNull(0)</attribute>
        </attributes>
      </variable>
    </variables>
  </variables>
  <created valueType="datetime">2021-11-11T10:23:53.827-05</created>
  <updated valueType="datetime">2021-11-11T10:23:53.827-05</updated>
</org.obiba.magma.views.View>