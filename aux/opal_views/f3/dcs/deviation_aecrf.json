{"from": ["clsa-dcs-f3.Participants","clsa-dcs-f3.Deviation_AE_CRF"],"name": "QC_F3_deviation_aecrf","datasourceName": "cosmos_dcs","Magma.VariableListViewDto.view": {"variables": [{"name": "technician","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "$('clsa-dcs-f3.Deviation_AE_CRF:QuestionnaireRun.user').whenNull(\n  $group('Admin.Action.stage','Deviation_AE_CRF','Admin.Action.user').asSequence().last()).lowerCase()"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "contraindicated","entityType": "Participant","valueType": "boolean","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "$group('clsa-dcs-f3.Participants:Admin.StageInstance.stage','Deviation_AE_CRF',\n'Admin.StageInstance.lastState').any('Contraindicated','NotApplicable')"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "comment","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "// this script compounds repeated comments by using lowercase comment strings as array keys\n//\nvar stage = 'Deviation_AE_CRF'\nvar c_seq = $group('Admin.Action.stage',stage,'Admin.Action.comment').asSequence()\nvar e_seq = $group('Admin.Action.stage',stage,'Admin.Action.eventReason').asSequence()\nvar res = null\nif(c_seq.size().eq(e_seq.size()).value())\n{\n  var c_str = []  // string array of comments\n  var e_str = []  // string array of event reasons\n\n  for(var i = 0; i < c_seq.size(); i++) {\n    var c = c_seq.valueAt(i).value()\n    if(null == c) continue\n    c = c.replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,\"\")\n    var e = e_seq.valueAt(i).value()\n    if(0 < c.length) {\n      c_str.push(c)\n      if(null != e && 0 < e.length) {\n        e = e.slice(14)\n      } else {\n        e = 'SeeComment'\n      }\n      e_str.push(e)\n    }\n  }\n\n  if(0 < c_str.length) {\n    var arr = []  // array of event reasons\n    var key_orig = []  // array of lower cased comments as unique keys\n    for(var i = 0; i < c_str.length; i++) {\n      var key = c_str[i]\n      var key_lower = key.toLowerCase()\n      // retain the first encountered instance of the comment\n      //\n      if(undefined === key_orig[key_lower])\n        key_orig[key_lower] = key\n\n      if(undefined === arr[e_str[i]])\n        arr[e_str[i]] = []\n\n      if(-1==arr[e_str[i]].indexOf(key_orig[key_lower]))\n        arr[e_str[i]].push(key_orig[key_lower])\n    }\n\n    // loop over the final array of event reasons and their sets of comments\n    //\n    var str = '{'\n    for(var key in arr) {\n      str += '\"' + key + '\":['\n      var t = []\n      for(var i = 0; i < arr[key].length; i++) {\n        t.push('\"' + arr[key][i] + '\"')\n      }\n      str += t.join(',') + '],'\n    }\n\n    res = newValue(str.substring(0,str.length-1)+'}','text')\n  }\n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "qnaire_complete","entityType": "Participant","valueType": "decimal","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var stage = 'Deviation_AE_CRF'\nvar p = $('clsa-dcs-f3.' + stage + ':QuestionnaireMetric.missingCount').asSequence().sum()\nvar q = $('clsa-dcs-f3.' + stage + ':QuestionnaireMetric.questionCount').asSequence().sum()\nq.minus(p).multiply(100).div(q)"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "missing","entityType": "Participant","valueType": "boolean","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "$this('contraindicated').not().and(\n  $this('skip').isNull(),\n  $this('qnaire_complete').isNull(),\n  $this('duration').isNull())"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "duration","entityType": "Participant","valueType": "integer","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var stage = 'Deviation_AE_CRF'\nvar res = newValue(0,'integer')\nvar r = $group('Admin.Action.stage',stage,'Admin.Action.dateTime').asSequence()\nfor(var k=0; k<r.size();k+=2) {      \n  if(r.valueAt(k+1).format('yyyyMMdd').eq(r.valueAt(k).format('yyyyMMdd')).value()) {\n    res = res.plus(r.valueAt(k+1).time().minus(r.valueAt(k).time()).div(1000).whenNull(0))\n  }\n}  \nif(res.le(0).value()) {\n res = $group('Admin.StageInstance.stage',stage,'Admin.StageInstance.duration').asSequence().sum().whenNull(0)\n}\nres.gt(0).value()?res:null"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "skip","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var stage = 'Deviation_AE_CRF'\nvar action = $group('clsa-dcs-f3.Participants:Admin.Action.stage',stage,'Admin.Action.actionType').asSequence()\nvar res = $group('clsa-dcs-f3.Participants:Admin.Action.stage',stage,'Admin.Action.eventReason').asSequence().filter(function(v,i){\n  return i == action.indexOf('SKIP')\n  }).last()\nif(res.isNull().not().value()) {\n  res = newValue(res.value().slice(14),'text')  \n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "module_duration","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var stage = 'Deviation_AE_CRF'\nvar str = []\nvar section = $('clsa-dcs-f3.'+stage+':QuestionnaireMetric.section').asSequence()\nvar module = section.filter(function(v,i){ return i==this.indexOf(v) })\nvar duration = $('clsa-dcs-f3.'+stage+':QuestionnaireMetric.duration').asSequence()  \nfor(var i = 0; i < module.size(); i++) {\n  var m = module.valueAt(i).value()\n  var v = duration.filter(function(v,k) {\n      return section.valueAt(k).eq(m)\n      }).sum()\n  if(v.isNull().or(v.le(0)).value()) continue\n  str.push('\"' + m + '\":' + v.value())\n}\n0<str.length?newValue('{'+str.join(',')+'}','text'):null"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "adverse_event","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var list = ['FAINTED','SEIZURE','DIZZY','VOMITED','BLOODEX','DISTRESS',\n'TRIPPED','HEAD','FELL','BP220','BP110','OTHERAE']\n\nvar ae = $('DAE_WHAT_COF3').filter(function(v,i){\n  return v.eq(list[i]).value() \n  }).filter(function(v,j){ \n    return this.indexOf(v)==j})\n    \nvar res = null    \nif(ae.isNull().not().value()) {\n  res = newValue('[\"'+ae.join('\",\"').value()+'\"]', 'text')\n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "followup_event","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var list = ['SNACK','ICE','HOSPITAL','RETURN','NOTIFY','ETHICS','FOLLOW',\n  'RECOMDHOS','RECOMDDR','NOTNECES','OTHERAE']\n\nvar fu = $('DAE_FLWUP_COF3').filter(function(v,i){\n  return v.eq(list[i]).value() \n  }).filter(function(v,j){ \n    return this.indexOf(v)==j})\n    \nvar res = null    \nif(fu.isNull().not().value()) {\n  res = newValue('[\"'+fu.join('\",\"').value()+'\"]', 'text')\n}\nres "}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "deviation_count","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "// filter out repeated completed stages\n//\nvar completed = $group('Admin.Action.actionType','COMPLETE','Admin.Action.stage').asSequence()\nvar stages = $('Admin.Action.stage').asSequence().trimmer().filter(function(v){\n  return -1!=completed.indexOf(v)\n  }).filter(function(v,i){\n    return i==this.indexOf(v)\n  }).asSequence()\n  \nvar joined_stages = ['first']\n\n// get the stages found in the complete list of non-repeated stages in the expected order\nvar reception_stages = []\nreception_dependent = ['ExtendedHIN','GeneralProxy','ContraIndications']\nreception_dependent.forEach(function(v){\n  if(-1!=stages.indexOf(v)) {\n    reception_stages.push(v)\n    joined_stages.push(v)\n  }\n})\n\nvar room1_stages = []\nroom1_dependent = ['HipsWaist','Weight','StandingHeight','SittingHeight',\n'BloodPressure','ECG','CarotidIntima','Spirometry']\nroom1_dependent.forEach(function(v){\n  if(-1!=stages.indexOf(v)) {\n    room1_stages.push(v)\n    joined_stages.push(v)\n  }\n})\n\nvar dxa_stages = []\ndxa_dependent = ['QuestionnaireBoneDensity','ForearmBoneDensity','DualHipBoneDensity','SpineBoneDensity','LateralBoneDensity',\n'WholeBodyBoneDensity','Frax']\ndxa_dependent.forEach(function(v){\n  if(-1!=stages.indexOf(v)) {\n    dxa_stages.push(v)\n    joined_stages.push(v)\n  }\n})\n\nvar room2_stages = []\nroom2_dependent = ['EventPMT','Hearing','CDTT','HearingQuestionnaire','StroopFAS','CognitiveTest','SocialNetwork']\nroom2_dependent.forEach(function(v){\n  if(-1!=stages.indexOf(v)) {\n    room2_stages.push(v)\n    joined_stages.push(v)\n  }\n})\n\nvar hallway_stages = []\nhallway_dependent = ['4mWalk','TUG','StandingBalance','ChairRise']\nhallway_dependent.forEach(function(v){\n  if(-1!=stages.indexOf(v)) {\n    hallway_stages.push(v)\n    joined_stages.push(v)\n  }\n})\n\nvar room3_stages = []\nvar room3_dependent = ['VisionAcuity','RetinalScanRight','GeneralHealth','RetinalScanLeft','Tonometer','GripStrength']\nroom3_dependent.forEach(function(v){\n  if(-1!=stages.indexOf(v)) {\n    room3_stages.push(v)\n    joined_stages.push(v)\n  }\n})\n\nvar room4_stages = []\nroom4_dependent = ['TimeBasedProspectiveMemoryTask','DiseaseSymptoms','OSIPV','Blood']\nroom4_dependent.forEach(function(v){\n  if(-1!=stages.indexOf(v)) {\n    room4_stages.push(v)\n    joined_stages.push(v)\n  }\n})\n\njoined_stages.push('last')\n\nvar group_stages = {\n  \"reception\" : reception_stages,\n  \"room1\" : room1_stages,\n  \"dxa\" : dxa_stages, \n  \"room2\" : room2_stages,\n  \"hallway\" : hallway_stages,\n  \"room3\" : room3_stages,\n  \"room4\" : room4_stages\n}\n\nvar order_counts = {\n  \"reception\" : 0,\n  \"room1\" : 0,\n  \"dxa\" : 0, \n  \"room2\" : 0,\n  \"hallway\" : 0,\n  \"room3\" : 0,\n  \"room4\" : 0\n}\n\n// map stage names to the room they belong to\nvar stage_rooms = {}\nfor( var key in group_stages ) {\n  var room_stages = group_stages[key]  \n  for(var j = 0; j<room_stages.length; j++) {    \n    stage_rooms[room_stages[j]] = key\n  } \n} \n\n// expected order of stages with prev and next stage attributes\nvar connected_stages = {}\nfor(var i = 1; i < joined_stages.length-1; i++ ) {\n  var prev = joined_stages[i-1]\n  var curr = joined_stages[i]\n  var next = joined_stages[i+1]\n  connected_stages[curr] = {'prev':prev, 'next':next}\n}\n\nstages = stages.insertAt(0,'first')\nstages = stages.push('last')\n\n// remove all stages that are not pertinent to the search\nstages = stages.filter(function(v) {\n  return -1 != joined_stages.indexOf(v.value())\n})\n\nfor( var key in connected_stages )\n{\n  var curr = key\n  var prev = connected_stages[curr]['prev']\n  var next = connected_stages[curr]['next']\n  // find the index of curr, prev, next    \n  var h = stages.indexOf(prev)\n  var i = stages.indexOf(curr)\n  var j = stages.indexOf(next)  \n  \n  // which room does this stage come from\n  var room = stage_rooms[curr]\n  \n  // if out of order, then increment the room count \n  order_counts[room] += (h != (i-1) && j != (i+1)) ? 1 : 0\n}\n\nvar str = []\nfor( var key in order_counts ) {\n  var count = order_counts[key]\n  if(0==count) {\n    var room_stages = group_stages[key]\n    var filtered_stages = stages.filter(function(v) {\n        return -1 != room_stages.indexOf(v.value())\n      }).filter(function(v,i) {\n        return i!=room_stages.indexOf(v.value())\n        }).asSequence()\n\n    count = filtered_stages.size().whenNull(0)\n  }\n  if(0<count) {\n    str.push('\"'+key+'\":'+count)\n  }\n}\n\nvar res = null\nif(0<str.length) {\n  res = newValue('{'+str.join(',')+'}','text')\n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""}]}}