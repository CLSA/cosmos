{"from": ["clsa-dcs-f3.Participants","clsa-dcs-f3.Spirometry"],"name": "QC_F3_spirometry","datasourceName": "cosmos_dcs","Magma.VariableListViewDto.view": {"variables": [{"name": "technician","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "$('clsa-dcs-f3.Spirometry:InstrumentRun.user').whenNull(\n  $group('Admin.Action.stage','Spirometry','Admin.Action.user').asSequence().last()).lowerCase()"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "contraindicated","entityType": "Participant","valueType": "boolean","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "$group('clsa-dcs-f3.Participants:Admin.StageInstance.stage','Spirometry',\n'Admin.StageInstance.lastState').any('Contraindicated','NotApplicable')"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "comment","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "// this script compounds repeated comments by using lowercase comment strings as array keys\n//\nvar stage = 'Spirometry'\nvar c_seq = $group('Admin.Action.stage',stage,'Admin.Action.comment').asSequence()\nvar e_seq = $group('Admin.Action.stage',stage,'Admin.Action.eventReason').asSequence()\nvar res = null\nif(c_seq.size().eq(e_seq.size()).value())\n{\n  var c_str = []  // string array of comments\n  var e_str = []  // string array of event reasons\n\n  for(var i = 0; i < c_seq.size(); i++) {\n    var c = c_seq.valueAt(i).value()\n    if(null == c) continue\n    c = c.replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,\"\")\n    var e = e_seq.valueAt(i).value()\n    if(0 < c.length) {\n      c_str.push(c)\n      if(null != e && 0 < e.length) {\n        e = e.slice(14)\n      } else {\n        e = 'SeeComment'\n      }\n      e_str.push(e)\n    }\n  }\n\n  if(0 < c_str.length) {\n    var arr = []  // array of event reasons\n    var key_orig = []  // array of lower cased comments as unique keys\n    for(var i = 0; i < c_str.length; i++) {\n      var key = c_str[i]\n      var key_lower = key.toLowerCase()\n      // retain the first encountered instance of the comment\n      //\n      if(undefined === key_orig[key_lower])\n        key_orig[key_lower] = key\n\n      if(undefined === arr[e_str[i]])\n        arr[e_str[i]] = []\n\n      if(-1==arr[e_str[i]].indexOf(key_orig[key_lower]))\n        arr[e_str[i]].push(key_orig[key_lower])\n    }\n\n    // loop over the final array of event reasons and their sets of comments\n    //\n    var str = '{'\n    for(var key in arr) {\n      str += '\"' + key + '\":['\n      var t = []\n      for(var i = 0; i < arr[key].length; i++) {\n        t.push('\"' + arr[key][i] + '\"')\n      }\n      str += t.join(',') + '],'\n    }\n\n    res = newValue(str.substring(0,str.length-1)+'}','text')\n  }\n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "duration","entityType": "Participant","valueType": "integer","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var stage = 'Spirometry'\nvar res = newValue(0,'integer')\nvar r = $group('Admin.Action.stage',stage,'Admin.Action.dateTime').asSequence()\nfor(var k=0; k<r.size();k+=2) {      \n  if(r.valueAt(k+1).format('yyyyMMdd').eq(r.valueAt(k).format('yyyyMMdd')).value()) {\n    res = res.plus(r.valueAt(k+1).time().minus(r.valueAt(k).time()).div(1000).whenNull(0))\n  }\n}  \nif(res.le(0).value()) {\n res = $group('Admin.StageInstance.stage',stage,'Admin.StageInstance.duration').asSequence().sum().whenNull(0)\n}\nres.gt(0).value()?res:null"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "missing","entityType": "Participant","valueType": "boolean","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "$this('contraindicated').not().and(\n  $this('skip').isNull(),\n  $this('duration').isNull(),\n  $this('grade').isNull().or($this('file_complete').eq(0)))"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "file_size","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var res = null\nvar list = ['flow','volume','report']\n\nvar f = []\nvar flow = $('Measure.RES_FLOW_VALUES').trimmer()\nfor(var i=0; i<flow.size(); i++) {\n  f.push(flow.valueAt(i).length())\n}\n\nvar v = []\nvar vol = $('Measure.RES_VOLUME_VALUES').trimmer()\nfor(var i=0; i<vol.size(); i++) {\n  v.push(vol.valueAt(i).length())\n}\n\nvar sz = newSequence([\n  (0<f.length ? newSequence(f).avg() : null),\n  (0<v.length ? newSequence(v).avg() : null),\n  $('Measure.RES_REPORT').asSequence().last().length()\n  ],'integer')\n \nvar str = []\nfor(var i = 0; i < list.length; i++) {\n  var v = sz.valueAt(i)\n  if(v.isNull().value()) continue\n  str.push('\"' + list[i] + '\":' + v.value())\n}\n\nif(0<str.length) {\n  res = newValue('{'+str.join(',')+'}','text')\n}\n\nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "file_complete","entityType": "Participant","valueType": "decimal","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var sz = newSequence([\n  $('Measure.RES_FLOW_VALUES').trimmer().size(),\n  $('Measure.RES_VOLUME_VALUES').trimmer().size(),\n  $('Measure.RES_REPORT').asSequence().trimmer().size(),\n  ],'integer')\nsz.trimmer().size().div(sz.size()).multiply(100).whenNull(0)"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "skip","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var stage = 'Spirometry'\nvar action = $group('clsa-dcs-f3.Participants:Admin.Action.stage',stage,'Admin.Action.actionType').asSequence()\nvar res = $group('clsa-dcs-f3.Participants:Admin.Action.stage',stage,'Admin.Action.eventReason').asSequence().filter(function(v,i){\n  return i == action.indexOf('SKIP')\n  }).last()\nif(res.isNull().not().value()) {\n  res = newValue(res.value().slice(14),'text')  \n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "grade","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "$('clsa-dcs-f3.Spirometry:OUTPUT_QUALITY_GRADE')"}],"unit": "","index": 0,"referencedEntityType": ""}]}}