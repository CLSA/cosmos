<org.obiba.magma.views.View>
  <name>QC_F3_carotid_intima</name>
  <from class="org.obiba.magma.views.JoinTable">
    <list>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-f3.Participants</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-images-f3.CarotidIntima</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>cosmos_dcs.QC_F3_meta</reference>
      </table>
    </list>
  </from>
  <select class="org.obiba.magma.views.support.NoneClause"/>
  <where class="org.obiba.magma.views.support.AllClause"/>
  <variables class="org.obiba.magma.js.views.VariablesClause">
    <variables class="linked-hash-set">
      <variable name="technician" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;clsa-dcs-images-f3.CarotidIntima:InstrumentRun.user&apos;).whenNull(
  $group(&apos;Admin.Action.stage&apos;,&apos;CarotidIntima&apos;,&apos;Admin.Action.user&apos;).asSequence().last()).lowerCase()</attribute>
        </attributes>
      </variable>
      <variable name="contraindicated" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$group(&apos;clsa-dcs-f3.Participants:Admin.StageInstance.stage&apos;,&apos;CarotidIntima&apos;,
&apos;Admin.StageInstance.lastState&apos;).any(&apos;Contraindicated&apos;,&apos;NotApplicable&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="missing" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;contraindicated&apos;).not().and(
  $this(&apos;skip&apos;).isNull(),
  $this(&apos;file_complete&apos;).isNull())</attribute>
        </attributes>
      </variable>
      <variable name="comment" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
//
var stage = &apos;CarotidIntima&apos;
var c_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.comment&apos;).asSequence()
var e_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence()
var res = null
if(c_seq.size().eq(e_seq.size()).value())
{
  var c_str = []  // string array of comments
  var e_str = []  // string array of event reasons

  for(var i = 0; i &lt; c_seq.size(); i++) {
    var c = c_seq.valueAt(i).value()
    if(null == c) continue
    c = c.replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var e = e_seq.valueAt(i).value()
    if(0 &lt; c.length) {
      c_str.push(c)
      if(null != e &amp;&amp; 0 &lt; e.length) {
        e = e.slice(14)
      } else {
        e = &apos;SeeComment&apos;
      }
      e_str.push(e)
    }
  }

  if(0 &lt; c_str.length) {
    var arr = []  // array of event reasons
    var key_orig = []  // array of lower cased comments as unique keys
    for(var i = 0; i &lt; c_str.length; i++) {
      var key = c_str[i]
      var key_lower = key.toLowerCase()
      // retain the first encountered instance of the comment
      //
      if(undefined === key_orig[key_lower])
        key_orig[key_lower] = key

      if(undefined === arr[e_str[i]])
        arr[e_str[i]] = []

      if(-1==arr[e_str[i]].indexOf(key_orig[key_lower]))
        arr[e_str[i]].push(key_orig[key_lower])
    }

    // loop over the final array of event reasons and their sets of comments
    //
    var str = &apos;{&apos;
    for(var key in arr) {
      str += &apos;&quot;&apos; + key + &apos;&quot;:[&apos;
      var t = []
      for(var i = 0; i &lt; arr[key].length; i++) {
        t.push(&apos;&quot;&apos; + arr[key][i] + &apos;&quot;&apos;)
      }
      str += t.join(&apos;,&apos;) + &apos;],&apos;
    }

    res = newValue(str.substring(0,str.length-1)+&apos;}&apos;,&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="duration" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var res = $(&apos;cosmos_dcs.QC_F3_meta:group_duration_carotid&apos;).whenNull(0)
if(res.le(0).value()) {
 res = $group(&apos;Admin.StageInstance.stage&apos;,&apos;CarotidIntima&apos;,&apos;Admin.StageInstance.duration&apos;).asSequence().sum().whenNull(0)
}
res.gt(0).value()?res:null</attribute>
        </attributes>
      </variable>
      <variable name="file_size" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var res = null
var list = [
  &apos;cineloop_1_left&apos;,
  &apos;cineloop_1_right&apos;,
  &apos;still_1_left&apos;,
  &apos;still_1_right&apos;,
  &apos;still_2_left&apos;,
  &apos;still_2_right&apos;,
  &apos;still_3_left&apos;,
  &apos;still_3_right&apos;,
  &apos;sr_1_left&apos;,
  &apos;sr_1_right&apos;
]
var str = []
for(var i = 0; i &lt; list.length; i++) {
  var v = $this(&apos;file_meta&apos;).valueAt(i)
  if(v.isNull().value()) continue
  str.push(&apos;&quot;&apos; + list[i] + &apos;&quot;:&apos; + v.value())
}
if(0&lt;str.length) {
  res = newValue(&apos;{&apos;+str.join(&apos;,&apos;)+&apos;}&apos;,&apos;text&apos;)
}
res</attribute>
        </attributes>
      </variable>
      <variable name="file_complete" valueType="decimal" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;file_meta&apos;).trimmer().size().div(10).multiply(100).whenNull(0)</attribute>
        </attributes>
      </variable>
      <variable name="skip" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;CarotidIntima&apos;
var action = $group(&apos;clsa-dcs-f3.Participants:Admin.Action.stage&apos;,stage,&apos;Admin.Action.actionType&apos;).asSequence()
var res = $group(&apos;clsa-dcs-f3.Participants:Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence().filter(function(v,i){
  return i == action.indexOf(&apos;SKIP&apos;)
  }).last()
if(res.isNull().not().value()) {
  res = newValue(res.value().slice(14),&apos;text&apos;)  
}
res</attribute>
        </attributes>
      </variable>
      <variable name="file_meta" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">var arr=[]
var list=[&apos;CINELOOP_1&apos;,&apos;STILL_IMAGE_1&apos;,&apos;STILL_IMAGE_2&apos;,&apos;STILL_IMAGE_3&apos;,&apos;SR_1&apos;]
var sides=[&apos;Left&apos;,&apos;Right&apos;]
list.forEach(function(v){
  sides.forEach(function(s){
    arr.push($group(&apos;Measure.SIDE&apos;,s,&apos;Measure.&apos;+v).asSequence().trimmer().last().length())
  })
})
newSequence(arr,&apos;integer&apos;)</attribute>
        </attributes>
      </variable>
    </variables>
  </variables>
  <created valueType="datetime">2021-11-11T10:23:58.404-05</created>
  <updated valueType="datetime">2021-11-11T10:23:58.404-05</updated>
</org.obiba.magma.views.View>