<org.obiba.magma.views.View>
  <name>QC_BL_comment</name>
  <from class="org.obiba.magma.views.JoinTable">
    <list>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.Participants</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.Spirometry</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.BloodPressure</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.CognitiveTest</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.GripStrength</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.Tonometer</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.ECG</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.Hearing</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-images.CarotidIntima</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-images.DualHipBoneDensity</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-images.LateralBoneDensity</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-images.RetinalScan</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.Weight</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.StandingHeight</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.TUG</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-images.WholeBodyBoneDensity</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-images.ForearmBoneDensity</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.HipsWaist</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.4mWalk</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.ChairRise</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.NeuropsychologicalBattery</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.VisionAcuity</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>Quality_Control.QC_BL</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.Consent</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.EventPMT</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.ContraIndications</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.DiseaseSymptoms</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.ConclusionQuestionnaire</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.TimeBasedProspectiveMemoryTask</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.HearingQuestionnaire</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.QuestionnaireBoneDensity</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.FunctionalStatus</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.Urine</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs.NeuropsychologicalBatteryScoring</reference>
      </table>
    </list>
  </from>
  <select class="org.obiba.magma.views.support.NoneClause"/>
  <where class="org.obiba.magma.views.support.AllClause"/>
  <variables class="org.obiba.magma.js.views.VariablesClause">
    <variables class="linked-hash-set">
      <variable name="stage_comment_spirometry" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;Spirometry&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;Spirometry&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;Spirometry&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.Spirometry:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_grip_strength" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;GripStrength&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;GripStrength&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;GripStrength&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.GripStrength:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_blood_pressure" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;BloodPressure&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;BloodPressure&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;BloodPressure&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.BloodPressure:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_ecg" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;ECG&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;ECG&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;ECG&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.ECG:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_cognitive_test" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;CognitiveTest&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;CognitiveTest&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;CognitiveTest&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.CognitiveTest:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_hearing" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;Hearing&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;Hearing&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;Hearing&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.Hearing:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_tonometer" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;Tonometer&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;Tonometer&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;Tonometer&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.Tonometer:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_weight" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;Weight&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;Weight&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;Weight&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.Weight:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_standing_height" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;StandingHeight&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;StandingHeight&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;StandingHeight&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.StandingHeight:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_lateral_bone_density" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;LateralBoneDensity&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;LateralBoneDensity&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;LateralBoneDensity&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.LateralBoneDensity:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_forearm_bone_density" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;ForearmBoneDensity&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;ForearmBoneDensity&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;ForearmBoneDensity&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.ForearmBoneDensity:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_dual_hip_bone_density" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;DualHipBoneDensity&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;DualHipBoneDensity&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;DualHipBoneDensity&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.DualHipBoneDensity:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_whole_body_bone_density" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;WholeBodyBoneDensity&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;WholeBodyBoneDensity&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;WholeBodyBoneDensity&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.WholeBodyBoneDensity:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_tug" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;TUG&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;TUG&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;TUG&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_hips_waist" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;HipsWaist&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;HipsWaist&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;HipsWaist&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.HipsWaist:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_four_metre_walk" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;4mWalk&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;4mWalk&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;4mWalk&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_carotid_intima" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;CarotidIntima&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;CarotidIntima&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;CarotidIntima&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.CarotidIntima:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_chair_rise" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;ChairRise&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;ChairRise&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;ChairRise&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_neuropsychological_battery" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;NeuropsychologicalBattery&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;NeuropsychologicalBattery&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;NeuropsychologicalBattery&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_sitting_height" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;SittingHeight&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;SittingHeight&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;SittingHeight&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.SittingHeight:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_vision_acuity" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;VisionAcuity&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;VisionAcuity&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;VisionAcuity&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_grip_strength" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_grip_strength&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_grip_strength</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_dual_hip_bone_density" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_dual_hip_bone_density&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_dual_hip_bone_density</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_tug" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_tug&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_tug</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_sitting_height" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_sitting_height&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_sitting_height</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_blood_pressure" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_blood_pressure&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_blood_pressure</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_ecg" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_ecg&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_ecg</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_hearing" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_hearing&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_hearing</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_retinal_scan" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_retinal_scan&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_retinal_scan</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_standing_height" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_standing_height&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_standing_height</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_chair_rise" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_chair_rise&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_chair_rise</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_hips_waist" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_hips_waist&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_hips_waist</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_neuropsychological_battery" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_neuropsychological_battery&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_neuropsychological_battery</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_four_metre_walk" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_four_metre_walk&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_four_metre_walk</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_cognitive_test" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_cognitive_test&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_cognitive_test</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_tonometer" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_tonometer&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_tonometer</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_weight" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_weight&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_weight</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_lateral_bone_density" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_lateral_bone_density&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_lateral_bone_density</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_whole_body_bone_density" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_whole_body_bone_density&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_whole_body_bone_density</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_carotid_intima" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_carotid_intima&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_carotid_intima</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_spirometry" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="stage" valueType="text">Spirometry</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_spirometry</attribute>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_spirometry&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_forearm_bone_density" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_forearm_bone_density&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_forearm_bone_density</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_standing_balance" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_standing_balance&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_standing_balance</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_vision_acuity" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_vision_acuity&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_vision_acuity</attribute>
        </attributes>
      </variable>
      <variable name="interview_site" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:interview_site&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/interview_site</attribute>
        </attributes>
      </variable>
      <variable name="interview_start_date" valueType="date" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/interview_start_date</attribute>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:interview_start_date&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="interview_barcode" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="identifier" valueType="text">true</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/interview_barcode</attribute>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:interview_barcode&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_standing_balance" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;StandingBalance&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;StandingBalance&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;StandingBalance&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_retinal_scan" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;RetinalScan&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;RetinalScan&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;RetinalScan&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
var v4=$(&apos;clsa-dcs.RetinalScan:InstrumentRun.skipComment&apos;)
if(v4.isNull().not().value()) {
  c_str.push(v4.value())
  a_str.push(&apos;SKIP&apos;)
  e_str.push(&apos;SeeComment&apos;)
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_consent" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;Consent&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;Consent&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;Consent&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_contraindications" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;ContraIndications&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;ContraIndications&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;ContraIndications&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_event_pmt" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;EventPMT&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;EventPMT&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;EventPMT&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_functional_status" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;FunctionalStatus&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;FunctionalStatus&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;FunctionalStatus&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_functional_status" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_functional_status&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_consent" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_consent&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_contraindications" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_contraindications&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_event_pmt" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_event_pmt&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_disease_symptoms" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_disease_symptoms&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_time_based_pmt" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_time_based_pmt&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_bone_density_questionnaire" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_bone_density_questionnaire&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_hearing_questionnaire" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_hearing_questionnaire&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_conclusion_questionnaire" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_conclusion_questionnaire&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_time_based_pmt" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;TimeBasedProspectiveMemoryTask&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;TimeBasedProspectiveMemoryTask&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;TimeBasedProspectiveMemoryTask&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_hearing_questionnaire" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;HearingQuestionnaire&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;HearingQuestionnaire&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;HearingQuestionnaire&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_conclusion_questionnaire" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;ConclusionQuestionnaire&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;ConclusionQuestionnaire&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;ConclusionQuestionnaire&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_bone_density_questionnaire" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;QuestionnaireBoneDensity&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;QuestionnaireBoneDensity&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;QuestionnaireBoneDensity&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_disease_symptoms" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;DiseaseSymptoms&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;DiseaseSymptoms&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;DiseaseSymptoms&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_urine" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_urine&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_urine" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;Urine&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;Urine&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;Urine&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_blood" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_blood&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_blood" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var stage=$(&apos;Quality_Control.QC_BL:group_blood&apos;)
var res=null
if(stage.isNull().not().value()) {
  stage=stage.value()
  var v1=$group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.comment&apos;).asSequence()
  var v2=$group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.actionType&apos;).asSequence()
  var v3=$group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence()

  var c_str=[]  // string array of comments
  var e_str=[]  // string array of events
  var a_str=[]  // string array of actions
  for(var i=0; i&lt;v1.size(); i++) {
    if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
    c_str.push(v1.valueAt(i).value())
    a_str.push(v2.valueAt(i).value())
    e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
  }
  if(0&lt;c_str.length) {
    var arr=[]
    var key_orig=[]
    for(var i=0;i&lt;c_str.length;i++) {
      var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
      var key_lower = key.toLowerCase()
      // retain the first encountered instance of the comment
      if(undefined===key_orig[key_lower])
        key_orig[key_lower]=key
      if(0==key_orig[key_lower].length) continue
      // combine the action and the event
      var str=a_str[i]+&apos;:&apos;+e_str[i]
      if(undefined===arr[key_lower])
        arr[key_lower]=[]
      if(-1===arr[key_lower].indexOf(str))
        arr[key_lower].push(str)
    }

    var str=[]
    for(var key in arr) {
      // compound repeated events
      var subarr=[]
      for(var i=0;i&lt;arr[key].length;i++) {
        var t=arr[key][i].split(&apos;:&apos;)
        var t_key=t[1]
        if(undefined===subarr[t_key])
          subarr[t_key]=[]
        if(-1===subarr[t_key].indexOf(t[0]))
          subarr[t_key].push(t[0])
      }
      var substr=[]
      for(var t_key in subarr) {
        var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
        if(1&lt;subarr[t_key].length) {
          substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
        } else {
          substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
        }
      }
      str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
    }

    if(1&lt;str.length) {
      res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
    } else if(1==str.length) {
      res=newValue(str[0],&apos;text&apos;)
    }
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_neuropsychological_battery_scoring" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_neuropsychological_battery_scoring&apos;)</attribute>
          <attribute name="derivedFrom" namespace="opal" valueType="text">/datasource/Quality_Control/table/QC_BL/variable/stage_technician_neuropsychological_battery_scoring</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_neuropsychological_battery_scoring" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
// and further compounds events within actions
//
var v1=$group(&apos;Admin.Action.stage&apos;,&apos;NeuropsychologicalBatteryScoring&apos;,&apos;Admin.Action.comment&apos;).asSequence()
var v2=$group(&apos;Admin.Action.stage&apos;,&apos;NeuropsychologicalBatteryScoring&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var v3=$group(&apos;Admin.Action.stage&apos;,&apos;NeuropsychologicalBatteryScoring&apos;,&apos;Admin.Action.eventReason&apos;).asSequence()
var res=null
var c_str=[]  // string array of comments
var e_str=[]  // string array of events
var a_str=[]  // string array of actions
for(var i=0; i&lt;v1.size(); i++) {
  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull(),v2.valueAt(i).matches(/EXECUTE/)).value()) continue
  c_str.push(v1.valueAt(i).value())
  a_str.push(v2.valueAt(i).value())
  e_str.push((v3.valueAt(i).isNull().value()?&apos;SeeComment&apos;:v3.valueAt(i).value().slice(14)))
}
if(0&lt;c_str.length) {
  var arr=[]
  var key_orig=[]
  for(var i=0;i&lt;c_str.length;i++) {
    var key=c_str[i].replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var key_lower = key.toLowerCase()
    // retain the first encountered instance of the comment
    if(undefined===key_orig[key_lower])
      key_orig[key_lower]=key
    if(0==key_orig[key_lower].length) continue
    // combine the action and the event
    var str=a_str[i]+&apos;:&apos;+e_str[i]
    if(undefined===arr[key_lower])
      arr[key_lower]=[]
    if(-1===arr[key_lower].indexOf(str))
      arr[key_lower].push(str)
  }

  var str=[]
  for(var key in arr) {
    // compound repeated events
    var subarr=[]
    for(var i=0;i&lt;arr[key].length;i++) {
      var t=arr[key][i].split(&apos;:&apos;)
      var t_key=t[1]
      if(undefined===subarr[t_key])
        subarr[t_key]=[]
      if(-1===subarr[t_key].indexOf(t[0]))
        subarr[t_key].push(t[0])
    }
    var substr=[]
    for(var t_key in subarr) {
      var t_str=&apos;SeeComment&apos;==t_key?&apos;]&apos;:&apos;]&apos;+t_key
      if(1&lt;subarr[t_key].length) {
        substr.push(&apos;[&apos;+subarr[t_key].join(&apos;/&apos;)+t_str);
      } else {
        substr.push(&apos;[&apos;+subarr[t_key][0]+t_str);
      }
    }
    str.push(&apos;[&apos;+((1&lt;substr.length)?substr.join(&apos;/&apos;):substr[0])+&apos;]:&apos;+key_orig[key])
  }

  if(1&lt;str.length) {
    res=newValue(str.join(&apos;,&apos;),&apos;text&apos;)
  } else if(1==str.length) {
    res=newValue(str[0],&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="stage_technician_cognition_recording" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;stage_technician_neuropsychological_battery&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_cognition_recording" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;stage_comment_neuropsychological_battery&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="stage_comment_dexa" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0"/>
      <variable name="stage_technician_dexa" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;Quality_Control.QC_BL:stage_technician_dexa&apos;)</attribute>
        </attributes>
      </variable>
    </variables>
  </variables>
  <created valueType="datetime">2018-05-28T09:56:58.265-04</created>
  <updated valueType="datetime">2019-01-17T16:46:58.528-05</updated>
</org.obiba.magma.views.View>
