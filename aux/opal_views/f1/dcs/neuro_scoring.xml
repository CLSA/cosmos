<org.obiba.magma.views.View>
  <name>QC_F1_neuro_scoring</name>
  <from class="org.obiba.magma.views.JoinTable">
    <list>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-f1.Participants</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-f1.NeuropsychologicalBatteryScoring</reference>
      </table>
    </list>
  </from>
  <select class="org.obiba.magma.views.support.NoneClause"/>
  <where class="org.obiba.magma.js.views.JavascriptClause">
    <scriptName>customScript</scriptName>
    <script>$(&apos;clsa-dcs-f1.Participants:DCSatHOME&apos;).not().whenNull(true).and($(&apos;clsa-dcs-f1.Participants:DCS_PHONE&apos;).not().whenNull(true))</script>
  </where>
  <variables class="org.obiba.magma.js.views.VariablesClause">
    <variables class="linked-hash-set">
      <variable name="technician" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;clsa-dcs-f1.NeuropsychologicalBatteryScoring:QuestionnaireRun.user&apos;).whenNull(
  $group(&apos;Admin.Action.stage&apos;,&apos;NeuropsychologicalBatteryScoring&apos;,&apos;Admin.Action.user&apos;).asSequence().last()).lowerCase()</attribute>
        </attributes>
      </variable>
      <variable name="contraindicated" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$group(&apos;clsa-dcs-f1.Participants:Admin.StageInstance.stage&apos;,&apos;NeuropsychologicalBatteryScoring&apos;,
&apos;Admin.StageInstance.lastState&apos;).any(&apos;Contraindicated&apos;,&apos;NotApplicable&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="comment" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
//
var stage = &apos;NeuropsychologicalBatteryScoring&apos;
var c_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.comment&apos;).asSequence()
var e_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence()
var res = null
if(c_seq.size().eq(e_seq.size()).value())
{
  var c_str = []  // string array of comments
  var e_str = []  // string array of event reasons

  for(var i = 0; i &lt; c_seq.size(); i++) {
    var c = c_seq.valueAt(i).value()
    if(null == c) continue
    c = c.replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var e = e_seq.valueAt(i).value()
    if(0 &lt; c.length) {
      c_str.push(c)
      if(null != e &amp;&amp; 0 &lt; e.length) {
        e = e.slice(14)
      } else {
        e = &apos;SeeComment&apos;
      }
      e_str.push(e)
    }
  }

  if(0 &lt; c_str.length) {
    var arr = []  // array of event reasons
    var key_orig = []  // array of lower cased comments as unique keys
    for(var i = 0; i &lt; c_str.length; i++) {
      var key = c_str[i]
      var key_lower = key.toLowerCase()
      // retain the first encountered instance of the comment
      //
      if(undefined === key_orig[key_lower])
        key_orig[key_lower] = key

      if(undefined === arr[e_str[i]])
        arr[e_str[i]] = []

      if(-1==arr[e_str[i]].indexOf(key_orig[key_lower]))
        arr[e_str[i]].push(key_orig[key_lower])
    }

    // loop over the final array of event reasons and their sets of comments
    //
    var str = &apos;{&apos;
    for(var key in arr) {
      str += &apos;&quot;&apos; + key + &apos;&quot;:[&apos;
      var t = []
      for(var i = 0; i &lt; arr[key].length; i++) {
        t.push(&apos;&quot;&apos; + arr[key][i] + &apos;&quot;&apos;)
      }
      str += t.join(&apos;,&apos;) + &apos;],&apos;
    }

    res = newValue(str.substring(0,str.length-1)+&apos;}&apos;,&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="qnaire_complete" valueType="decimal" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;clsa-dcs-f1.NeuropsychologicalBatteryScoring:&apos;
var list=[
&apos;STP_DOTERRR_COF1.G_1_1&apos;,
&apos;STP_DOTERRR_COF1.Y_1_2&apos;,
&apos;STP_DOTERRR_COF1.B_1_3&apos;,
&apos;STP_DOTERRR_COF1.B_1_4&apos;,
&apos;STP_DOTERRR_COF1.R_1_5&apos;,
&apos;STP_DOTERRR_COF1.Y_1_6&apos;,
&apos;STP_DOTERRR_COF1.B_2_1&apos;,
&apos;STP_DOTERRR_COF1.R_2_2&apos;,
&apos;STP_DOTERRR_COF1.G_2_3&apos;,
&apos;STP_DOTERRR_COF1.Y_2_4&apos;,
&apos;STP_DOTERRR_COF1.G_2_5&apos;,
&apos;STP_DOTERRR_COF1.G_2_6&apos;,
&apos;STP_DOTERRR_COF1.Y_3_1&apos;,
&apos;STP_DOTERRR_COF1.G_3_2&apos;,
&apos;STP_DOTERRR_COF1.Y_3_3&apos;,
&apos;STP_DOTERRR_COF1.R_3_4&apos;,
&apos;STP_DOTERRR_COF1.B_3_5&apos;,
&apos;STP_DOTERRR_COF1.B_3_6&apos;,
&apos;STP_DOTERRR_COF1.R_4_1&apos;,
&apos;STP_DOTERRR_COF1.B_4_2&apos;,
&apos;STP_DOTERRR_COF1.R_4_3&apos;,
&apos;STP_DOTERRR_COF1.G_4_4&apos;,
&apos;STP_DOTERRR_COF1.Y_4_5&apos;,
&apos;STP_DOTERRR_COF1.R_4_6&apos;,
&apos;STP_WORERRR_COF1.G_1_1&apos;,
&apos;STP_WORERRR_COF1.Y_1_2&apos;,
&apos;STP_WORERRR_COF1.B_1_3&apos;,
&apos;STP_WORERRR_COF1.B_1_4&apos;,
&apos;STP_WORERRR_COF1.R_1_5&apos;,
&apos;STP_WORERRR_COF1.Y_1_6&apos;,
&apos;STP_WORERRR_COF1.B_2_1&apos;,
&apos;STP_WORERRR_COF1.R_2_2&apos;,
&apos;STP_WORERRR_COF1.G_2_3&apos;,
&apos;STP_WORERRR_COF1.Y_2_4&apos;,
&apos;STP_WORERRR_COF1.G_2_5&apos;,
&apos;STP_WORERRR_COF1.G_2_6&apos;,
&apos;STP_WORERRR_COF1.Y_3_1&apos;,
&apos;STP_WORERRR_COF1.G_3_2&apos;,
&apos;STP_WORERRR_COF1.Y_3_3&apos;,
&apos;STP_WORERRR_COF1.R_3_4&apos;,
&apos;STP_WORERRR_COF1.B_3_5&apos;,
&apos;STP_WORERRR_COF1.B_3_6&apos;,
&apos;STP_WORERRR_COF1.R_4_1&apos;,
&apos;STP_WORERRR_COF1.B_4_2&apos;,
&apos;STP_WORERRR_COF1.R_4_3&apos;,
&apos;STP_WORERRR_COF1.G_4_4&apos;,
&apos;STP_WORERRR_COF1.Y_4_5&apos;,
&apos;STP_WORERRR_COF1.R_4_6&apos;,
&apos;STP_COLERRR_COF1.G_1_1&apos;,
&apos;STP_COLERRR_COF1.Y_1_2&apos;,
&apos;STP_COLERRR_COF1.B_1_3&apos;,
&apos;STP_COLERRR_COF1.B_1_4&apos;,
&apos;STP_COLERRR_COF1.R_1_5&apos;,
&apos;STP_COLERRR_COF1.Y_1_6&apos;,
&apos;STP_COLERRR_COF1.B_2_1&apos;,
&apos;STP_COLERRR_COF1.R_2_2&apos;,
&apos;STP_COLERRR_COF1.G_2_3&apos;,
&apos;STP_COLERRR_COF1.Y_2_4&apos;,
&apos;STP_COLERRR_COF1.G_2_5&apos;,
&apos;STP_COLERRR_COF1.G_2_6&apos;,
&apos;STP_COLERRR_COF1.Y_3_1&apos;,
&apos;STP_COLERRR_COF1.G_3_2&apos;,
&apos;STP_COLERRR_COF1.Y_3_3&apos;,
&apos;STP_COLERRR_COF1.R_3_4&apos;,
&apos;STP_COLERRR_COF1.B_3_5&apos;,
&apos;STP_COLERRR_COF1.B_3_6&apos;,
&apos;STP_COLERRR_COF1.R_4_1&apos;,
&apos;STP_COLERRR_COF1.B_4_2&apos;,
&apos;STP_COLERRR_COF1.R_4_3&apos;,
&apos;STP_COLERRR_COF1.G_4_4&apos;,
&apos;STP_COLERRR_COF1.Y_4_5&apos;,
&apos;STP_COLERRR_COF1.R_4_6&apos;
]

var arr = []
for(var i=0; i&lt;list.length; i++) {
  arr.push($(stage + list[i]))
}
newSequence(arr).trimmer().size().multiply(100).div(arr.length)</attribute>
        </attributes>
      </variable>
      <variable name="missing" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;contraindicated&apos;).not().and(
  $this(&apos;skip_value&apos;).trimmer().isNull(),
  $this(&apos;recording_quality&apos;).isNull(),
  $this(&apos;duration&apos;).isNull())</attribute>
        </attributes>
      </variable>
      <variable name="duration" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;NeuropsychologicalBatteryScoring&apos;
var res = null
var post = $(&apos;clsa-dcs-f1.&apos;+stage+&apos;:QuestionnaireRun.timeEnd&apos;)
var pre = $(&apos;clsa-dcs-f1.&apos;+stage+&apos;:QuestionnaireRun.timeStart&apos;)
if(pre.before(post).value()) {
    res = post.time().minus(pre.time()).div(1000)
}
if(null === res) {
  res = $group(
    &apos;clsa-dcs-f1.Participants:Admin.StageInstance.stage&apos;,
    stage,
    &apos;Admin.StageInstance.duration&apos;).asSequence().sum()
}
if(res.eq(0).value()) res = null
res</attribute>
        </attributes>
      </variable>
      <variable name="recording_quality" valueType="decimal" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">newSequence([
  $(&apos;clsa-dcs-f1.NeuropsychologicalBatteryScoring:STP_DOTQLTY_COF1&apos;),
  $(&apos;clsa-dcs-f1.NeuropsychologicalBatteryScoring:STP_WORQLTY_COF1&apos;),
  $(&apos;clsa-dcs-f1.NeuropsychologicalBatteryScoring:STP_COLQLTY_COF1&apos;)
  ]).filter(function(v){return v.any(&apos;YES&apos;)}).trimmer().size().div(3.0).multiply(100)</attribute>
        </attributes>
      </variable>
      <variable name="skip_name" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence([&apos;InterviewerDecision&apos;,
&apos;ParticipantDecision&apos;,
&apos;SeeComment&apos;,
&apos;TechnicalProblem&apos;],&apos;text&apos;)
					</attribute>
        </attributes>
      </variable>
      <variable name="skip_value" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;NeuropsychologicalBatteryScoring&apos;
var action = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.actionType&apos;).asSequence()
var type = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence().filter(function(v,i){
  return i == action.indexOf(&apos;SKIP&apos;)
  }).last().whenNull(&apos;&apos;).value().slice(14)
  
var arr = []
for(var i=0; i &lt; $this(&apos;skip_name&apos;).size(); i++) {
  arr.push($this(&apos;skip_name&apos;).valueAt(i).eq(type).value()?true:null)
} 
newSequence(arr,&apos;boolean&apos;)</attribute>
        </attributes>
      </variable>
    </variables>
  </variables>
  <created valueType="datetime">2019-04-11T14:25:01.561-04</created>
  <updated valueType="datetime">2019-10-21T14:52:51.961-04</updated>
</org.obiba.magma.views.View>