<org.obiba.magma.views.View>
  <name>QC_F1_deviation_aecrf</name>
  <from class="org.obiba.magma.views.JoinTable">
    <list>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-f1.Participants</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-f1.Deviation_AE_CRF</reference>
      </table>
    </list>
  </from>
  <select class="org.obiba.magma.views.support.NoneClause"/>
  <where class="org.obiba.magma.js.views.JavascriptClause">
    <scriptName>customScript</scriptName>
    <script>$(&apos;clsa-dcs-f1.Participants:DCSatHOME&apos;).not().whenNull(true).and($(&apos;clsa-dcs-f1.Participants:DCS_PHONE&apos;).not().whenNull(true))</script>
  </where>
  <variables class="org.obiba.magma.js.views.VariablesClause">
    <variables class="linked-hash-set">
      <variable name="technician" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;clsa-dcs-f1.Deviation_AE_CRF:QuestionnaireRun.user&apos;).whenNull(
  $group(&apos;Admin.Action.stage&apos;,&apos;Deviation_AE_CRF&apos;,&apos;Admin.Action.user&apos;).asSequence().last()).lowerCase()</attribute>
        </attributes>
      </variable>
      <variable name="contraindicated" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$group(&apos;clsa-dcs-f1.Participants:Admin.StageInstance.stage&apos;,&apos;Deviation_AE_CRF&apos;,
&apos;Admin.StageInstance.lastState&apos;).any(&apos;Contraindicated&apos;,&apos;NotApplicable&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="comment" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
//
var stage = &apos;Deviation_AE_CRF&apos;
var c_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.comment&apos;).asSequence()
var e_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence()
var res = null
if(c_seq.size().eq(e_seq.size()).value())
{
  var c_str = []  // string array of comments
  var e_str = []  // string array of event reasons

  for(var i = 0; i &lt; c_seq.size(); i++) {
    var c = c_seq.valueAt(i).value()
    if(null == c) continue
    c = c.replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var e = e_seq.valueAt(i).value()
    if(0 &lt; c.length) {
      c_str.push(c)
      if(null != e &amp;&amp; 0 &lt; e.length) {
        e = e.slice(14)
      } else {
        e = &apos;SeeComment&apos;
      }
      e_str.push(e)
    }
  }

  if(0 &lt; c_str.length) {
    var arr = []  // array of event reasons
    var key_orig = []  // array of lower cased comments as unique keys
    for(var i = 0; i &lt; c_str.length; i++) {
      var key = c_str[i]
      var key_lower = key.toLowerCase()
      // retain the first encountered instance of the comment
      //
      if(undefined === key_orig[key_lower])
        key_orig[key_lower] = key

      if(undefined === arr[e_str[i]])
        arr[e_str[i]] = []

      if(-1==arr[e_str[i]].indexOf(key_orig[key_lower]))
        arr[e_str[i]].push(key_orig[key_lower])
    }

    // loop over the final array of event reasons and their sets of comments
    //
    var str = &apos;{&apos;
    for(var key in arr) {
      str += &apos;&quot;&apos; + key + &apos;&quot;:[&apos;
      var t = []
      for(var i = 0; i &lt; arr[key].length; i++) {
        t.push(&apos;&quot;&apos; + arr[key][i] + &apos;&quot;&apos;)
      }
      str += t.join(&apos;,&apos;) + &apos;],&apos;
    }

    res = newValue(str.substring(0,str.length-1)+&apos;}&apos;,&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="qnaire_complete" valueType="decimal" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;Deviation_AE_CRF&apos;
var p = $(&apos;clsa-dcs-f1.&apos; + stage + &apos;:QuestionnaireMetric.missingCount&apos;).asSequence().sum()
var q = $(&apos;clsa-dcs-f1.&apos; + stage + &apos;:QuestionnaireMetric.questionCount&apos;).asSequence().sum()
q.minus(p).multiply(100).div(q)</attribute>
        </attributes>
      </variable>
      <variable name="missing" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;contraindicated&apos;).not().and(
  $this(&apos;skip_value&apos;).trimmer().isNull(),
  $this(&apos;qnaire_complete&apos;).isNull(),
  $this(&apos;ae_count&apos;).isNull(),
  $this(&apos;aefu_count&apos;).isNull(),
  $this(&apos;dev_count&apos;).isNull(),
  $this(&apos;duration&apos;).isNull())</attribute>
        </attributes>
      </variable>
      <variable name="duration_name" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence([&apos;Deviation&apos;], &apos;text&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="duration" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;Deviation_AE_CRF&apos;
var res = null
var post = $(&apos;clsa-dcs-f1.&apos;+stage+&apos;:QuestionnaireRun.timeEnd&apos;)
var pre = $(&apos;clsa-dcs-f1.&apos;+stage+&apos;:QuestionnaireRun.timeStart&apos;)
if(pre.before(post).value()) {
    res = post.time().minus(pre.time()).div(1000)
}
if(null === res) {
  res = $group(
    &apos;clsa-dcs-f1.Participants:Admin.StageInstance.stage&apos;,
    stage,
    &apos;Admin.StageInstance.duration&apos;).asSequence().sum()
}
if(res.eq(0).value()) res = null
res</attribute>
        </attributes>
      </variable>
      <variable name="duration_value" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">var res = null
if($this(&apos;duration&apos;).isNull().not().value()) {
  var stage = &apos;Deviation_AE_CRF&apos;
  var list = $this(&apos;duration_name&apos;)
  var str = []
  var section = $(&apos;clsa-dcs-f1.&apos;+stage+&apos;:QuestionnaireMetric.section&apos;).asSequence()
  var duration = $(&apos;clsa-dcs-f1.&apos;+stage+&apos;:QuestionnaireMetric.duration&apos;).asSequence()
  for(var i = 0; i &lt; list.size(); i++) {
    str.push(
      duration.filter(
        function(v, k) {
          return list.valueAt(i).eq(section.valueAt(k))
        }
      ).asSequence().filter(function(v) {
        return v.ge(0)
      }).sum()
    )
  }
  res = newSequence(str, &apos;integer&apos;) 
} else {
  var str = []
  for(var i = 0; i &lt; $this(&apos;duration_name&apos;).size(); i++) str.push(null)
  res = newSequence(str,&apos;integer&apos;)
}
res</attribute>
        </attributes>
      </variable>
      <variable name="ae_name" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence([&apos;FAINTED&apos;,
&apos;SEIZURE&apos;,
&apos;DIZZY&apos;,
&apos;VOMITED&apos;,
&apos;BLOODEX&apos;,
&apos;DISTRESS&apos;,
&apos;TRIPPED&apos;,
&apos;HEAD&apos;,
&apos;FELL&apos;,
&apos;BP220&apos;,
&apos;BP110&apos;,
&apos;OTHERAE&apos;],&apos;text&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="ae_value" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">var arr = []
for(var i=0; i &lt; $this(&apos;ae_name&apos;).size(); i++) {
  var v = $this(&apos;ae_name&apos;).valueAt(i)
  arr.push($(&apos;DAE_WHAT_COF1&apos;).any(v).value()?true:null)
}  
newSequence(arr,&apos;boolean&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="aefu_name" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence([
  &apos;SNACK&apos;,&apos;ICE&apos;,&apos;HOSPITAL&apos;,&apos;RETURN&apos;,&apos;NOTIFY&apos;,&apos;ETHICS&apos;,&apos;FOLLOW&apos;,
  &apos;RECOMDHOS&apos;,&apos;RECOMDDR&apos;,&apos;NOTNECES&apos;,&apos;OTHERAE&apos;
],&apos;text&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="aefu_value" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">var arr = []
for(var i=0; i &lt; $this(&apos;aefu_name&apos;).size(); i++) {
  var v = $this(&apos;aefu_name&apos;).valueAt(i)
  arr.push($(&apos;DAE_FLWUP_COF1&apos;).any(v).value()?true:null)
}  
newSequence(arr,&apos;boolean&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="dev_name" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence([&apos;reception&apos;,&apos;room1&apos;,&apos;dxa&apos;,&apos;room2&apos;,&apos;hallway&apos;,&apos;room3&apos;,&apos;room4&apos;],&apos;text&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="dev_value" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">// filter out repeated completed stages
//
var completed = $group(&apos;Admin.Action.actionType&apos;,&apos;COMPLETE&apos;,&apos;Admin.Action.stage&apos;).asSequence()
var stages = $(&apos;Admin.Action.stage&apos;).asSequence().trimmer().filter(function(v){
  return -1!=completed.indexOf(v)
  }).filter(function(v,i){
    return i==this.indexOf(v)
  }).asSequence()
  
var joined_stages = [&apos;first&apos;]

// get the stages found in the complete list of non-repeated stages in the expected order
var reception_stages = []
reception_dependent = [&apos;Consent&apos;,&apos;GeneralProxy&apos;,&apos;ContraIndications&apos;]
reception_dependent.forEach(function(v){
  if(-1!=stages.indexOf(v)) {
    reception_stages.push(v)
    joined_stages.push(v)
  }
})

var room1_stages = []
room1_dependent = [&apos;HipsWaist&apos;,&apos;Weight&apos;,&apos;StandingHeight&apos;,&apos;BloodPressure&apos;,&apos;ECG&apos;,&apos;CarotidIntima&apos;,&apos;Spirometry&apos;]
room1_dependent.forEach(function(v){
  if(-1!=stages.indexOf(v)) {
    room1_stages.push(v)
    joined_stages.push(v)
  }
})

var dxa_stages = []
dxa_dependent = [&apos;QuestionnaireBoneDensity&apos;,&apos;ForearmBoneDensity&apos;,&apos;DualHipBoneDensity&apos;,&apos;SpineBoneDensity&apos;,&apos;LateralBoneDensity&apos;,
&apos;WholeBodyBoneDensity&apos;,&apos;Frax&apos;]
dxa_dependent.forEach(function(v){
  if(-1!=stages.indexOf(v)) {
    dxa_stages.push(v)
    joined_stages.push(v)
  }
})

var room2_stages = []
room2_dependent = [&apos;EventPMT&apos;,&apos;Hearing&apos;,&apos;HearingQuestionnaire&apos;,&apos;NeuropsychologicalBattery&apos;,&apos;CognitiveTest&apos;]
room2_dependent.forEach(function(v){
  if(-1!=stages.indexOf(v)) {
    room2_stages.push(v)
    joined_stages.push(v)
  }
})

var hallway_stages = []
hallway_dependent = [&apos;4mWalk&apos;,&apos;TUG&apos;,&apos;StandingBalance&apos;,&apos;ChairRise&apos;]
hallway_dependent.forEach(function(v){
  if(-1!=stages.indexOf(v)) {
    hallway_stages.push(v)
    joined_stages.push(v)
  }
})

var room3_stages = []
var room3_dependent = [&apos;VisionAcuity&apos;,&apos;RetinalScanRight&apos;,&apos;GeneralHealth&apos;,&apos;RetinalScanLeft&apos;,&apos;Tonometer&apos;,&apos;GripStrength&apos;]
room3_dependent.forEach(function(v){
  if(-1!=stages.indexOf(v)) {
    room3_stages.push(v)
    joined_stages.push(v)
  }
})

var room4_stages = []
room4_dependent = [&apos;TimeBasedProspectiveMemoryTask&apos;,&apos;DiseaseSymptoms&apos;,&apos;OSEA&apos;,&apos;Blood&apos;,&apos;Blood2&apos;]
room4_dependent.forEach(function(v){
  if(-1!=stages.indexOf(v)) {
    room4_stages.push(v)
    joined_stages.push(v)
  }
})

joined_stages.push(&apos;last&apos;)

var group_stages = {
  &quot;reception&quot; : reception_stages,
  &quot;room1&quot; : room1_stages,
  &quot;dxa&quot; : dxa_stages, 
  &quot;room2&quot; : room2_stages,
  &quot;hallway&quot; : hallway_stages,
  &quot;room3&quot; : room3_stages,
  &quot;room4&quot; : room4_stages
}

var order_counts = {
  &quot;reception&quot; : 0,
  &quot;room1&quot; : 0,
  &quot;dxa&quot; : 0, 
  &quot;room2&quot; : 0,
  &quot;hallway&quot; : 0,
  &quot;room3&quot; : 0,
  &quot;room4&quot; : 0
}

// map stage names to the room they belong to
var stage_rooms = {}
for( var key in group_stages ) {
  var room_stages = group_stages[key]  
  for(var j = 0; j&lt;room_stages.length; j++) {    
    stage_rooms[room_stages[j]] = key
  } 
} 

// expected order of stages with prev and next stage attributes
var connected_stages = {}
for(var i = 1; i &lt; joined_stages.length-1; i++ ) {
  var prev = joined_stages[i-1]
  var curr = joined_stages[i]
  var next = joined_stages[i+1]
  connected_stages[curr] = {&apos;prev&apos;:prev, &apos;next&apos;:next}
}

stages = stages.insertAt(0,&apos;first&apos;)
stages = stages.push(&apos;last&apos;)

// remove all stages that are not pertinent to the search
stages = stages.filter(function(v) {
  return -1 != joined_stages.indexOf(v.value())
})

for( var key in connected_stages )
{
  var curr = key
  var prev = connected_stages[curr][&apos;prev&apos;]
  var next = connected_stages[curr][&apos;next&apos;]
  // find the index of curr, prev, next    
  var h = stages.indexOf(prev)
  var i = stages.indexOf(curr)
  var j = stages.indexOf(next)  
  
  // which room does this stage come from
  var room = stage_rooms[curr]
  
  // if out of order, then increment the room count 
  order_counts[room] += (h != (i-1) &amp;&amp; j != (i+1)) ? 1 : 0
}

var res = []
for( var key in order_counts ) {
  var count = order_counts[key]
  if(0==count) {
    var room_stages = group_stages[key]
    var filtered_stages = stages.filter(function(v) {
        return -1 != room_stages.indexOf(v.value())
      }).filter(function(v,i) {
        return i!=room_stages.indexOf(v.value())
        }).asSequence()

    count = filtered_stages.size().whenNull(0)
  }
  res.push(0&lt;count?count:null)
}

newSequence(res, &apos;integer&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="skip_name" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence([&apos;InterviewerDecision&apos;,
&apos;ParticipantDecision&apos;,
&apos;SeeComment&apos;,
&apos;TechnicalProblem&apos;],&apos;text&apos;)
					</attribute>
        </attributes>
      </variable>
      <variable name="skip_value" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;Deviation_AE_CRF&apos;
var action = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.actionType&apos;).asSequence()
var type = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence().filter(function(v,i){
  return i == action.indexOf(&apos;SKIP&apos;)
  }).last().whenNull(&apos;&apos;).value().slice(14)
  
var arr = []
for(var i=0; i &lt; $this(&apos;skip_name&apos;).size(); i++) {
  arr.push($this(&apos;skip_name&apos;).valueAt(i).eq(type).value()?true:null)
} 
newSequence(arr,&apos;boolean&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="ae_count" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;ae_value&apos;).trimmer().size()</attribute>
        </attributes>
      </variable>
      <variable name="aefu_count" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;aefu_value&apos;).trimmer().size()</attribute>
        </attributes>
      </variable>
      <variable name="dev_count" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;dev_value&apos;).trimmer().sum()</attribute>
        </attributes>
      </variable>
    </variables>
  </variables>
  <created valueType="datetime">2019-04-11T14:03:43.250-04</created>
  <updated valueType="datetime">2019-10-21T15:11:14.936-04</updated>
</org.obiba.magma.views.View>