{"from": ["clsa-dcs-f1.Participants","clsa-dcs-f1.ECG","clsa-dcs-f1.4mWalk","clsa-dcs-f1.Blood","clsa-dcs-f1.Blood2","clsa-dcs-f1.ChairRise","clsa-dcs-f1.ConclusionQuestionnaire","clsa-dcs-f1.ContraIndications","clsa-dcs-f1.Deviation_AE_CRF","clsa-dcs-f1.DiseaseSymptoms","clsa-dcs-f1.EventPMT","clsa-dcs-f1.GenHealth","clsa-dcs-f1.HearingQuestionnaire","clsa-dcs-f1.NeuropsychologicalBattery","clsa-dcs-f1.NeuropsychologicalBatteryScoring","clsa-dcs-f1.OSEA","clsa-dcs-f1.OSOnly","clsa-dcs-f1.QualityAssuranceIH","clsa-dcs-f1.QuestionnaireBoneDensity","clsa-dcs-f1.FunctionalStatus","clsa-dcs-f1.StandingBalance","clsa-dcs-f1.TUG","clsa-dcs-f1.TimeBasedProspectiveMemoryTask","clsa-dcs-f1.Urine","clsa-dcs-f1.VisionAcuity","clsa-dcs-f1.BloodPressure","clsa-dcs-images-f1.CarotidIntima","clsa-dcs-f1.CognitiveTest","clsa-dcs-images-f1.DualHipBoneDensity","clsa-dcs-images-f1.ForearmBoneDensity","clsa-dcs-f1.Frax","clsa-dcs-f1.GripStrength","clsa-dcs-f1.Hearing","clsa-dcs-f1.HipsWaist","clsa-dcs-images-f1.LateralBoneDensity","clsa-dcs-images-f1.RetinalScanLeft","clsa-dcs-images-f1.RetinalScanRight","clsa-dcs-f1.StandingHeight","clsa-dcs-images-f1.SpineBoneDensity","clsa-dcs-f1.Spirometry","clsa-dcs-f1.Tonometer","clsa-dcs-f1.Weight","clsa-dcs-images-f1.WholeBodyBoneDensity"],"name": "QC_F1_meta","datasourceName": "cosmos_dcs","where": "$('clsa-dcs-f1.Participants:DCSatHOME').not().whenNull(true).and($('clsa-dcs-f1.Participants:DCS_PHONE').not().whenNull(true))","Magma.VariableListViewDto.view": {"variables": [{"name": "group_questionnaire","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": true,"occurrenceGroup": "","attributes": [{"name": "script","value": "var list=[\n'4mWalk',\n'Blood',\n'Blood2',\n'ChairRise',\n'ConclusionQuestionnaire',\n'ContraIndications',\n'Deviation_AE_CRF',\n'DiseaseSymptoms',\n'EventPMT',\n'FunctionalStatus',\n'GenHealth',\n'HearingQuestionnaire',\n'NeuropsychologicalBattery',\n'NeuropsychologicalBatteryScoring',\n'OSEA',\n'OSOnly',\n'QualityAssuranceIH',\n'QuestionnaireBoneDensity',\n'StandingBalance',\n'StroopFAS',\n'TUG',\n'TimeBasedProspectiveMemoryTask',\n'Urine',\n'VisionAcuity'\n]\n$('clsa-dcs-f1.Participants:Admin.StageInstance.stage').asSequence().filter(function(v){\n  return -1!=list.indexOf(v.value())\n})"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "group_instrument","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": true,"occurrenceGroup": "","attributes": [{"name": "script","value": "var list=[\n'BloodPressure',\n'CarotidIntima',\n'CognitiveTest',\n'DualHipBoneDensity',\n'ECG',\n'ForearmBoneDensity',\n'Frax',\n'GripStrength',\n'Hearing',\n'HipsWaist',\n'LateralBoneDensity',\n'RetinalScanLeft',\n'RetinalScanRight',\n'SpineBoneDensity',\n'Spirometry',\n'StandingHeight',\n'Tonometer',\n'Weight',\n'WholeBodyBoneDensity'\n]\n$('clsa-dcs-f1.Participants:Admin.StageInstance.stage').asSequence().filter(function(v){\n  return -1!=list.indexOf(v.value())\n})"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "group_duration_ecg","entityType": "Participant","valueType": "integer","mimeType": "","isRepeatable": false,"occurrenceGroup": "","attributes": [{"name": "script","value": "var res=null\nif($('cosmos_dcs.QC_F1_ecg:contraindicated').not().and(\n   $('cosmos_dcs.QC_F1_ecg:file_size').isNull().not()).value()) {\n  var ecg=newValue(null,'datetime')\n  try {\n    ecg=newValue(\n    $('clsa-dcs-f1.ECG:RES_MEASUREMENT_DATE').value() + ' ' +\n    $('clsa-dcs-f1.ECG:RES_MEASUREMENT_TIME').value(), 'datetime')\n  } catch(e) {\n  }\n\n  if(ecg.isNull().not().and(ecg.time().gt(0)).value()) {\n    var ecgTime=ecg.time()\n    var preIndex=-1\n    var postIndex=-1\n    var pre=newValue(null,'datetime')\n    var post=newValue(null,'datetime')\n    var minPre=10000000000000000\n    var minPost=minPre\n    var stages=$('clsa-dcs-f1.Participants:Admin.StageInstance.stage').asSequence().filter(function(v){\n      return v.isNull().or(v.any('ExtendedHIN','GeneralProxy')).not().value()\n    })\n\n    for(var i=0;i<stages.size();i++) {\n      var stage=stages.valueAt(i).value()\n      if('ECG'==stage) continue\n      var isQ = -1==$this('group_questionnaire').indexOf(stage) ? false : true\n      var isI = -1==$this('group_instrument').indexOf(stage) ? false : true\n      if(!(isQ || isI)) continue\n      if(isQ) {\n        pre=$('clsa-dcs-f1.'+stage+':QuestionnaireRun.timeEnd')\n      } else  {\n        pre=$('clsa-dcs-f1.'+stage+':InstrumentRun.timeEnd')\n      }\n      if(ecg.after(pre).value()) {\n        var p=ecgTime.minus(pre.time()).value()\n        if(p<minPre) {\n          minPre=p\n          preIndex=i\n        }\n      } else {\n        if(isQ) {\n          post=$('clsa-dcs-f1.'+stage+':QuestionnaireRun.timeStart')\n        } else {\n          post=$('clsa-dcs-f1.'+stage+':InstrumentRun.timeStart')\n        }\n        if(ecg.before(post).value()) {\n          var p=post.time().minus(ecgTime).value()\n          if(p<minPost) {\n            minPost=p\n            postIndex=i\n          }\n        }\n      }\n    }// end for loop\n    var valid = false\n    if(-1!=preIndex && 2==(postIndex-preIndex)) {\n      valid = 'ECG'==stages.valueAt(preIndex+1).value()\n    }\n    else\n    {\n      var preCandidates = ['BloodPressure','Spirometry','StandingHeight','HipsWaist','Weight']\n      for(var i=0;i<preCandidates.length && !valid;i++) {\n        preIndex = stages.indexOf(preCandidates[i])\n        postIndex = preIndex+1\n        if('ECG'==stages.valueAt(postIndex).value()) {\n          while('ECG'==stages.valueAt(++postIndex).value()) {}\n          valid = 1 < (postIndex-preIndex)\n        }\n      }\n    }\n    if(valid) {\n      var preStage=stages.valueAt(preIndex).value()      \n      if('Consent'==preStage) {\n        pre=$('clsa-dcs-f1.Consent:timeEnd')\n      } else {\n        pre=(-1!=$this('group_questionnaire').indexOf(preStage)) ?\n          $('clsa-dcs-f1.'+preStage+':QuestionnaireRun.timeEnd') :\n          $('clsa-dcs-f1.'+preStage+':InstrumentRun.timeEnd')\n      }    \n      var postStage=stages.valueAt(postIndex).value()\n      if('Consent'==postStage) {\n        post=$('clsa-dcs-f1.Consent:timeStart')\n      } else {\n        post=(-1!=$this('group_questionnaire').indexOf(postStage)) ?\n          $('clsa-dcs-f1.'+postStage+':QuestionnaireRun.timeStart') :\n          $('clsa-dcs-f1.'+postStage+':InstrumentRun.timeStart')\n      }    \n      if(post.after(pre).value()) {\n        res=post.time().minus(pre.time()).div(1000)\n      }\n    }\n  }\n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "group_duration_dexa","entityType": "Participant","valueType": "integer","mimeType": "","isRepeatable": false,"occurrenceGroup": "","attributes": [{"name": "script","value": "var list = ['LateralBoneDensity','ForearmBoneDensity','WholeBodyBoneDensity','DualHipBoneDensity','SpineBoneDensity']\nvar stages = $('clsa-dcs-f1.Participants:Admin.StageInstance.stage').asSequence()\nvar dexa = stages.filter(function(v) {\n    return -1 !== list.indexOf(v.value())\n  })\nvar res = null\nif(dexa.empty().not().value()) {\n  \n  list = list.concat(['QuestionnaireBoneDensity','Frax','EventPMT'])\n  var seq = stages.filter(function(v) {\n    return -1 !== list.indexOf(v.value())\n  }).join('').value()\n  \n  var stageAfter = seq.endsWith('FraxEventPMT') ? 'Frax' : 'EventPMT'\n  // bracket the actual bone density acquisitions\n  // \n  var pre = $('clsa-dcs-f1.QuestionnaireBoneDensity:QuestionnaireRun.timeEnd')  \n  var post = -1 != $this('group_questionnaire').indexOf(stageAfter) ?\n    $('clsa-dcs-f1.'+stageAfter+':QuestionnaireRun.timeStart') :\n    $('clsa-dcs-f1.'+stageAfter+':InstrumentRun.timeStart')\n  \n  if(pre.before(post).value()) {    \n    res = post.time().minus(pre.time()).div(1000)\n  }  \n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "group_blood","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"occurrenceGroup": "","attributes": [{"name": "script","value": "var res = null\nvar u = $group('clsa-dcs-f1.Participants:Admin.StageInstance.stage','Blood','Admin.StageInstance.lastState').asSequence().last()\nvar v = $group('clsa-dcs-f1.Participants:Admin.StageInstance.stage','Blood2','Admin.StageInstance.lastState').asSequence().last()\nvar p = $('clsa-dcs-f1.Participants:Admin.StageInstance.stage').any('Blood').and(u.isNull().not()).value()\nvar q = $('clsa-dcs-f1.Participants:Admin.StageInstance.stage').any('Blood2').and(v.isNull().not()).value()\nif(p && !q) {\n  res = newValue( 'Blood', 'text') \n} else if(q && !p) {\n  res = newValue( 'Blood2', 'text') \n} else if(p && q) {\n  if(v.any('NotApplicable').or(u.any('Completed')).value()) {\n    res = newValue('Blood', 'text')\n  } else { \n    res = newValue('Blood2', 'text')\n  }\n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""}]}}