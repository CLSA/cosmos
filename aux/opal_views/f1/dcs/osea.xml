<org.obiba.magma.views.View>
  <name>QC_F1_osea</name>
  <from class="org.obiba.magma.views.JoinTable">
    <list>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-f1.Participants</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-f1.OSEA</reference>
      </table>
    </list>
  </from>
  <select class="org.obiba.magma.views.support.NoneClause"/>
  <where class="org.obiba.magma.js.views.JavascriptClause">
    <scriptName>customScript</scriptName>
    <script>$(&apos;clsa-dcs-f1.Participants:DCSatHOME&apos;).not().whenNull(true).and($(&apos;clsa-dcs-f1.Participants:DCS_PHONE&apos;).not().whenNull(true))</script>
  </where>
  <variables class="org.obiba.magma.js.views.VariablesClause">
    <variables class="linked-hash-set">
      <variable name="technician" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;clsa-dcs-f1.OSEA:QuestionnaireRun.user&apos;).whenNull(
  $group(&apos;Admin.Action.stage&apos;,&apos;OSEA&apos;,&apos;Admin.Action.user&apos;).asSequence().last()).lowerCase()</attribute>
        </attributes>
      </variable>
      <variable name="skip" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;OSEA&apos;
var action = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.actionType&apos;).asSequence()
var res = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence().filter(function(v,i){
  return i == action.indexOf(&apos;SKIP&apos;)
  }).last()
if(res.isNull().not().value()) {
  res = newValue(res.value().slice(14),&apos;text&apos;)  
}
res</attribute>
        </attributes>
      </variable>
      <variable name="contraindicated" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$group(&apos;clsa-dcs-f1.Participants:Admin.StageInstance.stage&apos;,&apos;OSEA&apos;,
&apos;Admin.StageInstance.lastState&apos;).any(&apos;Contraindicated&apos;,&apos;NotApplicable&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="comment" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
//
var stage = &apos;OSEA&apos;
var c_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.comment&apos;).asSequence()
var e_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence()
var res = null
if(c_seq.size().eq(e_seq.size()).value())
{
  var c_str = []  // string array of comments
  var e_str = []  // string array of event reasons

  for(var i = 0; i &lt; c_seq.size(); i++) {
    var c = c_seq.valueAt(i).value()
    if(null == c) continue
    c = c.replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var e = e_seq.valueAt(i).value()
    if(0 &lt; c.length) {
      c_str.push(c)
      if(null != e &amp;&amp; 0 &lt; e.length) {
        e = e.slice(14)
      } else {
        e = &apos;SeeComment&apos;
      }
      e_str.push(e)
    }
  }

  if(0 &lt; c_str.length) {
    var arr = []  // array of event reasons
    var key_orig = []  // array of lower cased comments as unique keys
    for(var i = 0; i &lt; c_str.length; i++) {
      var key = c_str[i]
      var key_lower = key.toLowerCase()
      // retain the first encountered instance of the comment
      //
      if(undefined === key_orig[key_lower])
        key_orig[key_lower] = key

      if(undefined === arr[e_str[i]])
        arr[e_str[i]] = []

      if(-1===arr[e_str[i]].indexOf(key_orig[key_lower]))
        arr[e_str[i]].push(key_orig[key_lower])
    }

    // loop over the final array of event reasons and their sets of comments
    //
    var str = &apos;{&apos;
    for(var key in arr) {
      str += &apos;&quot;&apos; + key + &apos;&quot;:[&apos;
      var t = []
      for(var i = 0; i &lt; arr[key].length; i++) {
        t.push(&apos;&quot;&apos; + arr[key][i] + &apos;&quot;&apos;)
      }
      str += t.join(&apos;,&apos;) + &apos;],&apos;
    }

    res = newValue(str.substring(0,str.length-1)+&apos;}&apos;,&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="qnaire_complete" valueType="decimal" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;OSEA&apos;
var p = $(&apos;clsa-dcs-f1.&apos; + stage + &apos;:QuestionnaireMetric.missingCount&apos;).asSequence()
var q = $(&apos;clsa-dcs-f1.&apos; + stage + &apos;:QuestionnaireMetric.questionCount&apos;).asSequence()
var res = null
if(p.isNull().or(q.isNull(),q.sum().eq(0)).not().value()) {
  res = q.sum().minus(p.sum()).multiply(100).div(q.sum())
}
res</attribute>
        </attributes>
      </variable>
      <variable name="missing" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;contraindicated&apos;).not().and(
  $this(&apos;skip&apos;).isNull(),
  $this(&apos;qnaire_complete&apos;).isNull(),
  $this(&apos;meta_stage_duration&apos;).isNull())</attribute>
        </attributes>
      </variable>
      <variable name="meta_module_name" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence([&apos;ORH&apos;,&apos;PSY_PHY_FIN&apos;,&apos;SLE&apos;], &apos;text&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="duration_name" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence([&apos;stage&apos;], &apos;text&apos;).append($this(&apos;meta_module_name&apos;))</attribute>
        </attributes>
      </variable>
      <variable name="meta_stage_duration" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;OSEA&apos;
var res = null
var post = $(&apos;clsa-dcs-f1.&apos;+stage+&apos;:QuestionnaireRun.timeEnd&apos;)
var pre = $(&apos;clsa-dcs-f1.&apos;+stage+&apos;:QuestionnaireRun.timeStart&apos;)
if(pre.before(post).value()) {
    res = post.time().minus(pre.time()).div(1000)
}
if(null === res) {
  res = $group(
    &apos;clsa-dcs-f1.Participants:Admin.StageInstance.stage&apos;,
    stage,
    &apos;Admin.StageInstance.duration&apos;).asSequence().sum()
}
if(res.eq(0).value()) res = null
res</attribute>
        </attributes>
      </variable>
      <variable name="meta_module_duration" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">var res = null
if($this(&apos;meta_stage_duration&apos;).isNull().not().value()) {
  var stage = &apos;OSEA&apos;
  var list = $this(&apos;meta_module_name&apos;)
  var str = []
  var section = $(&apos;clsa-dcs-f1.&apos;+stage+&apos;:QuestionnaireMetric.section&apos;).asSequence()
  var duration = $(&apos;clsa-dcs-f1.&apos;+stage+&apos;:QuestionnaireMetric.duration&apos;).asSequence()
  for(var i = 0; i &lt; list.size(); i++) {
    str.push(
      duration.filter(
        function(v, k) {
          return list.valueAt(i).eq(section.valueAt(k))
        }
      ).asSequence().sum()
    )
  }
  res = newSequence(str, &apos;integer&apos;) 
} else {
  var str = []
  for(var i = 0; i &lt; $this(&apos;meta_module_name&apos;).size(); i++) str.push(null)
  res = newSequence(str,&apos;integer&apos;)
}
res</attribute>
        </attributes>
      </variable>
      <variable name="duration_value" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence($this(&apos;meta_stage_duration&apos;),&apos;integer&apos;).append($this(&apos;meta_module_duration&apos;))</attribute>
        </attributes>
      </variable>
      <variable name="refusal_name" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;meta_module_name&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="refusal_value" valueType="decimal" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;clsa-dcs-f1.OSEA:&apos;
var sections={
&apos;ORH&apos;:[
&apos;ORH_BRUSDN_COF1&apos;,
&apos;ORH_COST_COF1&apos;,
&apos;ORH_DENT_COF1&apos;,
&apos;ORH_DNUSE_COF1&apos;,
&apos;ORH_DNVST_COF1&apos;,
&apos;ORH_EXP_DNB_COF1&apos;,
&apos;ORH_HLTH_COF1&apos;,
&apos;ORH_OFTN_COF1&apos;,
&apos;ORH_PRBHT_COF1&apos;,
&apos;ORH_TEETH_COF1&apos;,
&apos;ORH_TETH20_COF1&apos;,
&apos;ORH_TYPINS_COF1&apos;,
&apos;ORH_UNCEAT_COF1&apos;,
&apos;ORH_WHO_COF1&apos;,
&apos;ORH_WYNDN_COF1&apos;],
&apos;PSY_PHY_FIN&apos;:[
&apos;FIN_LIVMNY2_CHILD_COF1&apos;,
&apos;FIN_LIVMNY2_FAM_COF1&apos;,
&apos;FIN_LIVMNY2_FRI_COF1&apos;,
&apos;FIN_LIVMNY2_GRAN_COF1&apos;,
&apos;FIN_LIVMNY2_OTSP_COF1&apos;,
&apos;FIN_LIVMNY2_PAID_COF1&apos;,
&apos;FIN_LIVMNY2_PAR_COF1&apos;,
&apos;FIN_LIVMNY2_SIB_COF1&apos;,
&apos;FIN_LIVMNY_COF1&apos;,
&apos;FIN_LIVPOS2_CHILD_COF1&apos;,
&apos;FIN_LIVPOS2_FAM_COF1&apos;,
&apos;FIN_LIVPOS2_FRI_COF1&apos;,
&apos;FIN_LIVPOS2_GRAN_COF1&apos;,
&apos;FIN_LIVPOS2_OTSP_COF1&apos;,
&apos;FIN_LIVPOS2_PAID_COF1&apos;,
&apos;FIN_LIVPOS2_PAR_COF1&apos;,
&apos;FIN_LIVPOS2_SIB_COF1&apos;,
&apos;FIN_LIVPOS_COF1&apos;,
&apos;FIN_LIVPRV2_CHILD_COF1&apos;,
&apos;FIN_LIVPRV2_FAM_COF1&apos;,
&apos;FIN_LIVPRV2_FRI_COF1&apos;,
&apos;FIN_LIVPRV2_GRAN_COF1&apos;,
&apos;FIN_LIVPRV2_OTSP_COF1&apos;,
&apos;FIN_LIVPRV2_PAID_COF1&apos;,
&apos;FIN_LIVPRV2_PAR_COF1&apos;,
&apos;FIN_LIVPRV2_SIB_COF1&apos;,
&apos;FIN_LIVPRV_COF1&apos;,
&apos;FIN_MNY_COF1&apos;,
&apos;FIN_OFTNPOS_COF1&apos;,
&apos;FIN_OFTNPRV_COF1&apos;,
&apos;FIN_OFTN_COF1&apos;,
&apos;FIN_POS_COF1&apos;,
&apos;FIN_PRV_COF1&apos;,
&apos;FIN_SEXMNY2_CHILD_COF1&apos;,
&apos;FIN_SEXMNY2_FAM_COF1&apos;,
&apos;FIN_SEXMNY2_FRI_COF1&apos;,
&apos;FIN_SEXMNY2_GRAN_COF1&apos;,
&apos;FIN_SEXMNY2_OTSP_COF1&apos;,
&apos;FIN_SEXMNY2_PAID_COF1&apos;,
&apos;FIN_SEXMNY2_PAR_COF1&apos;,
&apos;FIN_SEXMNY2_SIB_COF1&apos;,
&apos;FIN_SEXMNY_COF1&apos;,
&apos;FIN_SEXPOS2_CHILD_COF1&apos;,
&apos;FIN_SEXPOS2_FAM_COF1&apos;,
&apos;FIN_SEXPOS2_FRI_COF1&apos;,
&apos;FIN_SEXPOS2_GRAN_COF1&apos;,
&apos;FIN_SEXPOS2_OTSP_COF1&apos;,
&apos;FIN_SEXPOS2_PAID_COF1&apos;,
&apos;FIN_SEXPOS2_PAR_COF1&apos;,
&apos;FIN_SEXPOS2_SIB_COF1&apos;,
&apos;FIN_SEXPOS_COF1&apos;,
&apos;FIN_SEXPRV2_CHILD_COF1&apos;,
&apos;FIN_SEXPRV2_FAM_COF1&apos;,
&apos;FIN_SEXPRV2_FRI_COF1&apos;,
&apos;FIN_SEXPRV2_GRAN_COF1&apos;,
&apos;FIN_SEXPRV2_OTSP_COF1&apos;,
&apos;FIN_SEXPRV2_PAID_COF1&apos;,
&apos;FIN_SEXPRV2_PAR_COF1&apos;,
&apos;FIN_SEXPRV2_SIB_COF1&apos;,
&apos;FIN_SEXPRV_COF1&apos;,
&apos;FIN_WHOMNY_COF1&apos;,
&apos;FIN_WHOPOS_COF1&apos;,
&apos;FIN_WHOPRV_COF1&apos;,
&apos;INTRO_2_COFI&apos;,
&apos;INTRO_4_COF1&apos;,
&apos;PHY_CHK_COF1&apos;,
&apos;PHY_HIT_COF1&apos;,
&apos;PHY_LIVCHK2_CHILD_COF1&apos;,
&apos;PHY_LIVCHK2_FAM_COF1&apos;,
&apos;PHY_LIVCHK2_FRI_COF1&apos;,
&apos;PHY_LIVCHK2_GRAN_COF1&apos;,
&apos;PHY_LIVCHK2_OTSP_COF1&apos;,
&apos;PHY_LIVCHK2_PAID_COF1&apos;,
&apos;PHY_LIVCHK2_PAR_COF1&apos;,
&apos;PHY_LIVCHK2_SIB_COF1&apos;,
&apos;PHY_LIVCHK_COF1&apos;,
&apos;PHY_LIVHIT2_CHILD_COF1&apos;,
&apos;PHY_LIVHIT2_FAM_COF1&apos;,
&apos;PHY_LIVHIT2_FRI_COF1&apos;,
&apos;PHY_LIVHIT2_GRAN_COF1&apos;,
&apos;PHY_LIVHIT2_OTSP_COF1&apos;,
&apos;PHY_LIVHIT2_PAID_COF1&apos;,
&apos;PHY_LIVHIT2_PAR_COF1&apos;,
&apos;PHY_LIVHIT2_SIB_COF1&apos;,
&apos;PHY_LIVHIT_COF1&apos;,
&apos;PHY_LIVPUSH2_CHILD_COF1&apos;,
&apos;PHY_LIVPUSH2_FAM_COF1&apos;,
&apos;PHY_LIVPUSH2_FRI_COF1&apos;,
&apos;PHY_LIVPUSH2_GRAN_COF1&apos;,
&apos;PHY_LIVPUSH2_OTSP_COF1&apos;,
&apos;PHY_LIVPUSH2_PAID_COF1&apos;,
&apos;PHY_LIVPUSH2_PAR_COF1&apos;,
&apos;PHY_LIVPUSH2_SIB_COF1&apos;,
&apos;PHY_LIVPUSH_COF1&apos;,
&apos;PHY_LIVTHRN2_CHILD_COF1&apos;,
&apos;PHY_LIVTHRN2_FAM_COF1&apos;,
&apos;PHY_LIVTHRN2_FRI_COF1&apos;,
&apos;PHY_LIVTHRN2_GRAN_COF1&apos;,
&apos;PHY_LIVTHRN2_OTHSP_COF1&apos;,
&apos;PHY_LIVTHRN2_PAID_COF1&apos;,
&apos;PHY_LIVTHRN2_PAR_COF1&apos;,
&apos;PHY_LIVTHRN2_SIB_COF1&apos;,
&apos;PHY_LIVTHRN_COF1&apos;,
&apos;PHY_LIVTHT2_CHILD_COF1&apos;,
&apos;PHY_LIVTHT2_FAM_COF1&apos;,
&apos;PHY_LIVTHT2_FRI_COF1&apos;,
&apos;PHY_LIVTHT2_GRAN_COF1&apos;,
&apos;PHY_LIVTHT2_OTSP_COF1&apos;,
&apos;PHY_LIVTHT2_PAID_COF1&apos;,
&apos;PHY_LIVTHT2_PAR_COF1&apos;,
&apos;PHY_LIVTHT2_SIB_COF1&apos;,
&apos;PHY_LIVTHT_COF1&apos;,
&apos;PHY_LIVWPN2_CHILD_COF1&apos;,
&apos;PHY_LIVWPN2_FAM_COF1&apos;,
&apos;PHY_LIVWPN2_FRI_COF1&apos;,
&apos;PHY_LIVWPN2_GRAN_COF1&apos;,
&apos;PHY_LIVWPN2_OTSP_COF1&apos;,
&apos;PHY_LIVWPN2_PAID_COF1&apos;,
&apos;PHY_LIVWPN2_PAR_COF1&apos;,
&apos;PHY_LIVWPN2_SIB_COF1&apos;,
&apos;PHY_LIVWPN_COF1&apos;,
&apos;PHY_OFTNCHK_COF1&apos;,
&apos;PHY_OFTNHIT_COF1&apos;,
&apos;PHY_OFTNPUSH_COF1&apos;,
&apos;PHY_OFTNTHRN_COF1&apos;,
&apos;PHY_OFTNTHT_COF1&apos;,
&apos;PHY_OFTNWPN_COF1&apos;,
&apos;PHY_PUSH_COF1&apos;,
&apos;PHY_SEXCHK2_CHILD_COF1&apos;,
&apos;PHY_SEXCHK2_FAM_COF1&apos;,
&apos;PHY_SEXCHK2_FRI_COF1&apos;,
&apos;PHY_SEXCHK2_GRAN_COF1&apos;,
&apos;PHY_SEXCHK2_OTSP_COF1&apos;,
&apos;PHY_SEXCHK2_PAID_COF1&apos;,
&apos;PHY_SEXCHK2_PAR_COF1&apos;,
&apos;PHY_SEXCHK2_SIB_COF1&apos;,
&apos;PHY_SEXCHK_COF1&apos;,
&apos;PHY_SEXHIT2_CHILD_COF1&apos;,
&apos;PHY_SEXHIT2_FAM_COF1&apos;,
&apos;PHY_SEXHIT2_FRI_COF1&apos;,
&apos;PHY_SEXHIT2_GRAN_COF1&apos;,
&apos;PHY_SEXHIT2_OTSP_COF1&apos;,
&apos;PHY_SEXHIT2_PAID_COF1&apos;,
&apos;PHY_SEXHIT2_PAR_COF1&apos;,
&apos;PHY_SEXHIT2_SIB_COF1&apos;,
&apos;PHY_SEXHIT_COF1&apos;,
&apos;PHY_SEXPUSH2_CHILD_COF1&apos;,
&apos;PHY_SEXPUSH2_FAM_COF1&apos;,
&apos;PHY_SEXPUSH2_FRI_COF1&apos;,
&apos;PHY_SEXPUSH2_GRAN_COF1&apos;,
&apos;PHY_SEXPUSH2_OTSP_COF1&apos;,
&apos;PHY_SEXPUSH2_PAID_COF1&apos;,
&apos;PHY_SEXPUSH2_PAR_COF1&apos;,
&apos;PHY_SEXPUSH2_SIB_COF1&apos;,
&apos;PHY_SEXPUSH_COF1&apos;,
&apos;PHY_SEXTHRN2_CHILD_COF1&apos;,
&apos;PHY_SEXTHRN2_FAM_COF1&apos;,
&apos;PHY_SEXTHRN2_FRI_COF1&apos;,
&apos;PHY_SEXTHRN2_GRAN_COF1&apos;,
&apos;PHY_SEXTHRN2_OTSP_COF1&apos;,
&apos;PHY_SEXTHRN2_PAID_COF1&apos;,
&apos;PHY_SEXTHRN2_PAR_COF1&apos;,
&apos;PHY_SEXTHRN2_SIB_COF1&apos;,
&apos;PHY_SEXTHRN_COF1&apos;,
&apos;PHY_SEXTHT2_CHILD_COF1&apos;,
&apos;PHY_SEXTHT2_FAM_COF1&apos;,
&apos;PHY_SEXTHT2_FRI_COF1&apos;,
&apos;PHY_SEXTHT2_GRAN_COF1&apos;,
&apos;PHY_SEXTHT2_OTSP_COF1&apos;,
&apos;PHY_SEXTHT2_PAID_COF1&apos;,
&apos;PHY_SEXTHT2_PAR_COF1&apos;,
&apos;PHY_SEXTHT2_SIB_COF1&apos;,
&apos;PHY_SEXTHT_COF1&apos;,
&apos;PHY_SEXWPN2_CHILD_COF1&apos;,
&apos;PHY_SEXWPN2_FAM_COF1&apos;,
&apos;PHY_SEXWPN2_FRI_COF1&apos;,
&apos;PHY_SEXWPN2_GRAN_COF1&apos;,
&apos;PHY_SEXWPN2_OTSP_COF1&apos;,
&apos;PHY_SEXWPN2_PAID_COF1&apos;,
&apos;PHY_SEXWPN2_PAR_COF1&apos;,
&apos;PHY_SEXWPN2_SIB_COF1&apos;,
&apos;PHY_SEXWPN_COF1&apos;,
&apos;PHY_THRN_COF1&apos;,
&apos;PHY_THT_COF1&apos;,
&apos;PHY_WHOCHK_COF1&apos;,
&apos;PHY_WHOHIT_COF1&apos;,
&apos;PHY_WHOPUSH_COF1&apos;,
&apos;PHY_WHOTHRN_COF1&apos;,
&apos;PHY_WHOTHT_COF1&apos;,
&apos;PHY_WHOWPN_COF1&apos;,
&apos;PHY_WPN_COF1&apos;,
&apos;PSY_CRT_COF1&apos;,
&apos;PSY_IGN_COF1&apos;,
&apos;PSY_ISU_COF1&apos;,
&apos;PSY_LIVCRT2_CGV_COF1&apos;,
&apos;PSY_LIVCRT2_CHD_COF1&apos;,
&apos;PSY_LIVCRT2_FML_COF1&apos;,
&apos;PSY_LIVCRT2_FRD_COF1&apos;,
&apos;PSY_LIVCRT2_GRC_COF1&apos;,
&apos;PSY_LIVCRT2_OT_COF1&apos;,
&apos;PSY_LIVCRT2_PRT_COF1&apos;,
&apos;PSY_LIVCRT2_SIB_COF1&apos;,
&apos;PSY_LIVCRT_COF1&apos;,
&apos;PSY_LIVIGN2_PAR_COF1&apos;,
&apos;PSY_LIVISU2_CHILD_COF1&apos;,
&apos;PSY_LIVISU2_FAM_COF1&apos;,
&apos;PSY_LIVISU2_FRI_COF1&apos;,
&apos;PSY_LIVISU2_GRAND_COF1&apos;,
&apos;PSY_LIVISU2_OTSP_COF1&apos;,
&apos;PSY_LIVISU2_PAID_COF1&apos;,
&apos;PSY_LIVISU2_PAR_COF1&apos;,
&apos;PSY_LIVISU2_SIB_COF1&apos;,
&apos;PSY_LIVISU_COF1&apos;,
&apos;PSY_LIVNIGN2_CHILD_COF1&apos;,
&apos;PSY_LIVNIGN2_FAM_COF1&apos;,
&apos;PSY_LIVNIGN2_FRI_COF1&apos;,
&apos;PSY_LIVNIGN2_GRAN_COF1&apos;,
&apos;PSY_LIVNIGN2_OTSP_COF1&apos;,
&apos;PSY_LIVNIGN2_PAID_COF1&apos;,
&apos;PSY_LIVNIGN2_SIB_COF1&apos;,
&apos;PSY_LIVNIGN_COF1&apos;,
&apos;PSY_LIVTHR2_CHILD_COF1&apos;,
&apos;PSY_LIVTHR2_FAM_COF1&apos;,
&apos;PSY_LIVTHR2_FRI_COF1&apos;,
&apos;PSY_LIVTHR2_GRAN_COF1&apos;,
&apos;PSY_LIVTHR2_OTSP_COF1&apos;,
&apos;PSY_LIVTHR2_PAID_COF1&apos;,
&apos;PSY_LIVTHR2_PAR_COF1&apos;,
&apos;PSY_LIVTHR2_SIB_COF1&apos;,
&apos;PSY_LIVTHR_COF1&apos;,
&apos;PSY_OFTNCRT_COF1&apos;,
&apos;PSY_OFTNIGN_COF1&apos;,
&apos;PSY_OFTNISU_COF1&apos;,
&apos;PSY_OFTNTHR_COF1&apos;,
&apos;PSY_SEXCRT2_CGV_COF1&apos;,
&apos;PSY_SEXCRT2_CHD_COF1&apos;,
&apos;PSY_SEXCRT2_FML_COF1&apos;,
&apos;PSY_SEXCRT2_FRD_COF1&apos;,
&apos;PSY_SEXCRT2_GRC_COF1&apos;,
&apos;PSY_SEXCRT2_OT_COF1&apos;,
&apos;PSY_SEXCRT2_PRT_COF1&apos;,
&apos;PSY_SEXCRT2_SIB_COF1&apos;,
&apos;PSY_SEXCRT_COF1&apos;,
&apos;PSY_SEXIGN2_CHILD_COF1&apos;,
&apos;PSY_SEXIGN2_FAM_COF1&apos;,
&apos;PSY_SEXIGN2_FRI_COF1&apos;,
&apos;PSY_SEXIGN2_GRAN_COF1&apos;,
&apos;PSY_SEXIGN2_OTSP_COF1&apos;,
&apos;PSY_SEXIGN2_PAID_COF1&apos;,
&apos;PSY_SEXIGN2_PAR_COF1&apos;,
&apos;PSY_SEXIGN2_SIB_COF1&apos;,
&apos;PSY_SEXIGN_COF1&apos;,
&apos;PSY_SEXISU2_CHILD_COF1&apos;,
&apos;PSY_SEXISU2_FAM_COF1&apos;,
&apos;PSY_SEXISU2_FRI_COF1&apos;,
&apos;PSY_SEXISU2_GRAN_COF1&apos;,
&apos;PSY_SEXISU2_OTSP_COF1&apos;,
&apos;PSY_SEXISU2_PAID_COF1&apos;,
&apos;PSY_SEXISU2_PAR_COF1&apos;,
&apos;PSY_SEXISU2_SIB_COF1&apos;,
&apos;PSY_SEXISU_COF1&apos;,
&apos;PSY_SEXTHR2_CHILD_COF1&apos;,
&apos;PSY_SEXTHR2_FAM_COF1&apos;,
&apos;PSY_SEXTHR2_FRI_COF1&apos;,
&apos;PSY_SEXTHR2_GRAND_COF1&apos;,
&apos;PSY_SEXTHR2_OTSP_COF1&apos;,
&apos;PSY_SEXTHR2_PAID_COF1&apos;,
&apos;PSY_SEXTHR2_PAR_COF1&apos;,
&apos;PSY_SEXTHR2_SIB_COF1&apos;,
&apos;PSY_SEXTHR_COF1&apos;,
&apos;PSY_THR_COF1&apos;,
&apos;PSY_WHOCRT_COF1&apos;,
&apos;PSY_WHOIGN_COF1&apos;,
&apos;PSY_WHOISU_COF1&apos;,
&apos;PSY_WHOTHR_COF1&apos;],
&apos;SLE&apos;:[
&apos;SLE_30DUR_COF1&apos;,
&apos;SLE_30INTRF_COF1&apos;,
&apos;SLE_30MIN_COF1&apos;,
&apos;SLE_DREAM_COF1&apos;,
&apos;SLE_DRMDUR_COF1&apos;,
&apos;SLE_LEGS_COF1&apos;,
&apos;SLE_LGDUR_COF1&apos;,
&apos;SLE_LGEVE_COF1&apos;,
&apos;SLE_LGFQ_COF1&apos;,
&apos;SLE_LGIMPR_COF1&apos;,
&apos;SLE_LGURG_COF1&apos;,
&apos;SLE_MIDDUR_COF1&apos;,
&apos;SLE_MIDFQ_COF1&apos;,
&apos;SLE_MIDINTRF_COF1&apos;,
&apos;SLE_QLTY_COF1&apos;,
&apos;SLE_STAYDUR_COF1&apos;,
&apos;SLE_STAYFQ_COF1&apos;,
&apos;SLE_STAYINTRF_COF1&apos;,
&apos;SLS_HOUR_COF1&apos;,
&apos;SNO_SNORE_COF1&apos;,
&apos;SNO_STOPBREATH_COF1&apos;]
}

var str = []
for(var key in sections) {
  var rcount = 0
  var qcount = 0
  var arr = sections[key]
  for(var i = 0; i &lt; arr.length; i++) {
    var j = $(stage + arr[i])
    if(j.isNull().value()) {
      continue
    }  
    qcount++
    rcount += j.any(&apos;REFUSED&apos;).value() ? 1 : 0
  }
  if(0 == qcount) {
    str.push(null)
  } else {
    str.push(100.0*rcount/qcount)
  }
}
newSequence(str, &apos;decimal&apos;)</attribute>
        </attributes>
      </variable>
    </variables>
  </variables>
  <created valueType="datetime">2019-04-11T14:25:22.812-04</created>
  <updated valueType="datetime">2019-05-07T14:26:26.003-04</updated>
</org.obiba.magma.views.View>