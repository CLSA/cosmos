{"from": ["clsa-dcs-f1.Participants","clsa-dcs-f1.Blood","clsa-dcs-f1.Blood2"],"name": "QC_F1_blood","datasourceName": "cosmos_dcs","Magma.VariableListViewDto.view": {"variables": [{"name": "technician","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var stage = $('cosmos_dcs.QC_F1_meta:group_blood')\nvar res = null\nif(stage.isNull().not().value()) {\n  stage = stage.value()\n  res = $('clsa-dcs-f1.'+stage+':QuestionnaireRun.user').whenNull(\n    $group('Admin.Action.stage',stage,'Admin.Action.user').asSequence().last()).lowerCase()\n}\nres  "}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "skip","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var stage = $('cosmos_dcs.QC_F1_meta:group_blood')\nvar res = null\nif(stage.isNull().not().value()) {\n  stage = stage.value()\n  var action = $group('Admin.Action.stage',stage,'Admin.Action.actionType').asSequence()\n  var res = $group('Admin.Action.stage',stage,'Admin.Action.eventReason').asSequence().filter(function(v,i){\n    return i == action.indexOf('SKIP')\n  }).last()\n  if(res.isNull().not().value()) {\n    res = newValue(res.value().slice(14),'text')  \n  }\n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "contraindicated","entityType": "Participant","valueType": "boolean","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var stage = $('cosmos_dcs.QC_F1_meta:group_blood')\nvar res = false\nif(stage.isNull().not().value()) {\n  stage = stage.value()\n  res = $group('clsa-dcs-f1.Participants:Admin.StageInstance.stage',stage,'Admin.StageInstance.lastState').any(\n        'Contraindicated','NotApplicable')\n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "comment","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "// this script compounds repeated comments by using lowercase comment strings as array keys\n//\nvar stage = $('cosmos_dcs.QC_F1_meta:group_blood')\nvar res = null\nif(stage.isNull().not().value()) {\n  stage = stage.value()\n  var c_seq = $group('Admin.Action.stage',stage,'Admin.Action.comment').asSequence()\n  var e_seq = $group('Admin.Action.stage',stage,'Admin.Action.eventReason').asSequence()\n\n  if(c_seq.size().eq(e_seq.size()).value())\n  {\n    var c_str = []  // string array of comments\n    var e_str = []  // string array of event reasons\n\n    for(var i = 0; i < c_seq.size(); i++) {\n      var c = c_seq.valueAt(i).value()\n      if(null == c) continue\n      c = c.replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,\"\")\n      var e = e_seq.valueAt(i).value()\n      if(0 < c.length) {\n        c_str.push(c)\n        if(null != e && 0 < e.length) {\n          e = e.slice(14)\n        } else {\n          e = 'SeeComment'\n        }\n        e_str.push(e)\n      }\n    }\n\n    if(0 < c_str.length) {\n      var arr = []  // array of event reasons\n      var key_orig = []  // array of lower cased comments as unique keys\n      for(var i = 0; i < c_str.length; i++) {\n        var key = c_str[i]\n        var key_lower = key.toLowerCase()\n        // retain the first encountered instance of the comment\n        //\n        if(undefined === key_orig[key_lower])\n          key_orig[key_lower] = key\n\n        if(undefined === arr[e_str[i]])\n          arr[e_str[i]] = []\n\n        if(-1===arr[e_str[i]].indexOf(key_orig[key_lower]))\n          arr[e_str[i]].push(key_orig[key_lower])\n      }\n\n      // loop over the final array of event reasons and their sets of comments\n      //\n      var str = '{'\n      for(var key in arr) {\n        str += '\"' + key + '\":['\n        var t = []\n        for(var i = 0; i < arr[key].length; i++) {\n          t.push('\"' + arr[key][i] + '\"')\n        }\n        str += t.join(',') + '],'\n      }\n\n      res = newValue(str.substring(0,str.length-1)+'}','text')\n    }\n  }  \n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "qnaire_complete","entityType": "Participant","valueType": "decimal","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var stage = $('cosmos_dcs.QC_F1_meta:group_blood')\nvar res = null\nif(stage.isNull().not().value()) {\n  stage = stage.value()\n  var p = $('clsa-dcs-f1.' + stage + ':QuestionnaireMetric.missingCount').asSequence()\n  var q = $('clsa-dcs-f1.' + stage + ':QuestionnaireMetric.questionCount').asSequence()\n\n  if(p.isNull().or(q.isNull(),q.sum().eq(0)).not().value()) {\n    res = q.sum().minus(p.sum()).multiply(100).div(q.sum())\n  }\n}  \nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "missing","entityType": "Participant","valueType": "boolean","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "$this('contraindicated').not().and(\n  $this('skip').isNull(),\n  $this('qnaire_complete').isNull(),\n  $this('meta_stage_duration').isNull())"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "meta_module_name","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": true,"occurrenceGroup": "","attributes": [{"name": "script","value": "newSequence(['BLOOD'], 'text')"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "duration_name","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": true,"occurrenceGroup": "","attributes": [{"name": "script","value": "newSequence(['stage'], 'text').append($this('meta_module_name'))"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "meta_stage_duration","entityType": "Participant","valueType": "integer","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var stage = $('cosmos_dcs.QC_F1_meta:group_blood')\nvar res = null\nif(stage.isNull().not().value()) {\n  stage = stage.value()\n  var post = $('clsa-dcs-f1.'+stage+':QuestionnaireRun.timeEnd')\n  var pre = $('clsa-dcs-f1.'+stage+':QuestionnaireRun.timeStart')\n  if(pre.before(post).value()) {\n      res = post.time().minus(pre.time()).div(1000)\n  }\n  if(null === res) {\n    res = $group(\n      'clsa-dcs-f1.Participants:Admin.StageInstance.stage',\n      stage,\n      'Admin.StageInstance.duration').asSequence().sum()\n  }\n  if(res.eq(0).value()) res = null\n}  \nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "meta_module_duration","entityType": "Participant","valueType": "integer","mimeType": "","isRepeatable": true,"occurrenceGroup": "","attributes": [{"name": "script","value": "var res = null\nif($this('meta_stage_duration').isNull().not().value()) {\n  var stage = $('cosmos_dcs.QC_F1_meta:group_blood')\n  if(stage.isNull().not().value()) {\n    stage = stage.value()  \n    var list = $this('meta_module_name')\n    var str = []\n    var section = $('clsa-dcs-f1.'+stage+':QuestionnaireMetric.section').asSequence()\n    var duration = $('clsa-dcs-f1.'+stage+':QuestionnaireMetric.duration').asSequence()\n    for(var i = 0; i < list.size(); i++) {\n      str.push(\n        duration.filter(\n          function(v, k) {\n            return list.valueAt(i).eq(section.valueAt(k))\n          }\n        ).asSequence().sum()\n      )\n    }\n    res = newSequence(str, 'integer') \n  } \n} \nif(null === res) {\n  var str = []\n  for(var i = 0; i < $this('meta_module_name').size(); i++) str.push(null)\n  res = newSequence(str,'integer')\n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "duration_value","entityType": "Participant","valueType": "integer","mimeType": "","isRepeatable": true,"occurrenceGroup": "","attributes": [{"name": "script","value": "newSequence($this('meta_stage_duration'),'integer').append($this('meta_module_duration'))"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "refusal_name","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": true,"occurrenceGroup": "","attributes": [{"name": "script","value": "$this('meta_module_name')"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "refusal_value","entityType": "Participant","valueType": "decimal","mimeType": "","isRepeatable": true,"occurrenceGroup": "","attributes": [{"name": "script","value": "var stage = $('cosmos_dcs.QC_F1_meta:group_blood')\nvar sections={\n'BLOOD':[\n'AGREE_BS_B',\n'ALCOHOL_24_B',\n'BLOOD_COLLECTED_B',\n'CAFFEINE_24_B',\n'CURRENTLY_MENSTRUAL_B',\n'DECLINE_POST_B',\n'FIRST_ATTEMPT_B',\n'FOOD_DRINK_24_B',\n'NEEDLE_B',\n'NOTE_DRAW_SITE_B.FIBROSED_INFLAMED',\n'NOTE_DRAW_SITE_B.HEMATOMA',\n'NOTE_DRAW_SITE_B.PARALYZED',\n'NOTE_DRAW_SITE_B.PETECHIAE',\n'NOTE_DRAW_SITE_B.PICC_LINE',\n'NOTE_DRAW_SITE_B.RED_SWOLLEN',\n'NOTE_DRAW_SITE_B.SCARRING',\n'NOTE_DRAW_SITE_B.SCLEROTIC_HARDVEINS',\n'NOTE_DRAW_SITE_B.SEVERE_PROBLEM',\n'NOTE_DRAW_SITE_B.TATTOOS',\n'NOTE_DRAW_SITE_B.VASCULAR_GRAFT',\n'NOTE_OTHER_B.OTHER',\n'PART_DECLINED_B',\n'PART_POSTPONED_B',\n'SIT_RECLIN_B',\n'TECH_REASON_B',\n'TOBACCO_24_B',\n'WHICH_ARM_CHOSEN_2_B',\n'WHY_NOT_AGREE_BLOOD_B',\n'WHY_NO_BLOOD_B']\n}\n  \nif(stage.any('Blood2').value()) {\n  sections['BLOOD'].splice(sections['BLOOD'].indexOf('DECLINE_POST_B'),1)\n  sections['BLOOD'].splice(sections['BLOOD'].indexOf('PART_POSTPONED_B'),1)\n}\n\nif(stage.isNull().value()) {\n  stage = 'clsa-dcs-f1.Blood:'\n} else {\n  stage = 'clsa-dcs-f1.'+stage.value()+':'\n}\n  \nvar str = []\nfor(var key in sections) {\n  var rcount = 0\n  var qcount = 0\n  var arr = sections[key]\n  for(var i = 0; i < arr.length; i++) {\n    var j = $(stage + arr[i])\n    if(j.isNull().value()) {\n      continue\n    }  \n    qcount++\n    rcount += j.any('REFUSED').value() ? 1 : 0\n  }\n  if(0 == qcount) {\n    str.push(null)\n  } else {\n    str.push(100.0*rcount/qcount)\n  }\n}  \nnewSequence(str, 'decimal')"}],"unit": "","index": 0,"referencedEntityType": ""}]}}