<org.obiba.magma.views.View>
  <name>QC_F1_inhome_cognition_recording</name>
  <from class="org.obiba.magma.views.JoinTable">
    <list>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-inhome-f1.Participants</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-inhome-f1.InHome_2</reference>
      </table>
    </list>
  </from>
  <select class="org.obiba.magma.views.support.NoneClause"/>
  <where class="org.obiba.magma.views.support.AllClause"/>
  <variables class="org.obiba.magma.js.views.VariablesClause">
    <variables class="linked-hash-set">
      <variable name="technician" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;clsa-inhome-f1.InHome_2:QuestionnaireRun.user&apos;).whenNull(
  $group(&apos;Admin.Action.stage&apos;,&apos;InHome_2&apos;,&apos;Admin.Action.user&apos;).asSequence().last()).lowerCase()</attribute>
        </attributes>
      </variable>
      <variable name="skip" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var action = $group(&apos;Admin.Action.stage&apos;,&apos;InHome_2&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var res = $group(&apos;Admin.Action.stage&apos;,&apos;InHome_2&apos;,&apos;Admin.Action.eventReason&apos;).asSequence().filter(function(v,i){
  return i == action.indexOf(&apos;SKIP&apos;)
  }).last()
if(res.isNull().not().value()) {
  res = newValue(res.value().slice(14),&apos;text&apos;)  
}
res</attribute>
        </attributes>
      </variable>
      <variable name="contraindicated" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$group(&apos;clsa-inhome-f1.Participants:Admin.StageInstance.stage&apos;,&apos;InHome_2&apos;,
&apos;Admin.StageInstance.lastState&apos;).any(&apos;Contraindicated&apos;,&apos;NotApplicable&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="comment" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
//
var stage = &apos;InHome_2&apos;
var c_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.comment&apos;).asSequence()
var e_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence()
var res = null
if(c_seq.size().eq(e_seq.size()).value())
{
  var c_str = []  // string array of comments
  var e_str = []  // string array of event reasons

  for(var i = 0; i &lt; c_seq.size(); i++) {
    var c = c_seq.valueAt(i).value()
    if(null == c) continue
    c = c.replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var e = e_seq.valueAt(i).value()
    if(0 &lt; c.length) {
      c_str.push(c)
      if(null != e &amp;&amp; 0 &lt; e.length) {
        e = e.slice(14)
      } else {
        e = &apos;SeeComment&apos;
      }
      e_str.push(e)
    }
  }

  if(0 &lt; c_str.length) {
    var arr = []  // array of event reasons
    var key_orig = []  // array of lower cased comments as unique keys
    for(var i = 0; i &lt; c_str.length; i++) {
      var key = c_str[i]
      var key_lower = key.toLowerCase()
      // retain the first encountered instance of the comment
      //
      if(undefined === key_orig[key_lower])
        key_orig[key_lower] = key

      if(undefined === arr[e_str[i]])
        arr[e_str[i]] = []

      if(-1===arr[e_str[i]].indexOf(key_orig[key_lower]))
        arr[e_str[i]].push(key_orig[key_lower])
    }

    // loop over the final array of event reasons and their sets of comments
    //
    var str = &apos;{&apos;
    for(var key in arr) {
      str += &apos;&quot;&apos; + key + &apos;&quot;:[&apos;
      var t = []
      for(var i = 0; i &lt; arr[key].length; i++) {
        t.push(&apos;&quot;&apos; + arr[key][i] + &apos;&quot;&apos;)
      }
      str += t.join(&apos;,&apos;) + &apos;],&apos;
    }

    res = newValue(str.substring(0,str.length-1)+&apos;}&apos;,&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="duration" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var res = null
var section =$(&apos;clsa-inhome-f1.InHome_2:QuestionnaireMetric.section&apos;).asSequence()   
var duration = $(&apos;clsa-inhome-f1.InHome_2:QuestionnaireMetric.duration&apos;).asSequence().filter(
    function(v, k) {
      return &apos;COG&apos; == section.valueAt(k).value()
    }
  ).asSequence()   
res = duration.sum()
if(res.isNull().not().and(res.eq(0)).value()) res = null
res</attribute>
        </attributes>
      </variable>
      <variable name="missing" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;contraindicated&apos;).not().and(
  $this(&apos;skip&apos;).isNull(),
  $this(&apos;qnaire_complete&apos;).isNull(),
  $this(&apos;file_complete&apos;).isNull())</attribute>
        </attributes>
      </variable>
      <variable name="qnaire_complete" valueType="decimal" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var res = null
var q = $(&apos;clsa-inhome-f1.InHome_2:QuestionnaireMetric.questionCount&apos;).asSequence()
var p = $(&apos;clsa-inhome-f1.InHome_2:QuestionnaireMetric.missingCount&apos;).asSequence()
var s = $(&apos;clsa-inhome-f1.InHome_2:QuestionnaireMetric.section&apos;).asSequence()
if(s.size().eq(q.size()).and(p.size().eq(q.size())).value()) {
  var i = s.lastIndexOf(&apos;COG&apos;)
  var j = i-1
  while(j&gt;=0 &amp;&amp; s.valueAt(j).matches(/COG/).value()) { j-- }
  var qsum = q.subset(j+1,i+1).sum()
  var psum = p.subset(j+1,i+1).sum()
  if(qsum.gt(0).value()) {
    res = q.sum().minus(p.sum()).multiply(100).div(q.sum())
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="file_name" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence([&apos;REY1&apos;,&apos;AFT&apos;,&apos;pre_MAT_alphabet&apos;,&apos;pre_MAT_number&apos;,&apos;MAT&apos;,&apos;REY2&apos;],&apos;text&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="file_size" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence([
  $(&apos;clsa-inhome-f1.InHome_2:COG_WRDLSTREC_COF1&apos;).length(),
  $(&apos;clsa-inhome-f1.InHome_2:COG_ANMLLLIST_REC_COF1&apos;).length(),
  $(&apos;clsa-inhome-f1.InHome_2:COG_CNTTMEREC_COF1&apos;).length(),
  $(&apos;clsa-inhome-f1.InHome_2:COG_ALPTME_REC2_COF1&apos;).length(),
  $(&apos;clsa-inhome-f1.InHome_2:COG_ALTTME_REC_COF1&apos;).length(),
  $(&apos;clsa-inhome-f1.InHome_2:COG_WRDLST2_REC_COF1&apos;).length()
  ],&apos;integer&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="file_complete" valueType="decimal" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;file_size&apos;).trimmer().size().div($this(&apos;file_name&apos;).size()).multiply(100)</attribute>
        </attributes>
      </variable>
    </variables>
  </variables>
  <created valueType="datetime">2019-04-15T14:38:30.147-04</created>
  <updated valueType="datetime">2019-05-01T10:44:35.731-04</updated>
</org.obiba.magma.views.View>