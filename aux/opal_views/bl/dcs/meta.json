{"from": ["clsa-dcs.Participants","clsa-dcs.ECG","clsa-dcs.4mWalk","clsa-dcs.Blood","clsa-dcs.Blood2","clsa-dcs.ChairRise","clsa-dcs.ConclusionQuestionnaire","clsa-dcs.ContraIndications","clsa-dcs.DiseaseSymptoms","clsa-dcs.EventPMT","clsa-dcs.FunctionalStatus","clsa-dcs.HearingQuestionnaire","clsa-dcs.NeuropsychologicalBattery","clsa-dcs.NeuropsychologicalBatteryScoring","clsa-dcs.QuestionnaireBoneDensity","clsa-dcs.StandingBalance","clsa-dcs.TUG","clsa-dcs.TimeBasedProspectiveMemoryTask","clsa-dcs.Urine","clsa-dcs.VisionAcuity","clsa-dcs.BloodPressure","clsa-dcs-images.CarotidIntima","clsa-dcs.CognitiveTest","clsa-dcs-images.DualHipBoneDensity","clsa-dcs-images.ForearmBoneDensity","clsa-dcs.GripStrength","clsa-dcs.Hearing","clsa-dcs.HipsWaist","clsa-dcs-images.LateralBoneDensity","clsa-dcs-images.RetinalScan","clsa-dcs.SittingHeight","clsa-dcs-images.Plaque","clsa-dcs.Spirometry","clsa-dcs.Phlebotomy","clsa-dcs.Tonometer","clsa-dcs.Weight","clsa-dcs-images.WholeBodyBoneDensity"],"name": "QC_BL_meta","datasourceName": "cosmos_dcs","Magma.VariableListViewDto.view": {"variables": [{"name": "group_questionnaire","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": true,"occurrenceGroup": "","attributes": [{"name": "script","value": "var list=[\n'4mWalk',\n'Blood',\n'Blood2',\n'ChairRise',\n'ConclusionQuestionnaire',\n'ContraIndications',\n'DiseaseSymptoms',\n'EventPMT',\n'FunctionalStatus',\n'HearingQuestionnaire',\n'NeuropsychologicalBattery',\n'NeuropsychologicalBatteryScoring',\n'Phlebotomy',\n'QuestionnaireBoneDensity',\n'StandingBalance',\n'TUG',\n'TimeBasedProspectiveMemoryTask',\n'Urine',\n'VisionAcuity'\n]\n$('clsa-dcs.Participants:Admin.StageInstance.stage').asSequence().filter(function(v){\n  return -1!=list.indexOf(v.value())\n})"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "group_instrument","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": true,"occurrenceGroup": "","attributes": [{"name": "script","value": "var list=[\n'BloodPressure',\n'CarotidIntima',\n'CognitiveTest',\n'DualHipBoneDensity',\n'ECG',\n'ForearmBoneDensity',\n'GripStrength',\n'Hearing',\n'HipsWaist',\n'LateralBoneDensity',\n'Plaque',\n'RetinalScan',\n'Spirometry',\n'StandingHeight',\n'Tonometer',\n'Weight',\n'WholeBodyBoneDensity'\n]\n$('clsa-dcs.Participants:Admin.StageInstance.stage').asSequence().filter(function(v){\n  return -1!=list.indexOf(v.value())\n})"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "group_duration_ecg","entityType": "Participant","valueType": "integer","mimeType": "","isRepeatable": false,"occurrenceGroup": "","attributes": [{"name": "script","value": "var res=null\nif($('cosmos_dcs.QC_BL_ecg:contraindicated').not().and(\n   $('cosmos_dcs.QC_BL_ecg:file_size').isNull().not()).value()) {\n  var ecg=newValue(null,'datetime')\n  try {\n    ecg=newValue(\n    $('clsa-dcs.ECG:RES_MEASUREMENT_DATE').value() + ' ' +\n    $('clsa-dcs.ECG:RES_MEASUREMENT_TIME').value(), 'datetime')\n  } catch(e) {\n  }\n\n  if(ecg.isNull().not().and(ecg.time().gt(0)).value()) {\n    var ecgTime=ecg.time()\n    var preIndex=-1\n    var postIndex=-1\n    var pre=newValue(null,'datetime')\n    var post=newValue(null,'datetime')\n    var minPre=10000000000000000\n    var minPost=minPre\n    var stages=$('clsa-dcs.Participants:Admin.StageInstance.stage').asSequence().filter(function(v){\n      return v.isNull().or(v.any('ExtendedHIN','GeneralProxy')).not().value()\n    })\n\n    for(var i=0;i<stages.size();i++) {\n      var stage=stages.valueAt(i).value()\n      if('ECG'==stage) continue\n      var isQ = -1==$this('group_questionnaire').indexOf(stage) ? false : true\n      var isI = -1==$this('group_instrument').indexOf(stage) ? false : true\n      if(!(isQ || isI)) continue\n      if(isQ) {\n        pre=$('clsa-dcs.'+stage+':QuestionnaireRun.timeEnd')\n      } else  {\n        pre=$('clsa-dcs.'+stage+':InstrumentRun.timeEnd')\n      }\n      if(ecg.after(pre).value()) {\n        var p=ecgTime.minus(pre.time()).value()\n        if(p<minPre) {\n          minPre=p\n          preIndex=i\n        }\n      } else {\n        if(isQ) {\n          post=$('clsa-dcs.'+stage+':QuestionnaireRun.timeStart')\n        } else {\n          post=$('clsa-dcs.'+stage+':InstrumentRun.timeStart')\n        }\n        if(ecg.before(post).value()) {\n          var p=post.time().minus(ecgTime).value()\n          if(p<minPost) {\n            minPost=p\n            postIndex=i\n          }\n        }\n      }\n    }// end for loop\n    var valid = false\n    if(-1!=preIndex && (postIndex-preIndex)==2) {\n      valid = 'ECG' == stages.valueAt(preIndex+1).value()\n    }\n    else\n    {\n      var preCandidates = ['BloodPressure','Spirometry','SittingHeight','StandingHeight','HipsWaist','Weight']\n      for(var i=0;i<preCandidates.length && !valid;i++) {\n        preIndex = stages.indexOf(preCandidates[i])\n        postIndex = preIndex+1\n        if('ECG'==stages.valueAt(postIndex).value()) {\n          while('ECG'==stages.valueAt(++postIndex).value()) {}\n          valid = 1 < (postIndex-preIndex)\n        }\n      }\n    }\n    if(valid) {\n      var preStage=stages.valueAt(preIndex).value()      \n      if('Consent'==preStage) {\n        pre=$('clsa-dcs.Consent:timeEnd')\n      } else {\n        pre=(-1!=$this('group_questionnaire').indexOf(preStage)) ?\n          $('clsa-dcs.'+preStage+':QuestionnaireRun.timeEnd') :\n          $('clsa-dcs.'+preStage+':InstrumentRun.timeEnd')\n      }    \n      var postStage=stages.valueAt(postIndex).value()\n      if('Consent'==postStage) {\n        post=$('clsa-dcs.Consent:timeStart')\n      } else {\n        post=(-1!=$this('group_questionnaire').indexOf(postStage)) ?\n          $('clsa-dcs.'+postStage+':QuestionnaireRun.timeStart') :\n          $('clsa-dcs.'+postStage+':InstrumentRun.timeStart')\n      }    \n      if(post.after(pre).value()) {\n        res=post.time().minus(pre.time()).div(1000)\n      }\n    }\n  }\n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "group_duration_dexa","entityType": "Participant","valueType": "integer","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var list = ['LateralBoneDensity','ForearmBoneDensity','WholeBodyBoneDensity','DualHipBoneDensity']\nvar stages = $('clsa-dcs.Participants:Admin.StageInstance.stage').asSequence()\nvar dexa = stages.filter(function(v) {\n    return -1 !== list.indexOf(v.value())\n  })\nvar res = null\nif(dexa.empty().not().value()) {\n  // bracket the actual bone density acquisitions\n  // \n  var pre = $('clsa-dcs.QuestionnaireBoneDensity:QuestionnaireRun.timeEnd')\n  var post = $('clsa-dcs.EventPMT:QuestionnaireRun.timeStart')\n  \n  if(pre.before(post).value()) {    \n    res = post.time().minus(pre.time()).div(1000)\n  }  \n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""},{"name": "group_blood","entityType": "Participant","valueType": "text","mimeType": "","isRepeatable": false,"attributes": [{"name": "script","value": "var res = null\nvar u = $group('clsa-dcs.Participants:Admin.StageInstance.stage','Phlebotomy','Admin.StageInstance.lastState').asSequence().last()\nvar v = $group('clsa-dcs.Participants:Admin.StageInstance.stage','Blood','Admin.StageInstance.lastState').asSequence().last()\nvar w = $group('clsa-dcs.Participants:Admin.StageInstance.stage','Blood2','Admin.StageInstance.lastState').asSequence().last()\nvar p = $('clsa-dcs.Participants:Admin.StageInstance.stage').any('Phlebotomy').and(w.isNull().not()).value()\nvar q = $('clsa-dcs.Participants:Admin.StageInstance.stage').any('Blood').and(u.isNull().not()).value()\nvar r = $('clsa-dcs.Participants:Admin.StageInstance.stage').any('Blood2').and(v.isNull().not()).value()\nif(p && !(q || r)) {\n  res = newValue( 'Phlebotomy', 'text') \n} else if(q && !(p || r)) {\n  res = newValue( 'Blood', 'text') \n} else if(r && !(p || q)) {\n  res = newValue( 'Blood2', 'text') \n} else if(p || q || r) {\n  var s=[]\n  var n = ['Phlebotomy','Blood','Blood2']\n  if(p) s.push(u)\n  if(q) s.push(v)\n  if(r) s.push(w)\n  var x = []\n  var y = []\n  for(var i = 0; i < s.length; i++) {\n    if(s[i].any('Completed').value()) x.push(n[i])\n    if(s[i].any('NotApplicable').value()) y.push(n[i])\n  }\n  if(0 < x.length) {\n    res = newValue(x[x.length-1],'text')\n  } else if(0 < y.length) {\n    res = newValue(y[y.length-1],'text')\n  }\n}\nres"}],"unit": "","index": 0,"referencedEntityType": ""}]}}