<org.obiba.magma.views.View>
  <name>QC_F2_carotid_intima</name>
  <from class="org.obiba.magma.views.JoinTable">
    <list>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-f2.Participants</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-images-f2.CarotidIntima</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>cosmos_dcs.QC_F2_meta</reference>
      </table>
    </list>
  </from>
  <select class="org.obiba.magma.views.support.NoneClause"/>
  <where class="org.obiba.magma.views.support.AllClause"/>
  <variables class="org.obiba.magma.js.views.VariablesClause">
    <variables class="linked-hash-set">
      <variable name="technician" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;clsa-dcs-images-f2.CarotidIntima:InstrumentRun.user&apos;).whenNull(
  $group(&apos;Admin.Action.stage&apos;,&apos;CarotidIntima&apos;,&apos;Admin.Action.user&apos;).asSequence().last()).lowerCase()</attribute>
        </attributes>
      </variable>
      <variable name="contraindicated" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$group(&apos;clsa-dcs-f2.Participants:Admin.StageInstance.stage&apos;,&apos;CarotidIntima&apos;,
&apos;Admin.StageInstance.lastState&apos;).any(&apos;Contraindicated&apos;,&apos;NotApplicable&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="missing" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;contraindicated&apos;).not().and(
  $this(&apos;skip&apos;).isNull(),
  $this(&apos;file_complete&apos;).isNull())</attribute>
        </attributes>
      </variable>
      <variable name="skip" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var action=$group(&apos;Admin.Action.stage&apos;,&apos;CarotidIntima&apos;,&apos;Admin.Action.actionType&apos;).asSequence()
var res=$group(&apos;Admin.Action.stage&apos;,&apos;CarotidIntima&apos;,&apos;Admin.Action.eventReason&apos;).asSequence().filter(function(v,i){
  return i==action.indexOf(&apos;SKIP&apos;)
  }).last()
if(res.isNull().not().value()) {
  res = newValue(res.value().slice(14),&apos;text&apos;)
}
res</attribute>
        </attributes>
      </variable>
      <variable name="comment" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
//
var stage = &apos;CarotidIntima&apos;
var c_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.comment&apos;).asSequence()
var e_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence()
var res = null
if(c_seq.size().eq(e_seq.size()).value())
{
  var c_str = []  // string array of comments
  var e_str = []  // string array of event reasons

  for(var i = 0; i &lt; c_seq.size(); i++) {
    var c = c_seq.valueAt(i).value()
    if(null == c) continue
    c = c.replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var e = e_seq.valueAt(i).value()
    if(0 &lt; c.length) {
      c_str.push(c)
      if(null != e &amp;&amp; 0 &lt; e.length) {
        e = e.slice(14)
      } else {
        e = &apos;SeeComment&apos;
      }
      e_str.push(e)
    }
  }

  if(0 &lt; c_str.length) {
    var arr = []  // array of event reasons
    var key_orig = []  // array of lower cased comments as unique keys
    for(var i = 0; i &lt; c_str.length; i++) {
      var key = c_str[i]
      var key_lower = key.toLowerCase()
      // retain the first encountered instance of the comment
      //
      if(undefined === key_orig[key_lower])
        key_orig[key_lower] = key

      if(undefined === arr[e_str[i]])
        arr[e_str[i]] = []

      if(-1===arr[e_str[i]].indexOf(key_orig[key_lower]))
        arr[e_str[i]].push(key_orig[key_lower])
    }

    // loop over the final array of event reasons and their sets of comments
    //
    var str = &apos;{&apos;
    for(var key in arr) {
      str += &apos;&quot;&apos; + key + &apos;&quot;:[&apos;
      var t = []
      for(var i = 0; i &lt; arr[key].length; i++) {
        t.push(&apos;&quot;&apos; + arr[key][i] + &apos;&quot;&apos;)
      }
      str += t.join(&apos;,&apos;) + &apos;],&apos;
    }

    res = newValue(str.substring(0,str.length-1)+&apos;}&apos;,&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="duration" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">null
/* TODO - revamp script
var res=null
if($this(&apos;contraindicated&apos;).not().and(
  $(&apos;cosmos_dcs.QC_F2_meta:group_duration_ecg&apos;).isNull().not()).value()) {
  var stages = $(&apos;clsa-dcs-f2.Participants:Admin.StageInstance.stage&apos;).asSequence()
  var preIndex = $(&apos;cosmos_dcs.QC_F2_meta:group_duration_ecg&apos;).first().value()
  var postIndex = $(&apos;cosmos_dcs.QC_F2_meta:group_duration_ecg&apos;).last().value()
  var cimtStages = stages.filter(function(v,i){
    return (preIndex &lt;= i &amp;&amp; i &lt;= postIndex)
  })
  var ecgIndex = cimtStages.indexOf(&apos;ECG&apos;).value()
  var cimtIndex = cimtStages.indexOf(&apos;CarotidIntima&apos;).value()

  if(-1!=ecgIndex &amp;&amp; -1!=cimtIndex) {
    var pre=newValue(null,&apos;datetime&apos;)
    var post=newValue(null,&apos;datetime&apos;)
    // get the stage immediately before cimt
    cimtIndex=0
    for(var i=postIndex;i&gt;0;i--) {
      var stage=stages.valueAt(i).value()
      if(&apos;CarotidIntima&apos;==stage) {
        cimtIndex=i
        break
      }
    }
    for(var i=cimtIndex-1;i&gt;0;i--) {
      var stage=stages.valueAt(i).value()
      var isQ=-1!=$(&apos;cosmos_dcs.QC_F2_meta:group_questionnaire&apos;).indexOf(stage)
      var isI=-1!=$(&apos;cosmos_dcs.QC_F2_meta:group_instrument&apos;).indexOf(stage)
      if(!(isQ || isI)) continue
      pre=isQ ?
        $(&apos;clsa-dcs-f2.&apos;+stage+&apos;:QuestionnaireRun.timeEnd&apos;) :
        $(&apos;clsa-dcs-f2.&apos;+stage+&apos;:InstrumentRun.timeEnd&apos;)
      break
    }
    // get the stage immediately after cimt
    for(var i=cimtIndex+1;i&lt;postIndex+5;i--) {
      var stage=stages.valueAt(i).value()
      var isQ=-1!=$(&apos;cosmos_dcs.QC_F2_meta:group_questionnaire&apos;).indexOf(stage)
      var isI=-1!=$(&apos;cosmos_dcs.QC_F2_meta:group_instrument&apos;).indexOf(stage)
      if(!(isQ || isI)) continue
      post=isQ ?
        $(&apos;clsa-dcs-f2.&apos;+stage+&apos;:QuestionnaireRun.timeStart&apos;) :
        $(&apos;clsa-dcs-f2.&apos;+stage+&apos;:InstrumentRun.timeStart&apos;)
      break
    }

    if(post.after(pre).value()) {
      res=post.time().minus(pre.time()).div(1000)
    }
  }
}
res
*/</attribute>
        </attributes>
      </variable>
      <variable name="file_name" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence([
  &apos;cineloop_1_left&apos;,&apos;cineloop_1_right&apos;,
  &apos;still_1_left&apos;,&apos;still_1_right&apos;,
  &apos;still_2_left&apos;,&apos;still_2_right&apos;,
  &apos;still_3_left&apos;,&apos;still_3_right&apos;,
  &apos;sr_1_left&apos;,&apos;sr_1_right&apos;
  ],&apos;text&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="file_size" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence([
  $group(&apos;Measure.SIDE&apos;,&apos;Left&apos;,&apos;Measure.CINELOOP_1&apos;).asSequence().last().length(),
  $group(&apos;Measure.SIDE&apos;,&apos;Right&apos;,&apos;Measure.CINELOOP_1&apos;).asSequence().last().length(),
  $group(&apos;Measure.SIDE&apos;,&apos;Left&apos;,&apos;Measure.STILL_IMAGE_1&apos;).asSequence().last().length(),
  $group(&apos;Measure.SIDE&apos;,&apos;Right&apos;,&apos;Measure.STILL_IMAGE_1&apos;).asSequence().last().length(),
  $group(&apos;Measure.SIDE&apos;,&apos;Left&apos;,&apos;Measure.STILL_IMAGE_2&apos;).asSequence().last().length(),
  $group(&apos;Measure.SIDE&apos;,&apos;Right&apos;,&apos;Measure.STILL_IMAGE_2&apos;).asSequence().last().length(),
  $group(&apos;Measure.SIDE&apos;,&apos;Left&apos;,&apos;Measure.STILL_IMAGE_3&apos;).asSequence().last().length(),
  $group(&apos;Measure.SIDE&apos;,&apos;Right&apos;,&apos;Measure.STILL_IMAGE_3&apos;).asSequence().last().length(),
  $group(&apos;Measure.SIDE&apos;,&apos;Left&apos;,&apos;Measure.SR_1&apos;).asSequence().last().length(),
  $group(&apos;Measure.SIDE&apos;,&apos;Right&apos;,&apos;Measure.SR_1&apos;).asSequence().last().length(),
  ],&apos;integer&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="file_complete" valueType="decimal" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;file_size&apos;).trimmer().size().div($this(&apos;file_name&apos;).size()).multiply(100)</attribute>
        </attributes>
      </variable>
    </variables>
  </variables>
  <created valueType="datetime">2019-04-10T11:49:38.984-04</created>
  <updated valueType="datetime">2019-04-30T13:14:49.064-04</updated>
</org.obiba.magma.views.View>