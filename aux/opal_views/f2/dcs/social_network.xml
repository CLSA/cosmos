<org.obiba.magma.views.View>
  <name>QC_F2_social_network</name>
  <from class="org.obiba.magma.views.JoinTable">
    <list>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-f2.Participants</reference>
      </table>
      <table inner="false" class="org.obiba.magma.support.ValueTableReference">
        <reference>clsa-dcs-f2.SocialNetwork</reference>
      </table>
    </list>
  </from>
  <select class="org.obiba.magma.views.support.NoneClause"/>
  <where class="org.obiba.magma.js.views.JavascriptClause">
    <scriptName>customScript</scriptName>
    <script>$(&apos;clsa-dcs-f2.Participants:DCSatHOME&apos;).not().whenNull(true).and($(&apos;clsa-dcs-f2.Participants:DCS_PHONE&apos;).not().whenNull(true))</script>
  </where>
  <variables class="org.obiba.magma.js.views.VariablesClause">
    <variables class="linked-hash-set">
      <variable name="technician" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$(&apos;clsa-dcs-f2.SocialNetwork:QuestionnaireRun.user&apos;).whenNull(
  $group(&apos;Admin.Action.stage&apos;,&apos;SocialNetwork&apos;,&apos;Admin.Action.user&apos;).asSequence().last()).lowerCase()</attribute>
        </attributes>
      </variable>
      <variable name="skip" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;SocialNetwork&apos;
var action = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.actionType&apos;).asSequence()
var res = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence().filter(function(v,i){
  return i == action.indexOf(&apos;SKIP&apos;)
  }).last()
if(res.isNull().not().value()) {
  res = newValue(res.value().slice(14),&apos;text&apos;)  
}
res</attribute>
        </attributes>
      </variable>
      <variable name="contraindicated" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$group(&apos;clsa-dcs-f2.Participants:Admin.StageInstance.stage&apos;,&apos;SocialNetwork&apos;,
&apos;Admin.StageInstance.lastState&apos;).any(&apos;Contraindicated&apos;,&apos;NotApplicable&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="comment" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">// this script compounds repeated comments by using lowercase comment strings as array keys
//
var stage = &apos;SocialNetwork&apos;
var c_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.comment&apos;).asSequence()
var e_seq = $group(&apos;Admin.Action.stage&apos;,stage,&apos;Admin.Action.eventReason&apos;).asSequence()
var res = null
if(c_seq.size().eq(e_seq.size()).value())
{
  var c_str = []  // string array of comments
  var e_str = []  // string array of event reasons

  for(var i = 0; i &lt; c_seq.size(); i++) {
    var c = c_seq.valueAt(i).value()
    if(null == c) continue
    c = c.replace(/[^a-zA-Z0-9 àâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ]/g,&quot;&quot;)
    var e = e_seq.valueAt(i).value()
    if(0 &lt; c.length) {
      c_str.push(c)
      if(null != e &amp;&amp; 0 &lt; e.length) {
        e = e.slice(14)
      } else {
        e = &apos;SeeComment&apos;
      }
      e_str.push(e)
    }
  }

  if(0 &lt; c_str.length) {
    var arr = []  // array of event reasons
    var key_orig = []  // array of lower cased comments as unique keys
    for(var i = 0; i &lt; c_str.length; i++) {
      var key = c_str[i]
      var key_lower = key.toLowerCase()
      // retain the first encountered instance of the comment
      //
      if(undefined === key_orig[key_lower])
        key_orig[key_lower] = key

      if(undefined === arr[e_str[i]])
        arr[e_str[i]] = []

      if(-1===arr[e_str[i]].indexOf(key_orig[key_lower]))
        arr[e_str[i]].push(key_orig[key_lower])
    }

    // loop over the final array of event reasons and their sets of comments
    //
    var str = &apos;{&apos;
    for(var key in arr) {
      str += &apos;&quot;&apos; + key + &apos;&quot;:[&apos;
      var t = []
      for(var i = 0; i &lt; arr[key].length; i++) {
        t.push(&apos;&quot;&apos; + arr[key][i] + &apos;&quot;&apos;)
      }
      str += t.join(&apos;,&apos;) + &apos;],&apos;
    }

    res = newValue(str.substring(0,str.length-1)+&apos;}&apos;,&apos;text&apos;)
  }
}
res</attribute>
        </attributes>
      </variable>
      <variable name="qnaire_complete" valueType="decimal" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;SocialNetwork&apos;
var p = $(&apos;clsa-dcs-f2.&apos; + stage + &apos;:QuestionnaireMetric.missingCount&apos;).asSequence()
var q = $(&apos;clsa-dcs-f2.&apos; + stage + &apos;:QuestionnaireMetric.questionCount&apos;).asSequence()
var res = null
if(p.isNull().or(q.isNull(),q.sum().eq(0)).not().value()) {
  res = q.sum().minus(p.sum()).multiply(100).div(q.sum())
}
res</attribute>
        </attributes>
      </variable>
      <variable name="missing" valueType="boolean" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">$this(&apos;contraindicated&apos;).not().and(
  $this(&apos;skip&apos;).isNull(),
  $this(&apos;qnaire_complete&apos;).isNull(),
  $this(&apos;duration&apos;).isNull())</attribute>
        </attributes>
      </variable>
      <variable name="duration_name" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence([&apos;GAD7&apos;,&apos;SN&apos;,&apos;SPA&apos;,&apos;SSA&apos;], &apos;text&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="duration" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;SocialNetwork&apos;
var res = null
var post = $(&apos;clsa-dcs-f2.&apos;+stage+&apos;:QuestionnaireRun.timeEnd&apos;)
var pre = $(&apos;clsa-dcs-f2.&apos;+stage+&apos;:QuestionnaireRun.timeStart&apos;)
if(pre.before(post).value()) {
    res = post.time().minus(pre.time()).div(1000)
}
if(null === res) {
  res = $group(
    &apos;clsa-dcs-f2.Participants:Admin.StageInstance.stage&apos;,
    stage,
    &apos;Admin.StageInstance.duration&apos;).asSequence().sum()
}
if(res.eq(0).value()) res = null
res</attribute>
        </attributes>
      </variable>
      <variable name="duration_value" valueType="integer" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">var res = null
if($this(&apos;duration&apos;).isNull().not().value()) {
  var stage = &apos;SocialNetwork&apos;
  var list = $this(&apos;duration_name&apos;)
  var str = []
  var section = $(&apos;clsa-dcs-f2.&apos;+stage+&apos;:QuestionnaireMetric.section&apos;).asSequence()
  var duration = $(&apos;clsa-dcs-f2.&apos;+stage+&apos;:QuestionnaireMetric.duration&apos;).asSequence()
  for(var i = 0; i &lt; list.size(); i++) {
    str.push(
      duration.filter(
        function(v, k) {
          return list.valueAt(i).eq(section.valueAt(k))
        }
      ).asSequence().sum()
    )
  }
  res = newSequence(str, &apos;integer&apos;) 
} else {
  var str = []
  for(var i = 0; i &lt; $this(&apos;duration_name&apos;).size(); i++) str.push(null)
  res = newSequence(str,&apos;integer&apos;)
}
res</attribute>
        </attributes>
      </variable>
      <variable name="refusal_name" valueType="text" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">newSequence([&apos;GAD7&apos;,&apos;SN&apos;,&apos;SPA&apos;,&apos;SSA&apos;], &apos;text&apos;)</attribute>
        </attributes>
      </variable>
      <variable name="refusal_value" valueType="decimal" entityType="Participant" unit="" mimeType="" referencedEntityType="" index="0" repeatable="true" occurrenceGroup="">
        <attributes>
          <attribute name="script" valueType="text">var stage = &apos;clsa-dcs-f2.SocialNetwork:&apos;
var sections = {
&apos;GAD7&apos;:[
&apos;GAD_NERV_COF2&apos;,
&apos;GAD_STPWOR_COF2&apos;,
&apos;GAD_WORRTO_COF2&apos;,
&apos;GAD_RELAX_COF2&apos;,
&apos;GAD_RESTLS_COF2&apos;,
&apos;GAD_ANNOY_COF2&apos;,
&apos;GAD_AFRAID_COF2&apos;,
&apos;GAD_TOTAL2_COF2&apos;],
&apos;SN&apos;:[
&apos;SN_LIVHF2_NB_COF2&apos;,
&apos;SN_CHILDSTP_COF2&apos;,
&apos;SN_DGHTRLIV_COF2&apos;,
&apos;SN_SONLIV_COF2&apos;,
&apos;SN_SEECHILD_COF2&apos;,
&apos;SN_SIBLIV_COF2&apos;,
&apos;SN_SEESIB_COF2&apos;,
&apos;SN_RELLIV_COF2&apos;,
&apos;SN_SEEREL_COF2&apos;,
&apos;SN_FRND_COF2&apos;,
&apos;SN_SEEFRND_COF2&apos;,
&apos;SN_SEENEIBR_COF2&apos;,
&apos;SN_CHILDSTP2_COF2&apos;,
&apos;SN_CHILDSTPNEW_COF2&apos;],
&apos;SPA&apos;:[
&apos;SPA_SOAC_COF2&apos;,
&apos;SPA_OUTS_COF2&apos;,
&apos;SPA_CHRCH_COF2&apos;,
&apos;SPA_SPORT_COF2&apos;,
&apos;SPA_EDUC_COF2&apos;,
&apos;SPA_CLUB_COF2&apos;,
&apos;SPA_NEIBR_COF2&apos;,
&apos;SPA_VOLUN_COF2&apos;,
&apos;SPA_OTACT_COF2&apos;,
&apos;SPA_MORAC_COF2&apos;,
&apos;SPA_PREVAC_COF2&apos;,
&apos;SPA_COHES_COF2&apos;],
&apos;SSA&apos;:[
&apos;SSA_CONFBED_COF2&apos;,
&apos;SSA_NDTLK_COF2&apos;,
&apos;SSA_CRISIS_COF2&apos;,
&apos;SSA_TYTDR_COF2&apos;,
&apos;SSA_SHLOV_COF2&apos;,
&apos;SSA_GOODT_COF2&apos;,
&apos;SSA_INFO_COF2&apos;,
&apos;SSA_CONFID_COF2&apos;,
&apos;SSA_HUGS_COF2&apos;,
&apos;SSA_RELAX_COF2&apos;,
&apos;SSA_MEALS_COF2&apos;,
&apos;SSA_ADVCE_COF2&apos;,
&apos;SSA_MINDOFF_COF2&apos;,
&apos;SSA_CHORES_COF2&apos;,
&apos;SSA_SHFEAR_COF2&apos;,
&apos;SSA_SUGG_COF2&apos;,
&apos;SSA_ENJOY_COF2&apos;,
&apos;SSA_PROBLM_COF2&apos;,
&apos;SSA_LOVU_COF2&apos;,
&apos;SSA_PET_COF2&apos;]
}

var skip = []
if($(stage+&apos;QuestionnaireRun.version&apos;).any(&apos;4.0&apos;).value()) {
  skip.push(&apos;GAD7&apos;)
}

var str = []
for(var key in sections) {
  if(-1 != skip.indexOf(key)) {
    str.push(null)
    continue
  }  
  var rcount = 0
  var qcount = 0
  var arr = sections[key]
  for(var i = 0; i &lt; arr.length; i++) {
    var j = $(stage + arr[i])
    if(j.isNull().value()) {
      continue
    }  
    qcount++
    rcount += j.any(&apos;REFUSED&apos;).value() ? 1 : 0
  }
  if(0 == qcount) {
    str.push(null)
  } else {
    str.push(100.0*rcount/qcount)
  }
}
newSequence(str, &apos;decimal&apos;)</attribute>
        </attributes>
      </variable>
    </variables>
  </variables>
  <created valueType="datetime">2019-04-11T13:21:03.818-04</created>
  <updated valueType="datetime">2019-05-09T10:05:44.409-04</updated>
</org.obiba.magma.views.View>