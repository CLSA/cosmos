{
  "Magma.VariableListViewDto.view": {
    "variables": [
      {
        "attributes": [
          {
            "name": "stage", 
            "value": "Spirometry"
          }, 
          {
            "name": "derivedFrom", 
            "namespace": "opal", 
            "value": "/datasource/clsa-dcs/table/Spirometry/variable/InstrumentRun.user"
          }, 
          {
            "name": "script", 
            "value": "$('clsa-dcs-f2.Spirometry:InstrumentRun.user').whenNull(\n  $group('Admin.Action.stage','Spirometry','Admin.Action.user').asSequence().last()).lowerCase()"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_technician_spirometry", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "$('Admin.ApplicationConfiguration.siteName').map({\n  'BritishColumbia':'University of BC DCS',\n  'British Columbia':'University of BC DCS',\n  'Calgary':'Calgary DCS',\n  'Dalhousie':'Dalhousie DCS',\n  'Hamilton':'Hamilton DCS',\n  'Manitoba':'Manitoba DCS',\n  'McGill':'McGill DCS',\n  'McMaster':'Hamilton DCS',\n  'Memorial':'Memorial DCS',\n  'Memorial University':'Memorial DCS',\n  'Ottawa':'Ottawa DCS',\n  'Sherbrooke':'Sherbrooke DCS',\n  'Simon Fraser':'Simon Fraser DCS',\n  'SimonFraser':'Simon Fraser DCS',\n  'UniversityofBC':'University of BC DCS',\n  'University of Manitoba':'Manitoba DCS',\n  'University of Victoria':'Victoria DCS',\n  'Victoria':'Victoria DCS'},null) "
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "interview_site", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var stage=newValue($group('clsa-dcs-f2.Participants:Admin.StageInstance.stage','Spirometry','Admin.StageInstance.lastState').asSequence().last(),'text')\n$this('data_qac_spirometry').isNull().and(stage.any('Skipped','NotApplicable').not()).value() ? 1 : 0"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "data_missing_spirometry", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "integer"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "// this script compounds repeated comments by using lowercase comment strings as array keys\n// and further compounds events within actions\n// \nvar v1=$group('Admin.Action.stage','Spirometry','Admin.Action.comment').asSequence()\nvar v2=$group('Admin.Action.stage','Spirometry','Admin.Action.actionType').asSequence()\nvar v3=$group('Admin.Action.stage','Spirometry','Admin.Action.eventReason').asSequence()\nvar res=null\nvar c_str=[]  // string array of comments\nvar e_str=[]  // string array of events\nvar a_str=[]  // string array of actions\nfor(var i=0; i<v1.size(); i++) {  \n  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull()).value()) continue\n  c_str.push(v1.valueAt(i).value())\n  a_str.push(v2.valueAt(i).value())\n  e_str.push((v3.valueAt(i).isNull().value()?'SeeComment':v3.valueAt(i).value().slice(14)))\n}\nvar v4=$('clsa-dcs-f2.Spirometry:InstrumentRun.skipComment')\nif(v4.isNull().not().value()) {\n  c_str.push(v4.value())\n  a_str.push('SKIP')\n  e_str.push('SeeComment')\n}\nif(0<c_str.length) {\n  var arr=[]\n  var key_orig=[]\n  for(var i=0;i<c_str.length;i++) {\n    var key=c_str[i].replace(/[^a-zA-Z0-9 \u00e0\u00e2\u00e4\u00e8\u00e9\u00ea\u00eb\u00ee\u00ef\u00f4\u0153\u00f9\u00fb\u00fc\u00ff\u00e7\u00c0\u00c2\u00c4\u00c8\u00c9\u00ca\u00cb\u00ce\u00cf\u00d4\u0152\u00d9\u00db\u00dc\u0178\u00c7]/g,\"\")\n    var key_lower = key.toLowerCase()    \n    // retain the first encountered instance of the comment\n    if(undefined===key_orig[key_lower])\n      key_orig[key_lower]=key\n    if(0==key_orig[key_lower].length) continue\n    // combine the action and the event\n    var str=a_str[i]+':'+e_str[i]\n    if(undefined===arr[key_lower])\n      arr[key_lower]=[]\n    if(-1===arr[key_lower].indexOf(str))\n      arr[key_lower].push(str)\n  }\n  \n  var str=[]\n  for(var key in arr) {\n    // compound repeated events \n    var subarr=[]\n    for(var i=0;i<arr[key].length;i++) {\n      var t=arr[key][i].split(':')\n      var t_key=t[1]\n      if(undefined===subarr[t_key])\n        subarr[t_key]=[]\n      if(-1===subarr[t_key].indexOf(t[0]))  \n        subarr[t_key].push(t[0])\n    }\n    var substr=[]\n    for(var t_key in subarr) {\n      var t_str='SeeComment'==t_key?']':']'+t_key\n      if(1<subarr[t_key].length) {\n        substr.push('['+subarr[t_key].join('/')+t_str);\n      } else {\n        substr.push('['+subarr[t_key][0]+t_str);\n      }\n    }\n    str.push('['+((1<substr.length)?substr.join('/'):substr[0])+']:'+key_orig[key])\n  }\n  \n  if(1<str.length) {\n    res=newValue(str.join(','),'text')\n  } else if(1==str.length) {\n    res=newValue(str[0],'text')\n  }\n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_comment_spirometry", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var v1=$group('Admin.Action.stage','Spirometry','Admin.Action.actionType').asSequence()\nvar v2=$group('Admin.Action.stage','Spirometry','Admin.Action.eventReason').asSequence()\nvar res=null\nvar arr=[]  // string array of events\nfor(var i=0; i<v1.size(); i++) {\n  if(v1.valueAt(i).any('SKIP').not().value() ||\n     v2.valueAt(i).isNull().value()) continue\n  var key=v2.valueAt(i).value().slice(14)\n  if(-1==arr.indexOf(key))\n    arr.push(key)\n}\nif(undefined!==arr && 0<arr.length) {\n  res=newValue(arr.pop(),'text')  \n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_skip_spirometry", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "$group('clsa-dcs-f2.Participants:Admin.StageInstance.stage','Spirometry',\n'Admin.StageInstance.lastState').any('Contraindicated','NotApplicable').value() \n? 1 : 0"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_contraindicated_spirometry", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "integer"
      }, 
      {
        "attributes": [
          {
            "name": "derivedFrom", 
            "namespace": "opal", 
            "value": "/datasource/clsa-dcs/table/Participants/variable/Admin.Interview.startDate"
          }, 
          {
            "name": "script", 
            "value": "$('Admin.Interview.startDate')"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "interview_start_date", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "date"
      }, 
      {
        "attributes": [
          {
            "name": "identifier", 
            "value": "true"
          }, 
          {
            "name": "derivedFrom", 
            "namespace": "opal", 
            "value": "/datasource/clsa-dcs/table/Participants/variable/Admin.Participant.barcode"
          }, 
          {
            "name": "script", 
            "value": "$('Admin.Participant.barcode')"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "interview_barcode", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var res=null\nif( $group(\n  'clsa-dcs-f2.Participants:Admin.StageInstance.stage',\n  'Spirometry',\n  'Admin.StageInstance.lastState').asSequence().last().any('Skipped','NotApplicable').not().value() ) {\n  res=$group(\n    'clsa-dcs-f2.Participants:Admin.StageInstance.stage',\n    'Spirometry',\n    'Admin.StageInstance.duration').asSequence().last()\n  if(res.isNull().not().value()) {\n    res=Math.round(res.div(60.0).multiply(10.0).value()) / 10.0\n  }\n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_duration_spirometry", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "decimal"
      }, 
      {
        "attributes": [
          {
            "name": "stage", 
            "value": "Spirometry"
          }, 
          {
            "name": "validation", 
            "value": "[IntegrityCheck-ERROR]"
          }, 
          {
            "name": "captureMethod", 
            "value": "AUTOMATIC"
          }, 
          {
            "name": "isManualCaptureAllowed", 
            "value": "true"
          }, 
          {
            "name": "vendorName", 
            "value": "QUALITY_GRADE"
          }, 
          {
            "name": "derivedFrom", 
            "namespace": "opal", 
            "value": "/datasource/clsa-dcs/table/Spirometry/variable/OUTPUT_QUALITY_GRADE"
          }, 
          {
            "name": "script", 
            "value": "var res=$('clsa-dcs-f2.Spirometry:OUTPUT_QUALITY_GRADE')\nif(!res.isNull().value()) {\n  res=newValue('{grade:'+res.value()+'}','text')\n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "data_qac_spirometry", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "$('clsa-dcs-f2.GripStrength:InstrumentRun.user').whenNull(\n  $group('Admin.Action.stage','GripStrength','Admin.Action.user').asSequence().last()).lowerCase()"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_technician_grip_strength", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "$group('clsa-dcs-f2.Participants:Admin.StageInstance.stage','GripStrength',\n'Admin.StageInstance.lastState').any('Contraindicated','NotApplicable').value() \n? 1 : 0"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_contraindicated_grip_strength", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "integer"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var v1=$group('Admin.Action.stage','GripStrength','Admin.Action.actionType').asSequence()\nvar v2=$group('Admin.Action.stage','GripStrength','Admin.Action.eventReason').asSequence()\nvar res=null\nvar arr=[]  // string array of events\nfor(var i=0; i<v1.size(); i++) {\n  if(v1.valueAt(i).any('SKIP').not().value() ||\n     v2.valueAt(i).isNull().value()) continue\n  var key=v2.valueAt(i).value().slice(14)\n  if(-1==arr.indexOf(key))\n    arr.push(key)\n}\nif(undefined!==arr && 0<arr.length) {\n  res=newValue(arr.pop(),'text')  \n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_skip_grip_strength", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "// this script compounds repeated comments by using lowercase comment strings as array keys\n// and further compounds events within actions\n// \nvar v1=$group('Admin.Action.stage','GripStrength','Admin.Action.comment').asSequence()\nvar v2=$group('Admin.Action.stage','GripStrength','Admin.Action.actionType').asSequence()\nvar v3=$group('Admin.Action.stage','GripStrength','Admin.Action.eventReason').asSequence()\nvar res=null\nvar c_str=[]  // string array of comments\nvar e_str=[]  // string array of events\nvar a_str=[]  // string array of actions\nfor(var i=0; i<v1.size(); i++) {  \n  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull()).value()) continue\n  c_str.push(v1.valueAt(i).value())\n  a_str.push(v2.valueAt(i).value())\n  e_str.push((v3.valueAt(i).isNull().value()?'SeeComment':v3.valueAt(i).value().slice(14)))\n}\nvar v4=$('clsa-dcs-f2.GripStrength:InstrumentRun.skipComment')\nif(v4.isNull().not().value()) {\n  c_str.push(v4.value())\n  a_str.push('SKIP')\n  e_str.push('SeeComment')\n}\nif(0<c_str.length) {\n  var arr=[]\n  var key_orig=[]\n  for(var i=0;i<c_str.length;i++) {\n    var key=c_str[i].replace(/[^a-zA-Z0-9 \u00e0\u00e2\u00e4\u00e8\u00e9\u00ea\u00eb\u00ee\u00ef\u00f4\u0153\u00f9\u00fb\u00fc\u00ff\u00e7\u00c0\u00c2\u00c4\u00c8\u00c9\u00ca\u00cb\u00ce\u00cf\u00d4\u0152\u00d9\u00db\u00dc\u0178\u00c7]/g,\"\")\n    var key_lower = key.toLowerCase()    \n    // retain the first encountered instance of the comment\n    if(undefined===key_orig[key_lower])\n      key_orig[key_lower]=key\n    if(0==key_orig[key_lower].length) continue\n    // combine the action and the event\n    var str=a_str[i]+':'+e_str[i]\n    if(undefined===arr[key_lower])\n      arr[key_lower]=[]\n    if(-1===arr[key_lower].indexOf(str))\n      arr[key_lower].push(str)\n  }\n  \n  var str=[]\n  for(var key in arr) {\n    // compound repeated events \n    var subarr=[]\n    for(var i=0;i<arr[key].length;i++) {\n      var t=arr[key][i].split(':')\n      var t_key=t[1]\n      if(undefined===subarr[t_key])\n        subarr[t_key]=[]\n      if(-1===subarr[t_key].indexOf(t[0]))  \n        subarr[t_key].push(t[0])\n    }\n    var substr=[]\n    for(var t_key in subarr) {\n      var t_str='SeeComment'==t_key?']':']'+t_key\n      if(1<subarr[t_key].length) {\n        substr.push('['+subarr[t_key].join('/')+t_str);\n      } else {\n        substr.push('['+subarr[t_key][0]+t_str);\n      }\n    }\n    str.push('['+((1<substr.length)?substr.join('/'):substr[0])+']:'+key_orig[key])\n  }\n  \n  if(1<str.length) {\n    res=newValue(str.join(','),'text')\n  } else if(1==str.length) {\n    res=newValue(str[0],'text')\n  }\n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_comment_grip_strength", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var stage=newValue($group('clsa-dcs-f2.Participants:Admin.StageInstance.stage','GripStrength','Admin.StageInstance.lastState').asSequence().last(),'text')\n$this('data_qac_grip_strength').isNull().and(stage.any('Skipped','NotApplicable').not()).value() ? 1 : 0"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "data_missing_grip_strength", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "integer"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var res=null\nif($('clsa-dcs-f2.GripStrength:Measure.RES_TRIAL_MAX').isNull().not().value()) {\n  res=newValue('{trial_count:'+$('clsa-dcs-f2.GripStrength:Measure.RES_TRIAL_MAX').size()+'}','text')\n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "data_qac_grip_strength", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var res=null\nif( $group(\n  'clsa-dcs-f2.Participants:Admin.StageInstance.stage',\n  'GripStrength',\n  'Admin.StageInstance.lastState').asSequence().last().any('Skipped','NotApplicable').not().value() ) {\n  res=$group(\n    'clsa-dcs-f2.Participants:Admin.StageInstance.stage',\n    'GripStrength',\n    'Admin.StageInstance.duration').asSequence().last()\n  if(res.isNull().not().value()) {\n    res=Math.round(res.div(60.0).multiply(10.0).value()) / 10.0\n  }\n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_duration_grip_strength", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "decimal"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "$('clsa-dcs-f2.BloodPressure:InstrumentRun.user').whenNull(\n  $group('Admin.Action.stage','BloodPressure','Admin.Action.user').asSequence().last()).lowerCase()"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_technician_blood_pressure", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "$group('clsa-dcs-f2.Participants:Admin.StageInstance.stage','BloodPressure',\n'Admin.StageInstance.lastState').any('Contraindicated','NotApplicable').value() \n? 1 : 0"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_contraindicated_blood_pressure", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "integer"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var v1=$group('Admin.Action.stage','BloodPressure','Admin.Action.actionType').asSequence()\nvar v2=$group('Admin.Action.stage','BloodPressure','Admin.Action.eventReason').asSequence()\nvar res=null\nvar arr=[]  // string array of events\nfor(var i=0; i<v1.size(); i++) {\n  if(v1.valueAt(i).any('SKIP').not().value() ||\n     v2.valueAt(i).isNull().value()) continue\n  var key=v2.valueAt(i).value().slice(14)\n  if(-1==arr.indexOf(key))\n    arr.push(key)\n}\nif(undefined!==arr && 0<arr.length) {\n  res=newValue(arr.pop(),'text')  \n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_skip_blood_pressure", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "// this script compounds repeated comments by using lowercase comment strings as array keys\n// and further compounds events within actions\n// \nvar v1=$group('Admin.Action.stage','BloodPressure','Admin.Action.comment').asSequence()\nvar v2=$group('Admin.Action.stage','BloodPressure','Admin.Action.actionType').asSequence()\nvar v3=$group('Admin.Action.stage','BloodPressure','Admin.Action.eventReason').asSequence()\nvar res=null\nvar c_str=[]  // string array of comments\nvar e_str=[]  // string array of events\nvar a_str=[]  // string array of actions\nfor(var i=0; i<v1.size(); i++) {  \n  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull()).value()) continue\n  c_str.push(v1.valueAt(i).value())\n  a_str.push(v2.valueAt(i).value())\n  e_str.push((v3.valueAt(i).isNull().value()?'SeeComment':v3.valueAt(i).value().slice(14)))\n}\nvar v4=$('clsa-dcs-f2.BloodPressure:InstrumentRun.skipComment')\nif(v4.isNull().not().value()) {\n  c_str.push(v4.value())\n  a_str.push('SKIP')\n  e_str.push('SeeComment')\n}\nif(0<c_str.length) {\n  var arr=[]\n  var key_orig=[]\n  for(var i=0;i<c_str.length;i++) {\n    var key=c_str[i].replace(/[^a-zA-Z0-9 \u00e0\u00e2\u00e4\u00e8\u00e9\u00ea\u00eb\u00ee\u00ef\u00f4\u0153\u00f9\u00fb\u00fc\u00ff\u00e7\u00c0\u00c2\u00c4\u00c8\u00c9\u00ca\u00cb\u00ce\u00cf\u00d4\u0152\u00d9\u00db\u00dc\u0178\u00c7]/g,\"\")\n    var key_lower = key.toLowerCase()    \n    // retain the first encountered instance of the comment\n    if(undefined===key_orig[key_lower])\n      key_orig[key_lower]=key\n    if(0==key_orig[key_lower].length) continue\n    // combine the action and the event\n    var str=a_str[i]+':'+e_str[i]\n    if(undefined===arr[key_lower])\n      arr[key_lower]=[]\n    if(-1===arr[key_lower].indexOf(str))\n      arr[key_lower].push(str)\n  }\n  \n  var str=[]\n  for(var key in arr) {\n    // compound repeated events \n    var subarr=[]\n    for(var i=0;i<arr[key].length;i++) {\n      var t=arr[key][i].split(':')\n      var t_key=t[1]\n      if(undefined===subarr[t_key])\n        subarr[t_key]=[]\n      if(-1===subarr[t_key].indexOf(t[0]))  \n        subarr[t_key].push(t[0])\n    }\n    var substr=[]\n    for(var t_key in subarr) {\n      var t_str='SeeComment'==t_key?']':']'+t_key\n      if(1<subarr[t_key].length) {\n        substr.push('['+subarr[t_key].join('/')+t_str);\n      } else {\n        substr.push('['+subarr[t_key][0]+t_str);\n      }\n    }\n    str.push('['+((1<substr.length)?substr.join('/'):substr[0])+']:'+key_orig[key])\n  }\n  \n  if(1<str.length) {\n    res=newValue(str.join(','),'text')\n  } else if(1==str.length) {\n    res=newValue(str[0],'text')\n  }\n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_comment_blood_pressure", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var stage=newValue($group('clsa-dcs-f2.Participants:Admin.StageInstance.stage','BloodPressure','Admin.StageInstance.lastState').asSequence().last(),'text')\n$this('data_qac_blood_pressure').isNull().and(stage.any('Skipped','NotApplicable').not()).value() ? 1 : 0"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "data_missing_blood_pressure", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "integer"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var res=null\nif($('clsa-dcs-f2.BloodPressure:RES_AVG_COUNT').isNull().not().value()) {\n  res=newValue('{trial_count:'+$('clsa-dcs-f2.BloodPressure:RES_AVG_COUNT')+'}','text')\n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "data_qac_blood_pressure", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var res=null\nif( $group(\n  'clsa-dcs-f2.Participants:Admin.StageInstance.stage',\n  'BloodPressure',\n  'Admin.StageInstance.lastState').asSequence().last().any('Skipped','NotApplicable').not().value() ) {\n  res=$group(\n    'clsa-dcs-f2.Participants:Admin.StageInstance.stage',\n    'BloodPressure',\n    'Admin.StageInstance.duration').asSequence().last()\n  if(res.isNull().not().value()) {\n    res=Math.round(res.div(60.0).multiply(10.0).value()) / 10.0\n  }\n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_duration_blood_pressure", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "decimal"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "$('clsa-dcs-f2.ECG:InstrumentRun.user').whenNull(\n  $group('Admin.Action.stage','ECG','Admin.Action.user').asSequence().last()).lowerCase()"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_technician_ecg", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "$group('clsa-dcs-f2.Participants:Admin.StageInstance.stage','ECG',\n'Admin.StageInstance.lastState').any('Contraindicated','NotApplicable').value() \n? 1 : 0"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_contraindicated_ecg", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "integer"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var v1=$group('Admin.Action.stage','ECG','Admin.Action.actionType').asSequence()\nvar v2=$group('Admin.Action.stage','ECG','Admin.Action.eventReason').asSequence()\nvar res=null\nvar arr=[]  // string array of events\nfor(var i=0; i<v1.size(); i++) {\n  if(v1.valueAt(i).any('SKIP').not().value() ||\n     v2.valueAt(i).isNull().value()) continue\n  var key=v2.valueAt(i).value().slice(14)\n  if(-1==arr.indexOf(key))\n    arr.push(key)\n}\nif(undefined!==arr && 0<arr.length) {\n  res=newValue(arr.pop(),'text')  \n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_skip_ecg", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "// this script compounds repeated comments by using lowercase comment strings as array keys\n// and further compounds events within actions\n// \nvar v1=$group('Admin.Action.stage','ECG','Admin.Action.comment').asSequence()\nvar v2=$group('Admin.Action.stage','ECG','Admin.Action.actionType').asSequence()\nvar v3=$group('Admin.Action.stage','ECG','Admin.Action.eventReason').asSequence()\nvar res=null\nvar c_str=[]  // string array of comments\nvar e_str=[]  // string array of events\nvar a_str=[]  // string array of actions\nfor(var i=0; i<v1.size(); i++) {  \n  if(v1.valueAt(i).isNull().or(v2.valueAt(i).isNull()).value()) continue\n  c_str.push(v1.valueAt(i).value())\n  a_str.push(v2.valueAt(i).value())\n  e_str.push((v3.valueAt(i).isNull().value()?'SeeComment':v3.valueAt(i).value().slice(14)))\n}\nvar v4=$('clsa-dcs-f2.ECG:InstrumentRun.skipComment')\nif(v4.isNull().not().value()) {\n  c_str.push(v4.value())\n  a_str.push('SKIP')\n  e_str.push('SeeComment')\n}\nif(0<c_str.length) {\n  var arr=[]\n  var key_orig=[]\n  for(var i=0;i<c_str.length;i++) {\n    var key=c_str[i].replace(/[^a-zA-Z0-9 \u00e0\u00e2\u00e4\u00e8\u00e9\u00ea\u00eb\u00ee\u00ef\u00f4\u0153\u00f9\u00fb\u00fc\u00ff\u00e7\u00c0\u00c2\u00c4\u00c8\u00c9\u00ca\u00cb\u00ce\u00cf\u00d4\u0152\u00d9\u00db\u00dc\u0178\u00c7]/g,\"\")\n    var key_lower = key.toLowerCase()    \n    // retain the first encountered instance of the comment\n    if(undefined===key_orig[key_lower])\n      key_orig[key_lower]=key\n    if(0==key_orig[key_lower].length) continue\n    // combine the action and the event\n    var str=a_str[i]+':'+e_str[i]\n    if(undefined===arr[key_lower])\n      arr[key_lower]=[]\n    if(-1===arr[key_lower].indexOf(str))\n      arr[key_lower].push(str)\n  }\n  \n  var str=[]\n  for(var key in arr) {\n    // compound repeated events \n    var subarr=[]\n    for(var i=0;i<arr[key].length;i++) {\n      var t=arr[key][i].split(':')\n      var t_key=t[1]\n      if(undefined===subarr[t_key])\n        subarr[t_key]=[]\n      if(-1===subarr[t_key].indexOf(t[0]))  \n        subarr[t_key].push(t[0])\n    }\n    var substr=[]\n    for(var t_key in subarr) {\n      var t_str='SeeComment'==t_key?']':']'+t_key\n      if(1<subarr[t_key].length) {\n        substr.push('['+subarr[t_key].join('/')+t_str);\n      } else {\n        substr.push('['+subarr[t_key][0]+t_str);\n      }\n    }\n    str.push('['+((1<substr.length)?substr.join('/'):substr[0])+']:'+key_orig[key])\n  }\n  \n  if(1<str.length) {\n    res=newValue(str.join(','),'text')\n  } else if(1==str.length) {\n    res=newValue(str[0],'text')\n  }\n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_comment_ecg", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var stage=newValue($group('clsa-dcs-f2.Participants:Admin.StageInstance.stage','ECG','Admin.StageInstance.lastState').asSequence().last(),'text')\n$this('data_qac_ecg').isNull().and(stage.any('Skipped','NotApplicable').not()).value() ? 1 : 0"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "data_missing_ecg", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "integer"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var f=$('clsa-dcs-f2.ECG:RES_XML_FILE')\nvar q=$('clsa-dcs-f2.ECG:RES_DIAGNOSIS')\nvar res=null\nif(f.isNull().not().value()) {\n  var str='{file_size:'+f.length()+',quality:'\n  if(q.lowerCase().matches(/poor data quality/).value()) {\n    str += '0}'\n  } else {\n    str += '1}'  \n  }\n  res = newValue(str,'text')\n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "data_qac_ecg", 
        "occurrenceGroup": "", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "text"
      }, 
      {
        "attributes": [
          {
            "name": "script", 
            "value": "var res=null\nif( $group(\n  'clsa-dcs-f2.Participants:Admin.StageInstance.stage',\n  'ECG',\n  'Admin.StageInstance.lastState').asSequence().last().any('Skipped','NotApplicable').not().value() ) {\n  res=$group(\n    'clsa-dcs-f2.Participants:Admin.StageInstance.stage',\n    'ECG',\n    'Admin.StageInstance.duration').asSequence().last()\n  if(res.isNull().not().value()) {\n    res=Math.round(res.div(60.0).multiply(10.0).value()) / 10.0\n  }\n}\nres"
          }
        ], 
        "entityType": "Participant", 
        "index": 0, 
        "isRepeatable": false, 
        "mimeType": "", 
        "name": "stage_duration_ecg", 
        "referencedEntityType": "", 
        "unit": "", 
        "valueType": "decimal"
      }
    ]
  }, 
  "datasourceName": "Quality_Control", 
  "from": [
    "clsa-dcs-f2.Participants", 
    "clsa-dcs-f2.BloodPressure", 
    "clsa-dcs-f2.CognitiveTest", 
    "clsa-dcs-images-f2.CarotidIntima", 
    "clsa-dcs-images-f2.DualHipBoneDensity", 
    "clsa-dcs-f2.ECG", 
    "clsa-dcs-images-f2.ForearmBoneDensity", 
    "clsa-dcs-f2.GripStrength", 
    "clsa-dcs-f2.Hearing", 
    "clsa-dcs-images-f2.LateralBoneDensity", 
    "clsa-dcs-images-f2.RetinalScanLeft", 
    "clsa-dcs-images-f2.RetinalScanRight", 
    "clsa-dcs-f2.Spirometry", 
    "clsa-dcs-f2.Tonometer", 
    "clsa-dcs-f2.Weight", 
    "clsa-dcs-images-f2.WholeBodyBoneDensity", 
    "clsa-dcs-f2.StandingHeight", 
    "clsa-dcs-images-f2.SpineBoneDensity"
  ], 
  "name": "QC_F2", 
  "where": "$lastupdate().before(newValue('BEFORE_DATE','date')).and($lastupdate().after(newValue('AFTER_DATE','date')))"
}
