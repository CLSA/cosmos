#!/usr/bin/php
<?php
/**
 * This script reads all opal views and builds all code and database scripts to support all indicators.
 * Author: Patrick Emond <emondpd@mcmaster.ca>
 */

chdir( dirname( __FILE__ ).'/../' );
require_once 'settings.ini.php';
require_once 'settings.local.ini.php';
require_once $SETTINGS['path']['CENOZO'].'/src/initial.class.php';
$initial = new \cenozo\initial();
$settings = $initial->get_settings();
define( 'CENOZO_DB', sprintf( '%s%s', $settings['db']['database_prefix'], $settings['general']['framework_name'] ) );
define( 'COSMOS_DB', sprintf( '%s%s', $settings['db']['database_prefix'], $settings['general']['instance_name'] ) );
define( 'REBUILD_DATABASE', 1 < $argc );

// logging functions
function out( $message ) { printf( "%s\n", $message ); }
function fatal( $message ) { out( sprintf( 'FATAL ERROR: %s', $message ) ); die(); }

function snake_to_camel( $snake, $first = false )
{
  $camel = '';
  foreach( explode( '_', $snake ) as $index => $word )
    $camel .= $first || 0 < $index ? ucwords( $word ) : $word;
  return $camel;
}

function snake_to_title( $snake )
{
  return ucwords( str_replace( '_', ' ', $snake ) );
}

function format_string( $string )
{
  global $db;

  // NULL values are returned as a MySQL NULL value
  if( is_null( $string ) ) return 'NULL';

  // boolean values must be converted to strings (without double-quotes)
  if( is_bool( $string ) ) return $string ? 'true' : 'false';

  // trim whitespace from the begining and end of the string and replace unusual characters
  if( is_string( $string ) ) $string = trim( str_replace(
    array( ' ', '', '“', "’'", '¸', '–' ),
    array( ' ', "'", '"', '"', ',', '-' ),
    $string
  ) );

  return 0 == strlen( $string ) ?
    'NULL' : sprintf( '"%s"', $db->real_escape_string( $string ) );
}

function insert_row( $table, $column_list, $value_list )
{
  global $db;

  $sql = sprintf(
    'INSERT INTO %s ( %s ) VALUES ( %s )',
    $table,
    implode( ', ', $column_list ),
    implode( ', ',
      array_map(
        function( $item ) { return format_string( $item ); },
        $value_list
      )
    )
  );

  $result = $db->query( $sql );
  if( !$result ) fatal( sprintf( "Failed to insert row.\n%s\n%s", $db->error, $sql ) );
  return $db->insert_id;
}

function insert_rows( $table, $column_list, $value_lists )
{
  global $db;

  $sql = sprintf(
    'INSERT INTO %s ( %s ) VALUES %s',
    $table,
    implode( ', ', $column_list ),
    implode(
      ', ',
      array_map(
        function( $value_list ) {
          return sprintf(
            "\n( %s )",
            implode(
              ', ',
              array_map(
                function( $item ) { return format_string( $item ); },
                $value_list
              )
            )
          );
        },
        $value_lists
      )
    )
  );

  $result = $db->query( $sql );
  if( !$result ) fatal( sprintf( "Failed to insert row.\n%s\n%s", $db->error, $sql ) );
  return $db->affected_rows;
}

function get_type( $opal_type )
{
  if( 'decimal' == $opal_type ) return 'float';
  else if( 'text' == $opal_type ) return 'string';
  else return $opal_type;
}

function get_database_type( $type )
{
  if( 'boolean' == $type ) return 'TINYINT(1)';
  else if( 'date' == $type ) return 'DATE';
  else if( 'float' == $type ) return 'FLOAT';
  else if( 'integer' == $type ) return 'INT';
  else if( 'string' == $type ) return 'VARCHAR(255)';
  fatal( sprintf( 'Cannot convert type "%s"', $type ) );
}

function get_stage_type_duration_range( $platform, $study_phase, $stage_type )
{
  global $duration_ranges;

  // default from 0 to 1 hour
  $range = array( 'low' => 0, 'high' => 3600 );

  if( array_key_exists( $stage_type, $duration_ranges[$platform][$study_phase] ) )
  {
    $array = $duration_ranges[$platform][$study_phase][$stage_type];
    $range['low'] = $array[0];
    $range['high'] = $array[1];
  }

  return $range;
}

// used by the get_stage_type_duration_range function above
$duration_ranges = [
  'inhome' => [
    'bl' => [
      'inhome_1' =>                   [   55, 3315 ],
      'inhome_2' =>                   [   52, 3153 ],
      'inhome_3' =>                   [   51, 3108 ],
      'inhome_cognition_recording' => [   18, 1092 ],
      'inhome_id' =>                  [    1,   93 ],
      'inhome_scoring' =>             [   23, 1395 ]
    ],
    'f1' => [
      'inhome_1' =>                   [   64, 3888 ],
      'inhome_2' =>                   [   49, 2991 ],
      'inhome_3' =>                   [   48, 2913 ],
      'inhome_4' =>                   [   88, 5304 ],
      'inhome_cognition_recording' => [   24, 1473 ]
    ],
    'f2' => [
      'inhome_1' =>                   [   64, 3855 ],
      'inhome_2' =>                   [   52, 3147 ],
      'inhome_3' =>                   [   44, 2646 ],
      'inhome_4' =>                   [   60, 3618 ],
      'inhome_cognition_recording' => [   22, 1338 ]
    ]
  ],
  'dcs' => [
    'bl' => [
      'blood' =>                   [   22, 1326 ],
      'blood_pressure' =>          [   21, 1293 ],
      'carotid_intima' =>          [    0,   60 ],
      'chair_rise' =>              [    2,  156 ],
      'cognitive_test' =>          [    7,  444 ],
      'contraindication_qnaire' => [   14,  867 ],
      'dexa' =>                    [   72, 4320 ],
      'dexa_forearm' =>            [    1,   96 ],
      'dexa_hip' =>                [    1,  111 ],
      'dexa_lateral' =>            [    0,   57 ],
      'dexa_qnaire' =>             [    2,  120 ],
      'dexa_whole_body' =>         [    5,  303 ],
      'disease_qnaire' =>          [   52, 3120 ],
      'ecg' =>                     [   44, 2673 ],
      'event_pmt' =>               [    6,  393 ],
      'functional_status' =>       [    4,  276 ],
      'grip_strength' =>           [    6,  399 ],
      'hearing' =>                 [   23, 1386 ],
      'hips_waist' =>              [    2,  168 ],
      'neuro_scoring' =>           [   22, 1362 ],
      'retinal_scan' =>            [    7,  468 ],
      'sitting_height' =>          [    1,  117 ],
      'spirometry' =>              [   20, 1230 ],
      'standing_balance' =>        [    6,  360 ],
      'standing_height' =>         [    2,  150 ],
      'stroop_fas' =>              [   66, 3996 ],
      'time_based_pmt' =>          [   49, 2952 ],
      'tonometer' =>               [    4,  276 ],
      'tug' =>                     [    1,  102 ],
      'urine' =>                   [    0,   18 ],
      'vision_acuity' =>           [   11,  699 ],
      'walk' =>                    [    2,  129 ],
      'weight' =>                  [    2,  123 ]
    ],
    'f1' => [
      'blood' =>                   [   22, 1356 ],
      'blood_pressure' =>          [   21, 1314 ],
      'carotid_intima' =>          [    0,   60 ],
      'chair_rise' =>              [    2,  156 ],
      'cognitive_test' =>          [    7,  456 ],
      'contraindication_qnaire' => [   12,  735 ],
      'deviation_aecrf' =>         [    0,   33 ],
      'dexa' =>                    [   79, 4749 ],
      'dexa_forearm' =>            [    1,  102 ],
      'dexa_hip' =>                [    1,  111 ],
      'dexa_lateral' =>            [    1,   60 ],
      'dexa_qnaire' =>             [    2,  129 ],
      'dexa_spine' =>              [    1,   81 ],
      'dexa_whole_body' =>         [    5,  330 ],
      'disease_qnaire' =>          [   49, 2955 ],
      'ecg' =>                     [   34, 2082 ],
      'event_pmt' =>               [   94, 5694 ],
      'frax' =>                    [    0,   39 ],
      'functional_status' =>       [    0,   51 ],
      'general_health' =>          [   15,  906 ],
      'grip_strength' =>           [    6,  384 ],
      'hearing' =>                 [   22, 1359 ],
      'hips_waist' =>              [    2,  168 ],
      'inhome_qa' =>               [    3,  192 ],
      'neuro_scoring' =>           [    4,  291 ],
      'osea' =>                    [   18, 1110 ],
      'retinal_scan' =>            [    7,  444 ],
      'retinal_scan_left' =>       [    3,  186 ],
      'retinal_scan_right' =>      [    4,  243 ],
      'spirometry' =>              [   18, 1110 ],
      'standing_balance' =>        [    6,  372 ],
      'standing_height' =>         [    2,  150 ],
      'stroop_fas' =>              [   65, 3951 ],
      'time_based_pmt' =>          [   48, 2886 ],
      'tonometer' =>               [    4,  270 ],
      'tug' =>                     [    1,   96 ],
      'urine' =>                   [    0,   18 ],
      'vision_acuity' =>           [   11,  672 ],
      'walk' =>                    [    2,  129 ],
      'weight' =>                  [    1,  111 ]
    ],
    'f2' => [
      'blood' =>                   [  215,  685 ],
      'blood_pressure' =>          [  385,  560 ],
      'carotid_intima' =>          [    0,   60 ],
      'cdtt' =>                    [  205,  515 ],
      'chair_rise' =>              [    2,  165 ],
      'cognitive_test' =>          [  120,  210 ],
      'contraindication_qnaire' => [  115,  395 ],
      'deviation_aecrf' =>         [    0,   33 ],
      'dexa' =>                    [   75, 4500 ],
      'dexa_forearm' =>            [    1,  108 ],
      'dexa_hip' =>                [    1,  105 ],
      'dexa_lateral' =>            [    1,   63 ],
      'dexa_qnaire' =>             [    3,  204 ],
      'dexa_spine' =>              [    1,   87 ],
      'dexa_whole_body' =>         [    5,  354 ],
      'disease_qnaire' =>          [  565, 1440 ],
      'ecg' =>                     [  260, 1255 ],
      'event_pmt' =>               [ 1800, 1995 ],
      'frax' =>                    [    0,   45 ],
      'general_health' =>          [  275,  545 ],
      'grip_strength' =>           [   90,  182 ],
      'hearing' =>                 [  335,  620 ],
      'hips_waist' =>              [    2,  165 ],
      'inhome_qa' =>               [    2,  162 ],
      'neuro_scoring' =>           [    5,  300 ],
      'osipv' =>                   [  280,  620 ],
      'retinal_scan' =>            [    7,  426 ],
      'retinal_scan_left' =>       [   44,  147 ],
      'retinal_scan_right' =>      [   44,  147 ],
      'sitting_height' =>          [    1,  108 ],
      'social_network' =>          [  405,  865 ],
      'spirometry' =>              [  190,  690 ],
      'standing_balance' =>        [    5,  351 ],
      'standing_height' =>         [    2,  147 ],
      'stroop_fas' =>              [  285,  490 ],
      'time_based_pmt' =>          [  900, 1140 ],
      'tonometer' =>               [   56,  174 ],
      'tug' =>                     [    1,  111 ],
      'urine' =>                   [    0,   21 ],
      'vision_acuity' =>           [  230,  490 ],
      'walk' =>                    [    2,  144 ],
      'weight' =>                  [   23,   80 ]
    ]
  ],
  'dcs_home' => [
    'bl' => [],
    'f1' => [
      'blood_pressure' =>          [   24, 1458 ],
      'body_composition' =>        [   11,  675 ],
      'contraindication_qnaire' => [   18, 1125 ],
      'disease_qnaire' =>          [   71, 4311 ],
      'event_pmt' =>               [   97, 5826 ],
      'functional_status' =>       [    9,  555 ],
      'general_health' =>          [   21, 1314 ],
      'grip_strength' =>           [    9,  597 ],
      'hips_waist' =>              [    3,  198 ],
      'neuro_scoring' =>           [    8,  501 ],
      'osonly' =>                  [   21, 1263 ],
      'spirometry' =>              [   17, 1065 ],
      'standing_height' =>         [    3,  195 ],
      'stroop_fas' =>              [   75, 4536 ],
      'time_based_pmt' =>          [   49, 2976 ]
    ],
    'f2' => []
  ],
  'dcs_phone' => [
    'bl' => [],
    'f1' => [
      'contraindication_qnaire' => [   13,  786 ],
      'disease_qnaire' =>          [   49, 2979 ],
      'functional_status' =>       [    6,  360 ],
      'general_health' =>          [   15,  915 ],
      'height_weight' =>           [    1,   96 ],
      'osea' =>                    [   19, 1161 ],
      'stroop_fas' =>              [   32, 1929 ]
    ],
    'f2' => [
      'contraindication_qnaire' => [   16,  990 ],
      'disease_qnaire' =>          [   59, 3585 ],
      'general_health' =>          [   24, 1464 ],
      'height_weight' =>           [    2,  126 ],
      'os' =>                      [   16, 1002 ],
      'social_network' =>          [   37, 2271 ]
    ]
  ]
];

$db = new mysqli(
  $settings['db']['server'],
  $settings['db']['username'],
  $settings['db']['password'],
  COSMOS_DB
);

$stage_column_list = array( 'technician', 'contraindicated', 'missing', 'skip', 'duration', 'comment' );

$indicators = array();

$study_phase_list = array();
$result = $db->query( sprintf( 'SELECT id, code FROM %s.study_phase', CENOZO_DB ) );
if( !$result ) fatal( 'Cannot get list of study phases from Cenozo database.' );
while( $row = $result->fetch_assoc() ) $study_phase_list[$row['code']] = $row['id'];
$result->free();

$platform_list = array();
$result = $db->query( 'SELECT id, name FROM platform' );
if( !$result ) fatal( 'Cannot get list of platforms from Cosmos database.' );
while( $row = $result->fetch_assoc() ) $platform_list[$row['name']] = $row['id'];
$result->free();

/**************************************************************************************************
 * PART 1: Delete any existing autogenerated code, database entries, and views
 *************************************************************************************************/
out( 'Deleting existing automagic code' );

// clean out stage_type and indicator records
if( REBUILD_DATABASE )
{
  $result = $db->query( 'DELETE FROM indicator' );
  if( !$result ) fatal( 'Cannot delete rows in indicator table.' );
  $result = $db->query( 'ALTER TABLE indicator AUTO_INCREMENT = 1' );
  if( !$result ) fatal( 'Cannot reset indicator table\'s auto increment value.' );
  $result = $db->query( 'DELETE FROM stage_type' );
  if( !$result ) fatal( 'Cannot delete rows in stage_type table.' );
  $result = $db->query( 'ALTER TABLE stage_type AUTO_INCREMENT = 1' );
  if( !$result ) fatal( 'Cannot reset stage_type table\'s auto increment value.' );

  // drop all data tables
  $sql = sprintf(
    'SELECT table_name '.
    'FROM information_schema.TABLES '.
    'WHERE table_schema = "%s" ',
    COSMOS_DB
  );
  foreach( $study_phase_list as $study_phase => $study_phase_id )
    $sql .= sprintf( 'AND table_name LIKE "%s_%%" ', $study_phase );

  $result = $db->query( $sql );
  if( !$result ) fatal( sprintf( 'Unable to get list of existing data tables.', $subject ) );
  while( $row = $result->fetch_assoc() )
  {
    $result1 = $db->query( sprintf( 'DROP TABLE %s', $row['table_name'] ) );
    if( !$result1 ) fatal( sprintf( 'Unable to drop %s table.', $row['table_name'] ) );
  }
  $result->free();
}

// delete all code
$template_filename_list = explode( "\n", shell_exec( 'find doc/code_templates/ -type f' ) );
array_pop( $template_filename_list ); // the last is an empty string
foreach( $template_filename_list as $template_filename )
{
  foreach( $study_phase_list as $study_phase => $study_phase_id )
  {
    $filename = str_replace(
      array( 'doc/code_templates/', 'SUBJECT' ),
      array( '', sprintf( '%s_*', $study_phase ) ),
      $template_filename
    );

    if( false !== strpos( $template_filename, '/SUBJECT/' ) )
    {
      $dir = preg_replace( '#/[^/]+$#', '', $filename );
      exec( sprintf( 'rm -rf %s', $dir ) );
    }
    else
    {
      exec( sprintf( 'rm -f %s', $filename ) );
    }
  }
}

// remove study_types to the module list in the stage module
file_put_contents(
  'web/app/stage/module.js',
  preg_replace(
    '/var dataModuleList = \[.*\];/',
    'var dataModuleList = [];',
    file_get_contents( 'web/app/stage/module.js' )
  )
);

/**************************************************************************************************
 * PART 2: Parse all Opal views
 *************************************************************************************************/
out( 'Parsing Opal views' );

foreach( $study_phase_list as $study_phase => $study_phase_id )
{
  $indicators[$study_phase] = array();
  foreach( $platform_list as $platform => $platform_id )
  {
    $indicators[$study_phase][$platform] = array();
    out( sprintf( 'Processing platform "%s/%s"', $study_phase, $platform ) );

    // loop through all views
    $dir = sprintf( 'aux/opal_views/%s/%s', $study_phase, $platform );
    if( file_exists( $dir ) ) foreach( glob( sprintf( '%s/*.json', $dir ) ) as $json_filename )
    {
      preg_match( '#^.+/([^/]+)\.json$#', $json_filename, $matches );
      $view = $matches[1];

      // don't process the interview or *_meta view, it is for metadata only
      if( 'interview' != $view && false === strpos( $view, 'meta' ) )
      {
        out( sprintf( ' - processing view "%s" ', $view ) );

        $indicators[$study_phase][$platform][$view] = array();

        // loop through all columns in the view
        $view_obj = json_decode( file_get_contents( $json_filename ) );
        $propname = 'Magma.VariableListViewDto.view';
        if( is_object( $view_obj ) && property_exists( $view_obj, $propname ) )
        {
          $view_subobj = $view_obj->$propname;
          if( property_exists( $view_subobj, 'variables' ) )
          {
            foreach( $view_subobj->variables as $variable )
            {
              if( in_array( $variable->name, $stage_column_list ) ) {} // ignore columns which are in the stage table
              else if( 'meta_' == substr( $variable->name, 0, 5 ) ) {} // ignore meta columns
              else
              {
                if( $variable->isRepeatable )
                {
                  if( '_name' == substr( $variable->name, -5 ) )
                  {
                    // strip out the _name postfix
                    $suffix = substr( $variable->name, 0, -5 );
                    if( property_exists( $variable, 'attributes' ) )
                    {
                      $attributes = current( $variable->attributes );
                      if( preg_match(
                        "/^newSequence\(\[(.*)\](, *'text')?\)$/",
                        trim( str_replace( "\n", " ", $attributes->value ) ),
                        $matches
                      ) )
                      {
                        foreach( explode( ',', $matches[1] ) as $name )
                        {
                          $name = strtolower( substr( trim( $name ), 1, -1 ) );
                          $indicators[$study_phase][$platform][$view][] = array(
                            'name' => sprintf( '%s_%s', $name, $suffix ),
                            'type' => get_type( $variable->valueType )
                          );
                        }
                      }
                    }
                  }
                  else if( '_size' == substr( $variable->name, -5 ) )
                  {
                    // strip out the _name postfix
                    $suffix = substr( $variable->name, 0, -5 );

                    // find the indicator and set its type
                    foreach( $indicators[$study_phase][$platform][$view] as $index => $indicator  )
                      if( false !== strpos( $indicator['name'], sprintf( '_%s', $suffix ) ) )
                        $indicators[$study_phase][$platform][$view][$index]['type'] = get_type( $variable->valueType );
                  }
                  else if( '_value' == substr( $variable->name, -6 ) )
                  {
                    // strip out the _name postfix
                    $suffix = substr( $variable->name, 0, -6 );

                    // find the indicator and set its type
                    foreach( $indicators[$study_phase][$platform][$view] as $index => $indicator  )
                      if( false !== strpos( $indicator['name'], sprintf( '_%s', $suffix ) ) )
                        $indicators[$study_phase][$platform][$view][$index]['type'] = get_type( $variable->valueType );
                  }
                }
                else
                {
                  // normal variable
                  $indicators[$study_phase][$platform][$view][] = array(
                    'name' => $variable->name,
                    'type' => get_type( $variable->valueType )
                  );
                }
              }
            }
          }
        }
      }
    }

    out( sprintf(
      ' - found %d views containing %d indicators',
      count( $indicators[$study_phase][$platform] ),
      array_reduce(
        $indicators[$study_phase][$platform],
        function( $carry, $item ) {
          $carry += count( $item );
          return $carry;
        },
        0
      )
    ) );
  }
}


/**************************************************************************************************
 * PART 3: Write view details to the database
 *************************************************************************************************/
if( REBUILD_DATABASE )
{
  out( 'Writing view details to the database' );

  $stage_type_count = 0;
  $indicator_count = 0;
  foreach( $indicators as $study_phase => $platforms )
  {
    foreach( $platforms as $platform => $stage_types )
    {
      foreach( $stage_types as $stage_type => $columns )
      {
        if( 0 < count( $columns ) )
        {
          // create services
          $subject = sprintf( '%s_%s_%s_data', $study_phase, $platform, $stage_type );
          $result = $db->query( sprintf( 'DELETE FROM service WHERE subject = "%s"', $subject ) );
          if( !$result ) fatal( 'Cannot delete rows in service table.' );

          insert_rows(
            'service',
            array( 'method', 'subject', 'resource', 'restricted' ),
            array(
              array( 'GET', $subject, 0, 0 ),
              array( 'GET', $subject, 1, 0 )
            )
          );

          // get the duration range
          $range = get_stage_type_duration_range( $platform, $study_phase, $stage_type );

          // create the stage type
          $stage_type_id = insert_row(
            'stage_type',
            array( 'study_phase_id', 'platform_id', 'name', 'duration_low', 'duration_high' ),
            array( $study_phase_list[$study_phase], $platform_list[$platform], $stage_type, $range['low'], $range['high'] )
          );
          $stage_type_count++;

          // create the indicators
          $indicator_count += insert_rows(
            'indicator',
            array( 'stage_type_id', 'name', 'type' ),
            array_map(
              function( $column ) {
                global $stage_type_id;
                return array( $stage_type_id, $column['name'], $column['type'] );
              },
              $columns
            )
          );

          // now create the data table
          $result = $db->query( sprintf( 'DROP TABLE IF EXISTS %s', $subject ) );
          if( !$result ) fatal( sprintf( 'Unable to drop %s table.', $subject ) );

          $sql = sprintf(
            'CREATE TABLE %s ( '.
            'id INT UNSIGNED NOT NULL AUTO_INCREMENT, '.
            'update_timestamp TIMESTAMP NOT NULL, '.
            'create_timestamp TIMESTAMP NOT NULL, '.
            'stage_id INT UNSIGNED NOT NULL, '.
            '%s, '.
            'PRIMARY KEY (id), '.
            'INDEX fk_stage_id (stage_id ASC), '.
            'UNIQUE INDEX uq_stage_id (stage_id ASC), '.
            'CONSTRAINT fk_%s_stage_id '.
              'FOREIGN KEY (stage_id) '.
              'REFERENCES stage (id) '.
              'ON DELETE NO ACTION '.
              'ON UPDATE NO ACTION) '.
            'ENGINE = InnoDB',
            $subject,
            implode( ', ', array_map(
              function( $column ) {
                return sprintf( '%s %s NULL DEFAULT NULL', $column['name'], get_database_type( $column['type'] ) );
              },
              $columns
            ) ),
            $subject
          );
          $result = $db->query( $sql );
          if( !$result ) fatal( sprintf( 'Unable to create %s table.', $subject ) );
        }
      }
    }
  }

  out( sprintf( 'Done, wrote %d stage types and %d indicators', $stage_type_count, $indicator_count ) );
}

/**************************************************************************************************
 * PART 4: Generate code
 *************************************************************************************************/
out( 'Generating code' );

// get a list of all template files
$template_filename_list = explode( "\n", shell_exec( 'find doc/code_templates/ -type f' ) );
array_pop( $template_filename_list ); // the last is an empty string

$subject_list = array();
$result = $db->query( sprintf(
  'SELECT '.
    'stage_type.id, '.
    'study_phase.code AS study_phase, '.
    'platform.name AS platform, '.
    'stage_type.name AS stage_type '.
  'FROM stage_type '.
  'JOIN %s.study_phase ON stage_type.study_phase_id = study_phase.id '.
  'JOIN platform ON stage_type.platform_id = platform.id '.
  'ORDER BY study_phase.code, platform.name, stage_type.name',
  CENOZO_DB
) );
if( !$result ) fatal( 'Cannot get list of stage_types from Cosmos database.' );
while( $row = $result->fetch_assoc() )
{
  $name = str_replace(
    'dcs',
    'DCS',
    str_replace(
      '_',
      ' ',
      sprintf(
        '%s %s %s',
        $row['study_phase'],
        $row['platform'],
        $row['stage_type']
      )
    )
  );

  $subject = sprintf(
    '%s_%s_%s_data',
    $row['study_phase'],
    $row['platform'],
    $row['stage_type']
  );

  $subject_list[] = $subject;

  // get the indicators for this study_phase
  $column_list = array();
  $result1 = $db->query( sprintf(
    'SELECT name, type '.
    'FROM indicator '.
    'WHERE stage_type_id = %d',
    $row['id']
  ) );
  if( !$result1 ) fatal( 'Cannot get list of study phases from Cenozo database.' );
  while( $row1 = $result1->fetch_assoc() ) $column_list[] = $row1;
  $result1->free();

  $column_list_string = array_reduce(
    $column_list,
    function( $carry, $column ) {
      $carry .= sprintf(
        "      %s: {\n".
        "        title: '%s',\n".
        "        type: '%s'\n".
        "      },\n",
        $column['name'],
        snake_to_title( $column['name'] ),
        in_array( $column['type'], ['boolean','float','integer'] ) ? $column['type'] : 'string'
      );
      return $carry;
    },
    ''
  );

  $input_list_string = array_reduce(
    $column_list,
    function( $carry, $column ) {
      $carry .= sprintf(
        "    %s: {\n".
        "      title: '%s',\n".
        "      type: '%s'%s\n".
        "    },\n",
        $column['name'],
        snake_to_title( $column['name'] ),
        'boolean' == $column['type'] ? 'boolean' : 'string',
        'integer' == $column['type'] || 'float' == $column['type'] ?
          sprintf( ",\n      format: '%s'", $column['type'] ) : ''
      );
      return $carry;
    },
    ''
  );

  foreach( $template_filename_list as $template_filename )
  {
    $filename = str_replace(
      array( 'doc/code_templates/', 'SUBJECT' ),
      array( '', $subject ),
      $template_filename
    );

    if( false !== strpos( $template_filename, '/SUBJECT/' ) )
    {
      $dir = preg_replace( '#/[^/]+$#', '', $filename );
      if( !file_exists( $dir ) ) mkdir( $dir, 0755, true );
    }

    file_put_contents(
      $filename,
      str_replace(
        array( '<NAME>', '<SUBJECT>', '<SUBJECT_CAMEL>', '<COLUMN_LIST>', '<INPUT_LIST>' ),
        array( $name, $subject, snake_to_camel( $subject, true ), $column_list_string, $input_list_string ),
        file_get_contents( $template_filename )
      )
    );
  }
}
$result->free();

// add all study_types to the module list in the stage module
file_put_contents(
  'web/app/stage/module.js',
  preg_replace(
    '/var dataModuleList = \[.*\];/',
    sprintf(
      'var dataModuleList = [ %s ];',
      implode(
        ', ',
        array_map(
          function( $subject ) { return sprintf( "'%s'", $subject ); },
          $subject_list
        )
      )
    ),
    file_get_contents( 'web/app/stage/module.js' )
  )
);

$db->close();
