#!/usr/bin/php
<?php
require_once '../settings.ini.php';
require_once $SETTINGS['path']['PHP_UTIL'].'/opalcurl.class.php';
require_once $SETTINGS['path']['PHP_UTIL'].'/database.class.php';
require_once $SETTINGS['path']['PHP_UTIL'].'/util.class.php';

define( 'MIN_RANK', 1 );
define( 'MAX_RANK', 3 );

$active_ranks = array(2,3);
$view_list = array(1=>'QC_BL', 2=>'QC_F1', 3=>'QC_F2');

$rank = 1; // set default
$after_date = null;
$before_date = null;
if( 2 == $argc )
{
  $rank = $argv[1];
}
else if( 4 == $argc )
{
  $rank = $argv[1];
  $after_date = $argv[2];
  $before_date = $argv[3];
  if(!(preg_match('/^20(1|2)[0-9]-(0|1)[0-9]{1}-[0-3]{1}[0-9]{1}/',$after_date) &&
       preg_match('/^20(1|2)[0-9]-(0|1)[0-9]{1}-[0-3]{1}[0-9]{1}/',$after_date) ))
  {
    $after_date = null;
    $before_date = null;
  }
}

if($rank < MIN_RANK || $rank > MAX_RANK )
{
  util::out('invalid rank');
  die();
}

$db = new database(
  $SETTINGS['db']['DB_SERV'],
  $SETTINGS['db']['DB_USER'],
  $SETTINGS['db']['DB_PASS'],
  $SETTINGS['db']['DB_NAME'] );

// for wave ranks in the process of collecting and exporting data nightly
// a date range must be specified and the json view will be sed modified to
// retrict opal data to fall within the range.
//

if(in_array($rank,$active_ranks))
{
  if(null == $after_date && null == $before_date)
  {
    $a_date = new DateTime();
    $a_date->modify('-1 week');
    $b_date = new DateTime();
    $after_date = $a_date->format('Y-m-d');
    $before_date = $b_date->format('Y-m-d');
  }
  else
  {
    $sql = sprintf(
      'select '.
      'min(start_date) as min_date, '.
      'max(start_date) as max_date, '.
      'rank '.
      'from interview '.
      'where rank=%d', $rank);

    $res = $db->get_all( $sql );
    $a_date = DateTime::createFromFormat('Y-m-d', $res['min_date']);
    $b_date = DateTime::createFromFormat('Y-m-d', $res['max_date']);

    // ensure dates make sense
    $input_a_date = DateTime::createFromFormat('Y-m-d', $after_date);
    $input_b_date = DateTime::createFromFormat('Y-m-d', $before_date);

    if($input_a_date < $a_date)
      $after_date = $a_date->format('Y-m-d');
    if($input_b_date > $b_date)
      $before_date = $b_date->format('Y-m-d');
  }
}

util::out( sprintf('rank %d, range: %s => %s', $rank, $after_date, $before_date));

$opal = new opalcurl(
  $SETTINGS['opal']['OPAL_SERV'],
  $SETTINGS['opal']['OPAL_PORT'],
  $SETTINGS['opal']['OPAL_USER'],
  $SETTINGS['opal']['OPAL_PASS'],
  'Quality_Control',
  $view_list[$rank],
  $SETTINGS['path']['OPAL_VIEWS'] );

$sql = 'SELECT id, name FROM site';
$res = $db->get_all( $sql );
$site_id_map = array();
foreach( $res as $item )
  $site_id_map[$item['name']]=$item['id'];

util::out( 'getting opal data...' );
if( in_array($rank,$active_ranks) && null != $before_date && null != $after_date )
{
  $opal->set_date_range( $before_date, $after_date );
}
$identifier_list = $opal->get_identifiers();
$list = $opal->get_complete_list();
$total = count( $list );

util::out( 'processing data...');
$interview_values = array();
$technician_values = array();
$target = count($list);
$num = 0;
foreach( $list as $uid => $row )
{
  $tech=$row['stage_technician_spirometry'];
  $site=$row['interview_site'];
  if( '' == $row['interview_start_date'] || '' == $row['interview_barcode'] ||
      '' == $site )
  {
    util::show_status( ++$num, $target );
    continue;
  }
  $interview_values[] =
    sprintf( '(%d,"%s","%s","%s",%d)',
      $site_id_map[$site], $row['interview_start_date'],
      $uid,$row['interview_barcode'],$rank);

  if('' == $tech)
  {
    util::show_status( ++$num, $target );
    continue;
  }
  $tech_str = sprintf( '(%d,"%s")',
    $site_id_map[$site], $tech);
  if(!in_array($tech_str,$technician_values))
    $technician_values[] = $tech_str;

  util::show_status( ++$num, $target );
}

$sql =
  'INSERT IGNORE INTO interview '.
  '(site_id, start_date, uid, barcode, rank) '.
  'VALUES '.
  implode(',', $interview_values);

if(false === $db->execute( $sql ) )
{
  util::out( 'ERROR: failed to insert interview records');
  var_dump( $sql );
  die();
}

$sql =
  'INSERT IGNORE INTO technician '.
  '(site_id, name) '.
  'VALUES '.
  implode(',',$technician_values);

if(false === $db->execute( $sql ) )
{
  util::out( 'ERROR: failed to insert technician records');
  var_dump( $sql );
  die();
}

$num = 0;
foreach($list as $uid=>$row)
{
  $tech=$row['stage_technician_spirometry'];
  $site=$row['interview_site'];
  $qcdata=$row['data_grade_spirometry'];
  $missing=$row['data_missing_spirometry'];
  $contraindicated=$row['stage_contraindicated_spirometry'];
  $skip=$row['stage_skip_spirometry'];
  $comment=$row['stage_comment_spirometry'];
  $duration=$row['stage_duration_spirometry'];

  if( '' == $row['interview_start_date'] || '' == $row['interview_barcode'] ||
      '' == $site )
  {
    util::show_status( ++$num, $target );
    continue;
  }

  $sql = sprintf(
    'SELECT id FROM interview '.
    'WHERE site_id=%d '.
    'AND uid="%s" '.
    'AND barcode="%s" '.
    'AND start_date="%s"',
    $site_id_map[$site], $uid, $row['interview_barcode'],$row['interview_start_date']);

  $interview_id = $db->get_one( $sql );

  $tech_id = 'NULL';
  if('' != $tech)
  {
    $sql = sprintf(
      'SELECT id FROM technician '.
      'WHERE name="%s" '.
      'AND site_id=%d', $tech, $site_id_map[$site]);

    $tech_id = $db->get_one( $sql );
  }

  if(false===$interview_id || false===$tech_id)
  {
    util::out('ERROR: failed to find interview and technician primary keys');
    die();
  }

  $sql = sprintf(
    'REPLACE INTO stage '.
    '(interview_id,technician_id,name,missing,contraindicated,comment,qcdata,skip,duration) '.
    'VALUES(%d,%s,"spirometry",%d,%d,%s,%s,%s,%s)',
    $interview_id,
    $tech_id,
    $missing,
    $contraindicated,
    $db->format_string($comment),
    $db->format_string($qcdata),
    $db->format_string($skip),
    (''==$duration ? 'NULL' : $duration));

  if(false===$db->execute( $sql ))
  {
    util::out('ERROR: failed to create or update stage record');
    util::out($sql);
    die();
  }

  util::show_status( ++$num, $target );
}
?>
