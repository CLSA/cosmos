#!/usr/bin/php
<?php
/**
 * This script reads all opal views and builds all code and database scripts to support all indicators.
 * Author: Patrick Emond <emondpd@mcmaster.ca>
 */

define( 'TIMEOUT', 5 );
define( 'OPAL_DELAY', 0.5 * 1000000 );
chdir( dirname( __FILE__ ).'/../' );
require_once 'settings.ini.php';
require_once 'settings.local.ini.php';
require_once $SETTINGS['path']['CENOZO'].'/src/initial.class.php';
$initial = new \cenozo\initial();
$settings = $initial->get_settings();
$opal_headers = array(
  sprintf( 'Authorization: X-Opal-Auth %s',
           base64_encode( sprintf( '%s:%s', $settings['opal']['username'], $settings['opal']['password'] ) ) ),
  'Accept: application/json'
);
define( 'CENOZO_DB', sprintf( '%s%s', $settings['db']['database_prefix'], $settings['general']['framework_name'] ) );
define( 'COSMOS_DB', sprintf( '%s%s', $settings['db']['database_prefix'], $settings['general']['instance_name'] ) );

// logging functions
function out( $message ) { printf( "%s\n", $message ); }
function fatal( $message ) { out( sprintf( 'FATAL ERROR: %s', $message ) ); die(); }

function snake_to_camel( $snake, $first = false )
{
  $camel = '';
  foreach( explode( '_', $snake ) as $index => $word )
    $camel .= $first || 0 > $index ? ucwords( $word ) : $word;
  return $camel;
}

function format_string( $string )
{
  global $db;

  // NULL values are returned as a MySQL NULL value
  if( is_null( $string ) ) return 'NULL';

  // boolean values must be converted to strings (without double-quotes)
  if( is_bool( $string ) ) return $string ? 'true' : 'false';

  // trim whitespace from the begining and end of the string and replace unusual characters
  if( is_string( $string ) ) $string = trim( str_replace(
    array( ' ', '`', '“', "’'", '¸', '–' ),
    array( ' ', "'", '"', '"', ',', '-' ),
    $string
  ) );

  return 0 == strlen( $string ) ?
    'NULL' : sprintf( '"%s"', $db->real_escape_string( $string ) );
}

function insert_row( $table, $column_list, $value_list )
{
  global $db;

  $sql = sprintf(
    'INSERT INTO %s ( %s ) VALUES ( %s )',
    $table,
    implode( ', ', $column_list ),
    implode( ', ',
      array_map(
        function( $item ) { return format_string( $item ); },
        $value_list
      )
    )
  );

  $result = $db->query( $sql );
  if( !$result ) fatal( sprintf( "Failed to insert row.\n%s\n%s", $db->error, $sql ) );
  return $db->insert_id;
}

function insert_rows( $table, $column_list, $value_lists )
{
  global $db;

  $sql = sprintf(
    'INSERT INTO %s ( %s ) VALUES %s',
    $table,
    implode( ', ', $column_list ),
    implode(
      ', ',
      array_map(
        function( $value_list ) {
          return sprintf(
            "\n( %s )",
            implode(
              ', ',
              array_map(
                function( $item ) { return format_string( $item ); },
                $value_list
              )
            )
          );
        },
        $value_lists
      )
    )
  );

  $result = $db->query( $sql );
  if( !$result ) fatal( sprintf( "Failed to insert row.\n%s\n%s", $db->error, $sql ) );
  return $db->affected_rows;
}

function get_type( $opal_type )
{
  if( 'decimal' == $opal_type ) return 'float';
  if( 'text' == $opal_type ) return 'string';
  return $opal_type;
}

function opal_ws( $url )
{
  global $opal_headers;
  $curl = curl_init();
  curl_setopt( $curl, CURLOPT_URL, $url );
  curl_setopt( $curl, CURLOPT_HTTPHEADER, $opal_headers );
  curl_setopt( $curl, CURLOPT_SSL_VERIFYPEER, false );
  curl_setopt( $curl, CURLOPT_RETURNTRANSFER, true );
  curl_setopt( $curl, CURLOPT_CONNECTTIMEOUT, TIMEOUT );

  // always wait before talking to Opal (it doesn't do well with being hammered)
  usleep( OPAL_DELAY );
  $response = curl_exec( $curl );
  $code = curl_getinfo( $curl, CURLINFO_HTTP_CODE );
  if( 0 == $code ) out( 'Cannot read from Opal (timeout).' );
  else if( 200 != $code ) fatal( sprintf( 'Error "%s" while reading from Opal url "%s".', $code, $url ) );

  return json_decode( $response );
}

/**************************************************************************************************
 * PART 1: Get all views from Opal
 *************************************************************************************************/
out( 'Downloading views from Opal' );

$db = new mysqli(
  $settings['db']['server'],
  $settings['db']['username'],
  $settings['db']['password'],
  COSMOS_DB
);

$indicators = array();

$study_phase_list = array();
$result = $db->query( sprintf( 'SELECT id, code FROM %s.study_phase', CENOZO_DB ) );
if( !$result ) fatal( 'Cannot get list of study phases from Cenozo database.' );
while( $row = $result->fetch_assoc() ) $study_phase_list[$row['code']] = $row['id'];
$result->free();

$platform_list = array();
$result = $db->query( 'SELECT id, name FROM platform' );
if( !$result ) fatal( 'Cannot get list of platforms from Cosmos database.' );
while( $row = $result->fetch_assoc() ) $platform_list[$row['name']] = $row['id'];
$result->free();

if( 1 < $argc )
{
  $indicators = (array) json_decode( file_get_contents( $argv[1] ) );
  foreach( $indicators as $platform => $study_phases )
  {
    $indicators[$platform] = (array) $study_phases;
    foreach( $indicators[$platform] as $study_phase => $stage_types )
    {
      $indicators[$platform][$study_phase] = (array) $stage_types;
      foreach( $indicators[$platform][$study_phase] as $stage_type => $columns )
      {
        $indicators[$platform][$study_phase][$stage_type] = (array) $columns;
        foreach( $indicators[$platform][$study_phase][$stage_type] as $index => $column )
        {
          $indicators[$platform][$study_phase][$stage_type][$index] = (array) $column;
        }
      }
    }
  }
}
else
{
  foreach( $platform_list as $platform => $platform_id )
  {
    out( sprintf( 'Processing platform "%s"', $platform ) );

    $indicators[$platform] = array();
    foreach( $study_phase_list as $study_phase => $study_phase_id ) $indicators[$platform][$study_phase] = array();

    $platform_url = sprintf(
      'https://%s:%d/ws/datasource/cosmos_%s',
      $settings['opal']['server'],
      $settings['opal']['port'],
      $platform
    );

    // loop through all views
    $platform_obj = opal_ws( $platform_url );
    foreach( $platform_obj->view as $view_name )
    {
      preg_match( '/^QC_(..)_(.+)$/', $view_name, $matches );
      if( 0 == count( $matches ) ) continue; // ignore views that aren't named correctly
      $study_phase = strtolower( $matches[1] );
      $view = strtolower( $matches[2] );

      out( sprintf( ' - reading view "%s" ', $view_name ) );

      if( !array_key_exists( $study_phase, $indicators[$platform] ) )
        fatal( sprintf( 'View "%s" references study phase "%s" which does not exist.', $view_name, $study_phase ) );

      $indicators[$platform][$study_phase][$view] = array();

      // loop through all columns
      $view_url = sprintf( '%s/view/%s', $platform_url, $view_name );
      $view_obj = opal_ws( $view_url );
      $propname = 'Magma.VariableListViewDto.view';
      $view_subobj = $view_obj->$propname;
      if( property_exists( $view_subobj, 'variables' ) )
      {
        foreach( $view_subobj->variables as $variable )
        {
          if( 'meta_' != substr( $variable->name, 0, 5 ) ) // ignore meta columns
          {
            if( $variable->isRepeatable )
            {
              if( '_name' == substr( $variable->name, -5 ) ) // only process *_name columns
              {
                // strip out the _name postfix
                $suffix = substr( $variable->name, 0, -5 );
                if( property_exists( $variable, 'attributes' ) )
                {
                  $attributes = current( $variable->attributes );
                  if( preg_match( "/^newSequence\(\[.*\],'text'\)$/", $attributes->value ) )
                  {
                    foreach( explode( ',', substr( $attributes->value, 13, -9 ) ) as $name )
                    {
                      $name = strtolower( substr( $name, 1, -1 ) );
                      $indicators[$platform][$study_phase][$view][] = array(
                        'name' => sprintf( '%s_%s', $name, $suffix ),
                        'type' => get_type( $variable->valueType )
                      );
                    }
                  }
                }
              }
            }
            else
            {
              // normal variable
              $indicators[$platform][$study_phase][$view][] = array(
                'name' => $variable->name,
                'type' => get_type( $variable->valueType )
              );
            }
          }
        }
      }
    }

    out( sprintf(
      ' - found %d views containing %d columns',
      count( $indicators[$platform][$study_phase] ),
      array_reduce(
        $indicators[$platform][$study_phase],
        function( $carry, $item ) {
          $carry += count( $item );
          return $carry;
        },
        0
      )
    ) );
  }
  print json_encode( $indicators );
}

/**************************************************************************************************
 * PART 2: Write all stage types and indicators to the database
 *************************************************************************************************/
out( 'Writing view details to the database' );

$result = $db->query( 'TRUNCATE indicator' );
if( !$result ) fatal( 'Cannot delete rows in indicator table.' );
$result = $db->query( 'DELETE FROM stage_type' );
if( !$result ) fatal( 'Cannot delete rows in stage_type table.' );
$result = $db->query( 'ALTER TABLE stage_type AUTO_INCREMENT = 1' );
if( !$result ) fatal( 'Cannot delete rows in stage_type table.' );

$stage_type_count = 0;
$indicator_count = 0;
foreach( $indicators as $platform => $study_phases )
{
  foreach( $study_phases as $study_phase => $stage_types )
  {
    foreach( $stage_types as $stage_type => $columns )
    {
      if( 0 < count( $columns ) )
      {
        // create services
        $subject = sprintf( '%s_%s_%s_data', $study_phase, $platform, $stage_type );
        $result = $db->query( sprintf( 'DELETE FROM service WHERE subject = "%s"', $subject ) );
        if( !$result ) fatal( 'Cannot delete rows in service table.' );

        insert_rows(
          'service',
          array( 'method', 'subject', 'resource', 'restricted' ),
          array(
            array( 'GET', $subject, 0, 0 ),
            array( 'GET', $subject, 1, 0 )
          )
        );

        // create the stage type
        $stage_type_id = insert_row(
          'stage_type',
          array( 'study_phase_id', 'platform_id', 'name' ),
          array( $study_phase_list[$study_phase], $platform_list[$platform], $stage_type )
        );
        $stage_type_count++;

        // create the indicators
        $indicator_count += insert_rows(
          'indicator',
          array( 'stage_type_id', 'name', 'type' ),
          array_map(
            function( $r ) {
              global $stage_type_id;
              return array( $stage_type_id, $r['name'], $r['type'] );
            },
            $columns
          )
        );
      }
    }
  }
}

out( sprintf( 'Done, wrote %d stage types and %d indicators', $stage_type_count, $indicator_count ) );

/**************************************************************************************************
 * PART 3: Generate code
 *************************************************************************************************/
out( 'Generating code' );

// get a list of all template files
$template_filename_list = explode( "\n", shell_exec( 'find doc/code_templates/ -type f' ) );
array_pop( $template_filename_list ); // the last is an empty string

$indicator_list = array();
$result = $db->query( sprintf(
  'SELECT study_phase.code AS study_phase, '.
    'platform.name AS platform, '.
    'stage_type.name AS stage_type, '.
    'indicator.name, '.
    'indicator.type '.
  'FROM stage_type '.
  'JOIN %s.study_phase ON stage_type.study_phase_id = study_phase.id '.
  'JOIN platform ON stage_type.platform_id = platform.id '.
  'JOIN indicator ON stage_type.id = indicator.stage_type_id '.
  'ORDER BY study_phase.code, platform.name, stage_type.name, indicator.name',
  CENOZO_DB
) );
if( !$result ) fatal( 'Cannot get list of indicators from Cosmos database.' );
while( $row = $result->fetch_assoc() )
{
  $name = sprintf( '%s_%s_%s', $row['study_phase'], $row['platform'], $row['stage_type'] );
  $subject = sprintf( '%s_data', $name );

  foreach( $template_filename_list as $template_filename )
  {
    $filename = str_replace(
      array( 'doc/code_templates/', '/module/' ),
      array( '', sprintf( '/%s/', $subject ) ),
      $template_filename
    );

    if( false !== strpos( $template_filename, '/module/' ) )
    {
      $dir = preg_replace( '#/[^/]+$#', '', $filename );
      if( !file_exists( $dir ) ) mkdir( $dir, true );
    }

    file_put_contents(
      $filename,
      str_replace(
        array( '<NAME>', '<SUBJECT>', '<SUBJECT_CAMEL>' ),
        array( $name, $subject, snake_to_camel( $subject ) ),
        file_get_contents( $template_file )
      )
    );
  }
}
$result->free();

$db->close();
