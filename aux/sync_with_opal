#!/usr/bin/php
<?php
/**
 * This script reads all opal views and builds all code and database scripts to support all indicators.
 * Author: Patrick Emond <emondpd@mcmaster.ca>
 */

define( 'TIMEOUT', 20 );
define( 'OPAL_DELAY', 0.1 * 1000000 );
chdir( dirname( __FILE__ ).'/../' );
require_once 'settings.ini.php';
require_once 'settings.local.ini.php';
require_once $SETTINGS['path']['CENOZO'].'/src/initial.class.php';
$initial = new \cenozo\initial();
$settings = $initial->get_settings();
$opal_headers = array(
  sprintf( 'Authorization: X-Opal-Auth %s',
           base64_encode( sprintf( '%s:%s', $settings['opal']['username'], $settings['opal']['password'] ) ) )
);
define( 'CENOZO_DB', sprintf( '%s%s', $settings['db']['database_prefix'], $settings['general']['framework_name'] ) );
define( 'COSMOS_DB', sprintf( '%s%s', $settings['db']['database_prefix'], $settings['general']['instance_name'] ) );
define( 'REDOWNLOAD_VIEWS', 1 < $argc );

// logging functions
function out( $message ) { printf( "%s\n", $message ); }
function fatal( $message ) { out( sprintf( 'FATAL ERROR: %s', $message ) ); die(); }

function snake_to_camel( $snake, $first = false )
{
  $camel = '';
  foreach( explode( '_', $snake ) as $index => $word )
    $camel .= $first || 0 < $index ? ucwords( $word ) : $word;
  return $camel;
}

function snake_to_title( $snake )
{
  return ucwords( str_replace( '_', ' ', $snake ) );
}

function format_string( $string )
{
  global $db;

  // NULL values are returned as a MySQL NULL value
  if( is_null( $string ) ) return 'NULL';

  // boolean values must be converted to strings (without double-quotes)
  if( is_bool( $string ) ) return $string ? 'true' : 'false';

  // trim whitespace from the begining and end of the string and replace unusual characters
  if( is_string( $string ) ) $string = trim( str_replace(
    array( ' ', '', '“', "’'", '¸', '–' ),
    array( ' ', "'", '"', '"', ',', '-' ),
    $string
  ) );

  return 0 == strlen( $string ) ?
    'NULL' : sprintf( '"%s"', $db->real_escape_string( $string ) );
}

function insert_row( $table, $column_list, $value_list )
{
  global $db;

  $sql = sprintf(
    'INSERT INTO %s ( %s ) VALUES ( %s )',
    $table,
    implode( ', ', $column_list ),
    implode( ', ',
      array_map(
        function( $item ) { return format_string( $item ); },
        $value_list
      )
    )
  );

  $result = $db->query( $sql );
  if( !$result ) fatal( sprintf( "Failed to insert row.\n%s\n%s", $db->error, $sql ) );
  return $db->insert_id;
}

function insert_rows( $table, $column_list, $value_lists )
{
  global $db;

  $sql = sprintf(
    'INSERT INTO %s ( %s ) VALUES %s',
    $table,
    implode( ', ', $column_list ),
    implode(
      ', ',
      array_map(
        function( $value_list ) {
          return sprintf(
            "\n( %s )",
            implode(
              ', ',
              array_map(
                function( $item ) { return format_string( $item ); },
                $value_list
              )
            )
          );
        },
        $value_lists
      )
    )
  );

  $result = $db->query( $sql );
  if( !$result ) fatal( sprintf( "Failed to insert row.\n%s\n%s", $db->error, $sql ) );
  return $db->affected_rows;
}

function get_type( $opal_type )
{
  if( 'decimal' == $opal_type ) return 'float';
  else if( 'text' == $opal_type ) return 'string';
  else return $opal_type;
}

function get_database_type( $type )
{
  if( 'boolean' == $type ) return 'TINYINT(1)';
  else if( 'date' == $type ) return 'DATE';
  else if( 'float' == $type ) return 'FLOAT';
  else if( 'integer' == $type ) return 'INT';
  else if( 'string' == $type ) return 'VARCHAR(255)';
  fatal( sprintf( 'Cannot convert type "%s"', $type ) );
}

function opal_ws( $url, $decode = true, $xml = false )
{
  global $opal_headers;
  $headers = $opal_headers;
  $headers[] = $xml ? 'Accept application/xml' : 'Accept: application/json';
  $curl = curl_init();
  curl_setopt( $curl, CURLOPT_URL, $url );
  curl_setopt( $curl, CURLOPT_HTTPHEADER, $headers );
  curl_setopt( $curl, CURLOPT_SSL_VERIFYPEER, false );
  curl_setopt( $curl, CURLOPT_RETURNTRANSFER, true );
  curl_setopt( $curl, CURLOPT_CONNECTTIMEOUT, TIMEOUT );

  // always wait before talking to Opal (it doesn't do well with being hammered)
  usleep( OPAL_DELAY );
  $response = curl_exec( $curl );
  $code = curl_getinfo( $curl, CURLINFO_HTTP_CODE );
  if( 0 == $code ) out( 'Cannot read from Opal (timeout).' );
  else if( 200 != $code ) fatal( sprintf( 'Error "%s" while reading from Opal url "%s".', $code, $url ) );

  return $decode ? json_decode( $response ) : $response;
}

$db = new mysqli(
  $settings['db']['server'],
  $settings['db']['username'],
  $settings['db']['password'],
  COSMOS_DB
);

$indicators = array();

$study_phase_list = array();
$result = $db->query( sprintf( 'SELECT id, code FROM %s.study_phase', CENOZO_DB ) );
if( !$result ) fatal( 'Cannot get list of study phases from Cenozo database.' );
while( $row = $result->fetch_assoc() ) $study_phase_list[$row['code']] = $row['id'];
$result->free();

$platform_list = array();
$result = $db->query( 'SELECT id, name FROM platform' );
if( !$result ) fatal( 'Cannot get list of platforms from Cosmos database.' );
while( $row = $result->fetch_assoc() ) $platform_list[$row['name']] = $row['id'];
$result->free();

/**************************************************************************************************
 * PART 1: Delete any existing autogenerated code, database entries, and views
 *************************************************************************************************/
out( 'Deleting existing automagic code' );

// remove all view files
if( REDOWNLOAD_VIEWS ) exec( 'rm -rf aux/opal_views/*' );

// clean out stage_type and indicator records
$result = $db->query( 'TRUNCATE indicator' );
if( !$result ) fatal( 'Cannot delete rows in indicator table.' );
$result = $db->query( 'DELETE FROM stage_type' );
if( !$result ) fatal( 'Cannot delete rows in stage_type table.' );
$result = $db->query( 'ALTER TABLE stage_type AUTO_INCREMENT = 1' );
if( !$result ) fatal( 'Cannot delete rows in stage_type table.' );

// drop all data tables
$sql = sprintf(
  'SELECT table_name '.
  'FROM information_schema.TABLES '.
  'WHERE table_schema = "%s" ',
  COSMOS_DB
);
foreach( $study_phase_list as $study_phase => $study_phase_id )
  $sql .= sprintf( 'AND table_name LIKE "%s_%%" ', $study_phase );

$result = $db->query( $sql );
if( !$result ) fatal( sprintf( 'Unable to get list of existing data tables.', $subject ) );
while( $row = $result->fetch_assoc() )
{
  $result1 = $db->query( sprintf( 'DROP TABLE %s', $row['table_name'] ) );
  if( !$result1 ) fatal( sprintf( 'Unable to drop %s table.', $row['table_name'] ) );
}
$result->free();

// delete all code
$template_filename_list = explode( "\n", shell_exec( 'find doc/code_templates/ -type f' ) );
array_pop( $template_filename_list ); // the last is an empty string
foreach( $template_filename_list as $template_filename )
{
  foreach( $study_phase_list as $study_phase => $study_phase_id )
  {
    $filename = str_replace(
      array( 'doc/code_templates/', 'SUBJECT' ),
      array( '', sprintf( '%s_*', $study_phase ) ),
      $template_filename
    );

    if( false !== strpos( $template_filename, '/SUBJECT/' ) )
    {
      $dir = preg_replace( '#/[^/]+$#', '', $filename );
      exec( sprintf( 'rm -rf %s', $dir ) );
    }
    else
    {
      if( file_exists( $filename ) ) exec( sprintf( 'rm %s', $filename ) );
    }
  }
}

// remove study_types to the module list in the stage module
file_put_contents(
  'web/app/stage/module.js',
  preg_replace(
    '/var dataModuleList = \[.*\];/',
    'var dataModuleList = [];',
    file_get_contents( 'web/app/stage/module.js' )
  )
);

/**************************************************************************************************
 * PART 2: Get all views from Opal
 *************************************************************************************************/
out( 'Downloading views from Opal' );

foreach( $platform_list as $platform => $platform_id )
{
  out( sprintf( 'Processing platform "%s"', $platform ) );

  $indicators[$platform] = array();
  foreach( $study_phase_list as $study_phase => $study_phase_id ) $indicators[$platform][$study_phase] = array();

  $platform_url = sprintf(
    'https://%s:%d/ws/datasource/cosmos_%s',
    $settings['opal']['server'],
    $settings['opal']['port'],
    $platform
  );

  // loop through all views
  $platform_obj = opal_ws( $platform_url );
  foreach( $platform_obj->view as $view_name )
  {
    preg_match( '/^QC_(..)_(.+)$/', $view_name, $matches );
    if( 0 == count( $matches ) ) continue; // ignore views that aren't named correctly
    $study_phase = strtolower( $matches[1] );
    $view = strtolower( $matches[2] );

    // make sure the xml and json directory exists
    $dir = sprintf( 'aux/opal_views/%s/%s', $study_phase, $platform );
    if( !file_exists( $dir ) ) mkdir( $dir, 0755, true );

    $json_filename = sprintf( '%s/%s.json', $dir, $view );
    $xml_filename = sprintf( '%s/%s.xml', $dir, $view );
    $view_url = sprintf( '%s/view/%s', $platform_url, $view_name );
    $xml_url = sprintf( '%s/view/%s/xml', $platform_url, $view_name );

    if( REDOWNLOAD_VIEWS ||
        !file_exists( $json_filename ) || 0 == filesize( $json_filename ) ||
        !file_exists( $xml_filename ) || 0 == filesize( $xml_filename ) )
    {
      // write the view's xml and json files to disk
      out( sprintf( ' - downloading view "%s" ', $view_name ) );
      file_put_contents( $json_filename, opal_ws( $view_url, false ) );
      file_put_contents( $xml_filename, opal_ws( $xml_url, false, true ) );
    }

    if( 'interview' != $view ) // don't process the interview view, it is for metadata only
    {
      out( sprintf( ' - processing view "%s" ', $view_name ) );
      if( !array_key_exists( $study_phase, $indicators[$platform] ) )
        fatal( sprintf( 'View "%s" references study phase "%s" which does not exist.', $view_name, $study_phase ) );

      $indicators[$platform][$study_phase][$view] = array();

      // loop through all columns in the view
      $view_obj = json_decode( file_get_contents( $json_filename ) );
      $propname = 'Magma.VariableListViewDto.view';
      if( is_object( $view_obj ) && property_exists( $view_obj, $propname ) )
      {
        $view_subobj = $view_obj->$propname;
        if( property_exists( $view_subobj, 'variables' ) )
        {
          foreach( $view_subobj->variables as $variable )
          {
            if( 'meta_' != substr( $variable->name, 0, 5 ) ) // ignore meta columns
            {
              if( $variable->isRepeatable )
              {
                if( '_name' == substr( $variable->name, -5 ) ) // only process *_name columns
                {
                  // strip out the _name postfix
                  $suffix = substr( $variable->name, 0, -5 );
                  if( property_exists( $variable, 'attributes' ) )
                  {
                    $attributes = current( $variable->attributes );
                    if( preg_match( "/^newSequence\(\[.*\],'text'\)$/", $attributes->value ) )
                    {
                      foreach( explode( ',', substr( $attributes->value, 13, -9 ) ) as $name )
                      {
                        $name = strtolower( substr( $name, 1, -1 ) );
                        $indicators[$platform][$study_phase][$view][] = array(
                          'name' => sprintf( '%s_%s', $name, $suffix ),
                          'type' => get_type( $variable->valueType )
                        );
                      }
                    }
                  }
                }
              }
              else
              {
                // normal variable
                $indicators[$platform][$study_phase][$view][] = array(
                  'name' => $variable->name,
                  'type' => get_type( $variable->valueType )
                );
              }
            }
          }
        }
      }
    }
  }

  out( sprintf(
    ' - found %d views containing %d columns',
    count( $indicators[$platform][$study_phase] ),
    array_reduce(
      $indicators[$platform][$study_phase],
      function( $carry, $item ) {
        $carry += count( $item );
        return $carry;
      },
      0
    )
  ) );
}

/**************************************************************************************************
 * PART 3: Write view details to the database
 *************************************************************************************************/
out( 'Writing view details to the database' );

$stage_type_count = 0;
$indicator_count = 0;
foreach( $indicators as $platform => $study_phases )
{
  foreach( $study_phases as $study_phase => $stage_types )
  {
    foreach( $stage_types as $stage_type => $columns )
    {
      if( 0 < count( $columns ) )
      {
        // create services
        $subject = sprintf( '%s_%s_%s_data', $study_phase, $platform, $stage_type );
        $result = $db->query( sprintf( 'DELETE FROM service WHERE subject = "%s"', $subject ) );
        if( !$result ) fatal( 'Cannot delete rows in service table.' );

        insert_rows(
          'service',
          array( 'method', 'subject', 'resource', 'restricted' ),
          array(
            array( 'GET', $subject, 0, 0 ),
            array( 'GET', $subject, 1, 0 )
          )
        );

        // create the stage type
        $stage_type_id = insert_row(
          'stage_type',
          array( 'study_phase_id', 'platform_id', 'name' ),
          array( $study_phase_list[$study_phase], $platform_list[$platform], $stage_type )
        );
        $stage_type_count++;

        // create the indicators
        $indicator_count += insert_rows(
          'indicator',
          array( 'stage_type_id', 'name', 'type' ),
          array_map(
            function( $column ) {
              global $stage_type_id;
              return array( $stage_type_id, $column['name'], $column['type'] );
            },
            $columns
          )
        );

        // now create the data table
        $result = $db->query( sprintf( 'DROP TABLE IF EXISTS %s', $subject ) );
        if( !$result ) fatal( sprintf( 'Unable to drop %s table.', $subject ) );

        $sql = sprintf(
          'CREATE TABLE %s ( '.
          'id INT UNSIGNED NOT NULL AUTO_INCREMENT, '.
          'update_timestamp TIMESTAMP NOT NULL, '.
          'create_timestamp TIMESTAMP NOT NULL, '.
          'stage_id INT UNSIGNED NOT NULL, '.
          '%s, '.
          'PRIMARY KEY (id), '.
          'INDEX fk_stage_id (stage_id ASC), '.
          'UNIQUE INDEX uq_stage_id (stage_id ASC), '.
          'CONSTRAINT fk_%s_stage_id '.
            'FOREIGN KEY (stage_id) '.
            'REFERENCES stage (id) '.
            'ON DELETE NO ACTION '.
            'ON UPDATE NO ACTION) '.
          'ENGINE = InnoDB',
          $subject,
          implode( ', ', array_map(
            function( $column ) {
              return sprintf( '%s %s NULL DEFAULT NULL', $column['name'], get_database_type( $column['type'] ) );
            },
            $columns
          ) ),
          $subject
        );
        $result = $db->query( $sql );
        if( !$result ) fatal( sprintf( 'Unable to create %s table.', $subject ) );
      }
    }
  }
}

out( sprintf( 'Done, wrote %d stage types and %d indicators', $stage_type_count, $indicator_count ) );

/**************************************************************************************************
 * PART 4: Generate code
 *************************************************************************************************/
out( 'Generating code' );

// get a list of all template files
$template_filename_list = explode( "\n", shell_exec( 'find doc/code_templates/ -type f' ) );
array_pop( $template_filename_list ); // the last is an empty string

$subject_list = array();
$result = $db->query( sprintf(
  'SELECT '.
    'study_phase.id, '.
    'study_phase.code AS study_phase, '.
    'platform.name AS platform, '.
    'stage_type.name AS stage_type '.
  'FROM stage_type '.
  'JOIN %s.study_phase ON stage_type.study_phase_id = study_phase.id '.
  'JOIN platform ON stage_type.platform_id = platform.id '.
  'ORDER BY study_phase.code, platform.name, stage_type.name',
  CENOZO_DB
) );
if( !$result ) fatal( 'Cannot get list of stage_types from Cosmos database.' );
while( $row = $result->fetch_assoc() )
{
  $name = sprintf( '%s_%s_%s', $row['study_phase'], $row['platform'], $row['stage_type'] );
  $subject = sprintf( '%s_data', $name );
  $subject_list[] = $subject;

  // get the indicators for this study_phase
  $column_list = array();
  $result1 = $db->query( sprintf(
    'SELECT name, type '.
    'FROM indicator '.
    'WHERE stage_type_id = %d',
    $row['id']
  ) );
  if( !$result1 ) fatal( 'Cannot get list of study phases from Cenozo database.' );
  while( $row1 = $result1->fetch_assoc() ) $column_list[] = $row1;
  $result1->free();

  $column_list_string = array_reduce(
    $column_list,
    function( $carry, $column ) {
      $carry .= sprintf(
        "      %s: {\n".
        "        title: '%s',\n".
        "        type: '%s'\n".
        "      },\n",
        $column['name'],
        snake_to_title( $column['name'] ),
        $column['type']
      );
      return $carry;
    },
    ''
  );

  $input_list_string = array_reduce(
    $column_list,
    function( $carry, $column ) {
      $carry .= sprintf(
        "    %s: {\n".
        "      title: '%s',\n".
        "      type: '%s'\n".
        "    },\n",
        $column['name'],
        snake_to_title( $column['name'] ),
        $column['type']
      );
      return $carry;
    },
    ''
  );

  foreach( $template_filename_list as $template_filename )
  {
    $filename = str_replace(
      array( 'doc/code_templates/', 'SUBJECT' ),
      array( '', $subject ),
      $template_filename
    );

    if( false !== strpos( $template_filename, '/SUBJECT/' ) )
    {
      $dir = preg_replace( '#/[^/]+$#', '', $filename );
      if( !file_exists( $dir ) ) mkdir( $dir, 0755, true );
    }

    file_put_contents(
      $filename,
      str_replace(
        array( '<NAME>', '<SUBJECT>', '<SUBJECT_CAMEL>', '<COLUMN_LIST>', '<INPUT_LIST>' ),
        array( $name, $subject, snake_to_camel( $subject, true ), $column_list_string, $input_list_string ),
        file_get_contents( $template_filename )
      )
    );
  }
}
$result->free();

// add all study_types to the module list in the stage module
file_put_contents(
  'web/app/stage/module.js',
  preg_replace(
    '/var dataModuleList = \[.*\];/',
    sprintf(
      'var dataModuleList = [ %s ];',
      implode(
        ', ',
        array_map(
          function( $subject ) { return sprintf( "'%s'", $subject ); },
          $subject_list
        )
      )
    ),
    file_get_contents( 'web/app/stage/module.js' )
  )
);

$db->close();
