#!/usr/bin/php
<?php
require_once '../settings.ini.php';
require_once $SETTINGS['path']['PHP_UTIL'].'/database.class.php';
require_once $SETTINGS['path']['PHP_UTIL'].'/util.class.php';
require_once $SETTINGS['path']['PHP_UTIL'].'/phplot-6.2.0/phplot.php';

define( 'MIN_RANK', 1 );
define( 'MAX_RANK', 3 );

function fmt_label($value,$arg,$row)
{
  return sprintf('%s (%s)',$arg[$row][0],$arg[$row][1]);
}

function pick_color($img, $arg, $row, $col = null)
{
  $d = intval($arg[$row][2]) % 2;
  if(0 == $d) return 0;
  return 1;
}

function plot_histogram($filename,$title,$xtitle,$plotdata, $plotpoints,$plotareas=null)
{
  $plot = new PHPlot(800, 600);
  $plot->SetImageBorderType('plain');
  $plot->SetOutputFile($filename);
  $plot->SetPrintImage(0);
  $plot->SetIsInline(true);

  $plot->SetTitle($title);
  $plot->SetYTitle('Frequency');
  $plot->SetXTitle($xtitle);
  $plot->SetDrawXGrid(true);
  $plot->SetDrawYGrid(true);

  $plot->SetDataColors('navy');
  $plot->SetPlotType('lines');
  $plot->SetDataType('data-data');
  $plot->SetDataValues($plotdata);

  $plot->SetXLabelType('data');
  $plot->SetNumXTicks(10);
  $plot->SetXTickLabelPos('plotdown');
  $plot->SetPrecisionX(0);
  $plot->SetYLabelType('data');
  $plot->SetPrecisionY(0);
  $plot->DrawGraph();

  if(null!=$plotareas)
  {
    $plot->SetPlotType('squaredarea');
    $plot->SetDataType('data-data');
    $plot->SetDataValues($plotareas);
    $num_col = count($plotareas);
    $colors=array();
    for($i=0;$i<$num_col;$i++)
    {
      if($i%2==0)$colors[]='yellow';
      else $colors[]='green';
    }

    $plot->SetDataColors(
      $colors );
    $plot->DrawGraph();

    $plot->SetDataColors('navy');
    $plot->SetPlotType('lines');
    $plot->SetDataType('data-data');
    $plot->SetDataValues($plotdata);
    $plot->DrawGraph();
  }

  $plot->SetXTickLabelPos('none');
  $plot->SetXTickPos('none');
  $plot->SetDrawXGrid(false);
  $plot->SetDrawYGrid(false);
  $plot->SetTitle('');
  $plot->SetYTitle('');
  $plot->SetXTitle('');
  $plot->SetPlotType('points');
  $plot->SetDataType('data-data');
  $plot->SetDataValues($plotpoints);
  $plot->SetYDataLabelPos('plotin');
  $plot->SetYDataLabelType('custom','fmt_label',$plotpoints);
  $plot->SetDataColors('red');
  $plot->DrawGraph();

  $plot->PrintImage();
}


// stages with module times
/*
| blood                      |    1,2,3 |
| body_composition_weight    |    2 |
| contraindications          |    1,2,3 |
| deviation_aecrf            |    2,3 |
| disease_symptoms           |    1,2,3 |
| event_pmt                  |    1,2,3 |
| functional_status          |    1,2 |
| general_health             |    2,3 |
| inhome_id                  |    1 |
| inhome_1                   |    1,2,3 |
| inhome_2                   |    1,2,3 |
| inhome_3                   |    1,2,3 |
| inhome_4                   |    2,3 |
| neuropsychological_battery |    1 |
| osea                       |    2 |
| osipv                      |    3 |
| osonly                     |    2 |
| quality_assurance_inhome   |    2,3 |
| social_network             |    3 |
| stroop_fas                 |    3 |
| time_based_pmt             |    1,2,3 |
| urine                      |    1,2,3 |
*/

// stages with no modules
/*
| blood_pressure                     |    1,2,3 |
| bone_density_questionnaire         |    1,2,3 |
| carotid_intima                     |    1,2,3 |
| chair_rise                         |    1,2,3 |
| cognitive_test                     |    1,2,3 |
| conclusion_questionnaire           |    1,2,3 |
| consent                            |    1,2 |
| dual_hip_bone_density              |    1,2,3 |
| ecg                                |    1,2,3 |
| forearm_bone_density               |    1,2,3 |
| four_metre_walk                    |    1,2,3 |
| frax                               |    2,3 |
| grip_strength                      |    1,2,3 |
| hearing                            |    1,2,3 |
| hearing_questionnaire              |    1,2,3 |
| height_weight                      |    2 |
| hips_waist                         |    1,2,3 |
| lateral_bone_density               |    1,2,3 |
| neuropsychological_battery_scoring |    1,2,3 |
| retinal_scan                       |    1 |
| retinal_scan_left                  |    2,3 |
| retinal_scan_right                 |    2,3 |
| sitting_height                     |    1,3 |
| spine_bone_density                 |    2,3 |
| spirometry                         |    1,2,3 |
| standing_balance                   |    1,2,3 |
| standing_height                    |    1,2,3 |
| tonometer                          |    1,2,3 |
| tug                                |    1,2,3 |
| vision_acuity                      |    1,2,3 |
| weight                             |    1,2,3 |
| whole_body_bone_density            |    1,2,3 |
*/
$module_list=array(
  'blood',
  'body_composition_weight',
  'contraindications',
  'deviation_aecrf',
  'disease_symptoms',
  'event_pmt',
  'functional_status',
  'general_health',
  'inhome_id',
  'inhome_1',
  'inhome_2',
  'inhome_3',
  'inhome_4',
  'neuropsychological_battery',
  'osea',
  'osipv',
  'osonly',
  'quality_assurance_inhome',
  'social_network',
  'stroop_fas',
  'time_based_pmt',
  'urine');

function get_stage_index_from_type( $_type )
{
  $index = array(1,1,1);
  switch($_type)
  {
    case 'body_composition_weight':
      $index=array(null,1,null);
      break;
    case 'consent':
      $index = array(1,1,null);
      break;
    case 'deviation_aecrf':
      $index = array(null,1,1);
      break;
    case 'frax':
      $index = array(null,1,1);
      break;
    case 'height_weight':
      $index = array(null,1,null);
      break;
    case 'inhome_id':
      $index = array(1,null,null);
      break;
    case 'inhome_4':
      $index = array(null,1,1);
      break;
    case 'neuropsychological_battery':
      $index = array(1,null,null);
      break;
    case 'osea':
      $index = array(null,1,null);
      break;
    case 'osonly':
      $index = array(null,1,null);
      break;
    case 'osipv':
      $index = array(null,null,1);
      break;
    case 'quality_assurance_inhome':
      $index = array(null,1,1);
      break;
    case 'social_network':
      $index = array(null,null,1);
      break;
    case 'stroop_fas':
      $index = array(null,null,1);
      break;
    case 'retinal_scan':
      $index=array(1,null,null);
      break;
    case 'retinal_scan_left':
      $index=array(null,1,1);
      break;
    case 'retinal_scan_right':
      $index=array(null,1,1);
      break;
    case 'spine_bone_density':
      $index=array(null,1,1);
      break;
    case 'sitting_height':
      $index=array(1,null,1);
      break;
    default:
      break;
  }
  return $index;
}

function get_cutoff_from_type( $_type )
{
  $cut=3600;
  switch($_type)
  {
    case 'blood':
      $cut=3600;
      break;
    case 'blood_pressure':
      $cut=1800;
      break;
    case 'body_composition_weight':
      $cut=600;
      break;
    case 'bone_density_questionnaire':
      $cut=3600;
      break;
    case 'contraindications':
      $cut=1800;
      break;
    case 'carotid_intima':
      $cut=3600;
      break;
    case 'chair_rise':
      $cut=900;
      break;
    case 'cognitive_test':
      $cut=900;
      break;
    case 'conclusion_questionnaire':
      $cut=1800;
      break;
    case 'consent':
      $cut=1800;
      break;
    case 'deviation_aecrf':
      $cut=1800;
      break;
    case 'disease_symptoms':
      $cut=3600;
      break;
    case 'dual_hip_bone_density':
      $cut=1800;
      break;
    case 'ecg':
      $cut=3600;
      break;
    case 'event_pmt':
      $cut=3600;
      break;
    case 'forearm_bone_density':
      $cut=1800;
      break;
    case 'four_metre_walk':
      $cut=900;
      break;
    case 'frax':
      $cut=300;
      break;
    case 'functional_status':
      $cut=1200;
      break;
    case 'general_health':
      $cut=1800;
      break;
    case 'grip_strength':
      $cut=900;
      break;
    case 'hearing':
      $cut=1800;
      break;
    case 'hearing_questionnaire':
      $cut=300;
      break;
    case 'height_weight':
      $cut=1200;
      break;
    case 'hips_waist':
      $cut=1200;
      break;
    case 'inhome_id':
      $cut=300;
      break;
    case 'inhome_1':
      $cut=6000;
      break;
    case 'inhome_2':
      $cut=6000;
      break;
    case 'inhome_3':
      $cut=6000;
      break;
    case 'inhome_4':
      $cut=6000;
      break;
    case 'lateral_bone_density':
      $cut=1800;
      break;
    case 'neuropsychological_battery':
      $cut=3600;
      break;
    case 'neuropsychological_battery_scoring':
      $cut=10800;
      break;
    case 'osea':
      $cut=1800;
      break;
    case 'osonly':
      $cut=1800;
      break;
    case 'osipv':
      $cut=1800;
      break;
    case 'quality_assurance_inhome':
      $cut=1200;
      break;
    case 'retinal_scan':
      $cut=1800;
      break;
    case 'retinal_scan_left':
      $cut=1800;
      break;
    case 'retinal_scan_right':
      $cut=1800;
      break;
    case 'sitting_height':
      $cut=1200;
      break;
    case 'spine_bone_density':
      $cut=1800;
      break;
    case 'social_network':
      $cut=1800;
      break;
    case 'spirometry':
      $cut=3600;
      break;
    case 'standing_balance':
      $cut=1200;
      break;
    case 'standing_height':
      $cut=1200;
      break;
    case 'stroop_fas':
      $cut=1200;
      break;
    case 'time_based_pmt':
      $cut=1800;
      break;
    case 'tonometer':
      $cut=1800;
      break;
    case 'tug':
      $cut=600;
      break;
    case 'urine':
      $cut=1800;
      break;
    case 'vision_acuity':
      $cut=1800;
      break;
    case 'whole_body_bone_density':
      $cut=1800;
      break;
    case 'weight':
      $cut=600;
      break;
    default:
      break;
  }
  return $cut;
}

function get_bin_size_from_type( $_type )
{
  $bin=10;
  switch($_type)
  {
    case 'frax':
      $bin=1;
      break;
    case 'hearing_questionnaire':
      $bin=1;
      break;
    case 'inhome_id':
      $bin=1;
      break;
    case 'inhome_1':
      $bin=5;
      break;
    case 'inhome_2':
      $bin=5;
      break;
    case 'inhome_3':
      $bin=5;
      break;
    case 'inhome_4':
      $bin=5;
      break;
    case 'tug':
      $bin=5;
      break;
    case 'weight':
      $bin=5;
      break;
    default:
      break;
  }
  return $bin;
}

function plot_qac_field($field, $input_rank, $input_type, $input_bin, $input_percentile_bin)
{
  global $db, $module_list;

  $cut = get_cutoff_from_type($input_type);

  $sql = sprintf(
    'select min(%s) as tmin, max(%s) as tmax, '.
    'stddev(%s) as tstd, avg(%s) as tave '.
    'from tmp '.
    'where %s between 0 and %d', $field, $field, $field, $field, $field, $cut);

  $res = $db->get_row($sql);

  $tmin = $res['tmin'];
  $tmax = $res['tmax'];
  $tstd = $res['tstd'];
  $tave = $res['tave'];

  $sql = sprintf(
    'select %s, count(%s) as freq '.
    'from tmp '.
    'group by %s '.
    'order by freq desc '.
    'limit 1', $field, $field, $field);

  $res = $db->get_row($sql);
  $mode = $res[$field];

  $scale = 1.0;//60.0;
  $tsmin = floor($tmin/$scale);
  $tsmax = ceil($tmax/$scale);

  $bin = 1;
  if(null == $input_bin)
  {
    //$bin=get_bin_size_from_type($type);
    $bin = ceil(log10($tsmax-$tsmin));
  }
  else
  {
    $bin = $input_bin;
  }

  $bmin = max(0,$bin*floor($tsmin/$bin)-$bin);
  $bmax = $bin*(floor($tsmax/$bin)+1);
  $bin_range = range($bmin,$bmax,$bin);
  $bin_count = count($bin_range);

  util::out(sprintf('%s ave std: %s %s',$field,$tave, $tstd));
  util::out(sprintf('%s [min max range]: [%d %d %d]',$field,$tmin,$tmax, $tmax-$tmin));
  util::out(sprintf('scaled   [min max range]: [%d %d %d]',$tsmin,$tsmax, $tsmax-$tsmin));
  util::out(sprintf('bin size [range]: %d [%d %d]',$bin,$bmin,$bmax));
  util::out('number of bins: ' . $bin_count);

  $set = range(-3,3);
  $std = array();
  foreach($set as $num)
  {
    $std[] = $bin*floor((($tave+$num*$tstd)/$scale)/$bin);
  }

  util::out('std deviations: '. implode(',',$std));

  $histo = array_combine($bin_range,array_fill(0,$bin_count,0));

  $data = $db->get_all('select * from tmp order by start_date');

  foreach($data as $items)
  {
    $d = $items[$field];
    $curr = $bin*floor($d/$scale/$bin);
    if(in_array($curr,$bin_range))
      $histo[$curr]++;
  }

  $freqmax = max(array_values($histo));
  $mode_bin = array_search($freqmax,$histo);

  util::out(sprintf('mode: %s, freq: %s, bin: %s', $mode, $freqmax, $mode_bin));

  $plotdata = array();
  $plotpoints = array();
  $label_list = array();
  $area = array_sum(array_values($histo));
  $cum_sum = 0;
  $last_bin = 0;
  $percentile_bin = 10;
  if(null != $input_percentile_bin && $input_percentile_bin>0 && $input_percentile_bin<100)
  {
    $percentile_bin = $input_percentile_bin;
  }
  $last_percentile = $percentile_bin;
  $current_percentile_bin = $percentile_bin;
  $percentile_list[$current_percentile_bin] = array(
    'freq'=>array(),
    'ord'=>0,
    'endord'=>null,
    'endpercentile'=>null,
    'perc'=>array());

  foreach($histo as $time_bin=>$frequency)
  {
    // compute the percentile for the current bin
    $cum_sum += $frequency;
    $percent = 100.0*$cum_sum/$area;
    $percentile = intval(round($percent));

    // scale the percentile for line plotting
    $plotdata[] = array('',$time_bin,$frequency, $percentile*$freqmax/100.0);

    if($percentile > $current_percentile_bin)
    {
      $percentile_list[$current_percentile_bin]['endord']=$time_bin;
      $percentile_list[$current_percentile_bin]['endpercentile']=$percentile;
      $next_percentile_bin = min($current_percentile_bin+$percentile_bin,100-$percentile_bin);
      if($next_percentile_bin != $current_percentile_bin)
      {
        $current_percentile_bin = $next_percentile_bin;
        $percentile_list[$current_percentile_bin] = array(
          'freq'=>array(),
          'ord'=>$time_bin,
          'endord'=>null,
          'endpercentile'=>null,
          'perc'=>array());
      }
    }
    $percentile_list[$current_percentile_bin]['freq'][] = $frequency;
    $percentile_list[$current_percentile_bin]['perc'][] = $percent;

    if(in_array($time_bin,$std))
    {
      $index = array_search($time_bin,$std);
      $height = $index%2 == 0 ? $freqmax : 0.975*$freqmax;
      $label = ($index<3?((-3+$index).'SD'):($index>3?('+'.(-3+$index).'SD'):'AVG'));
      if(!in_array($label,$label_list))
      {
        $plotpoints[] = array($label,$time_bin,$height);
        $label_list[] = $label;
      }
    }
    elseif($time_bin == $mode_bin)
    {
      $label = 'MOD';
      if(!in_array($label,$label_list))
      {
        $plotpoints[] = array($label,$mode,1.025*$freqmax);
        $label_list[] = $label;
      }
    }
    $last_bin = $time_bin;
    $last_percentile = $percentile;
  }
  $percentile_list[$current_percentile_bin]['endord'] = $last_bin;
  $percentile_list[$current_percentile_bin]['endpercentile'] = $last_percentile;

  util::out('cumulative freq: ' . $cum_sum);
  $cum_sum = 0;
  $plotareas=array();
  $percentile_values = array_keys($percentile_list);
  $default_row = array_fill(0,count($percentile_values),0);
  $last_row;
  foreach($percentile_list as $percentile=>$data)
  {
    util::out(sprintf('percentile: %s -> %s [%s -> %s] n: %d  perc range: [%7.3lf => %7.3lf]',
      $percentile,
      $data['endpercentile'],
      util::time_to_label($data['ord']/60.0),
      util::time_to_label($data['endord']/60.0),
      count($data['freq']),
      min($data['perc']),
      max($data['perc'])));
    $cum_sum+=array_sum($data['freq']);

    $row = $default_row;
    $time_bin = $data['ord'];
    $id = array_search($percentile,$percentile_values);
    $row[$id] = $percentile * $freqmax/100.0;
    $plotareas[] = array_merge(array('',$data['ord']),$row);
    $last_row = array_merge(array('',$data['endord']),$row);
    $label_x = '';
    $label_y = $row[$id];
    /*
    if($id == 0)
      $label_x = $data['endord'];
    else
      $label_x = $data['ord'];
    */
    if($id != 0)
    {
      $label_x = $data['ord'];
      $label = util::time_to_label($label_x/60.0);
      $plotpoints[] = array($label,$label_x,$label_y);
    }
  }
  $plotareas[] = $last_row;
  util::out('CHECK cumulative freq: ' . $cum_sum);

  $filename = sprintf('histogram_%d_%d_%d_%s_%s.csv', $input_rank, $bin, $percentile_bin,$input_type, $field);
  util::out('writing to ' . $filename);
  $file = fopen($filename,'w');

  $header = sprintf('"%s","frequency"', $field) . PHP_EOL;
  fwrite($file,$header);
  foreach($histo as $bin=>$value)
  {
    fwrite($file, sprintf('"%d","%d"',$bin,$value) . PHP_EOL);
  }
  fclose($file);

  $filename = str_replace('.csv','.jpg',$filename);
  $title= sprintf( '%s %s %s', $input_type, $input_rank, $field);
  $xtitle='Scale (' . (1.0==$scale?'sec':(60.0==$scale?'min':'hr')).')';
  plot_histogram($filename,$title,$xtitle,$plotdata, $plotpoints, $plotareas);
}

///////////////////////////////////////////////////////////////////////////////////////////

$rank = 1; // set default
$type = 'tug';
$user_bin = null;
$user_perc_bin = null;
if( 3 == $argc )
{
  $rank = $argv[1];
  $type = $argv[2];
}
else if( 4 == $argc )
{
  $rank = $argv[1];
  $type = $argv[2];
  $user_bin = $argv[3];
}
else if( 5 == $argc )
{
  $rank = $argv[1];
  $type = $argv[2];
  $user_bin = $argv[3];
  $user_perc_bin = $argv[4];
}

if($rank < MIN_RANK || $rank > MAX_RANK )
{
  util::out('invalid rank');
  die();
}

$db = new database(
  $SETTINGS['db']['DB_SERV'],
  $SETTINGS['db']['DB_USER'],
  $SETTINGS['db']['DB_PASS'],
  $SETTINGS['db']['DB_NAME'] );

$index_list = get_stage_index_from_type($type);
if(null==$index_list[$rank-1])
{
  util::out(sprintf('data does not exist for type %s for rank %d',$type,$rank));
  die();
}

// convert to seconds
$sql =
  'create temporary table tmp as '.
  'select '.
  'cast( '.
  '  cast( '.
  '    substring_index( '.
  '      substring_index(duration,",",1),":",-1) as decimal(15,3))*60 as unsigned) as duration, ';

if(in_array($type,$module_list))
{
  $sql .=
  'cast( '.
  '  cast(trim("}" from substring_index(duration,":",-1)) as decimal(15,3))*60 as unsigned) as module, ';
}

$sql .= sprintf(
  'start_date, '.
  'concat(ifnull(t.name,"NA"),"(",site.name,")") as tech, '.
  'site.name as site, '.
  's.id as stage_id '.
  'from interview i '.
  'join stage s on i.id=s.interview_id '.
  'join site on site.id=i.site_id '.
  'left join technician t on t.id=s.technician_id and t.site_id=site.id '.
  'where rank=%d '.
  'and duration is not null '.
  'and s.name="%s"', $rank, $type);

$db->execute($sql);

util::out($sql);

plot_qac_field('duration', $rank, $type, $user_bin, $user_perc_bin);

if(in_array($type,$module_list))
{
  plot_qac_field('module', $rank, $type, $user_bin, $user_perc_bin);
}

$db->execute('drop table tmp');
